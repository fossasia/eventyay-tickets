name: Tests

on:
  push:
    branches: [ development ]
    paths-ignore:
      - 'doc/**'
      - 'src/pretalx/locale/**'
  pull_request:
    branches: [ development ]
    paths-ignore:
      - 'doc/**'
      - 'src/pretalx/locale/**'

permissions:
  contents: write
  checks: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.11 ]
        database: [ sqlite, postgres ]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pretalx
        options: >-
          --health-cmd "pg_isready -U postgres -d pretalx"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y gettext
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Python dependencies
        run: uv sync --group test --no-install-project
      - name: Install Postgres dependencies
        run: uv sync --extra postgres --group test --no-install-project
        if: matrix.database == 'postgres'
      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./src/pretalx/frontend/schedule-editor
      - name: Run checks
        run: uv run manage.py check --deploy
        working-directory: ./src
      - name: Run checks
        run: uv run manage.py compilemessages
        working-directory: ./src
      - name: Run tests
        working-directory: ./src
        run: |
          # tee will gobble up our exit code without pipefail
          set -o pipefail
          uv run pytest \
            -nauto -p no:sugar \
            --junitxml=pytest.xml \
            --cov-report=term-missing:skip-covered \
            tests | tee pytest-coverage.txt
        env:
          PRETALX_CONFIG_FILE: 'tests/ci_${{ matrix.database }}.cfg'
      - name: Show coverage as build info
        working-directory: ./src
        shell: bash  # needed to make echo work as expected
        run: |
          uv run -m coverage json

          export TOTAL_COV=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "TOTAL_COV=$TOTAL_COV" >> $GITHUB_ENV
          echo "## Test coverage: $TOTAL_COV%" >> $GITHUB_STEP_SUMMARY
          uv run -m coverage report --skip-covered --skip-empty --show-missing --format=markdown >> $GITHUB_STEP_SUMMARY

          uv run -m coverage report
        if: matrix.database == 'postgres' && matrix.python-version == '3.11'

      - name: "Make badge"
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 0ac3e4314d780e809c0164c8c329f36f
          filename: covbadge.json
          label: coverage
          message: ${{ env.TOTAL_COV }}%
          color: "#2185d0"
        if: env.TOTAL_COV && github.ref == 'refs/heads/development'
