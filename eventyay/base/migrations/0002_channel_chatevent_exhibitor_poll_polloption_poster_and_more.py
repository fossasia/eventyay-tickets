# Generated by Django 4.2.23 on 2025-06-29 21:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import eventyay.base.core.utils.json
import eventyay.base.models.bbb
import eventyay.base.models.exhibitor
import eventyay.base.models.poster
import eventyay.base.models.room
import eventyay.base.models.world
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("eventyaybase", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ChatEvent",
            fields=[
                ("id", models.BigIntegerField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("edited", models.DateTimeField(null=True)),
                ("event_type", models.CharField(max_length=200)),
                ("content", models.JSONField()),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_events",
                        to="eventyaybase.channel",
                    ),
                ),
                (
                    "replaces",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replaced_by",
                        to="eventyaybase.chatevent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exhibitor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=80, null=True)),
                ("tagline", models.CharField(max_length=250, null=True)),
                ("short_text", models.TextField(max_length=500, null=True)),
                ("logo", models.URLField(blank=True, null=True)),
                ("banner_list", models.URLField(blank=True, null=True)),
                ("banner_detail", models.URLField(blank=True, null=True)),
                ("contact_enabled", models.BooleanField(default=True)),
                ("text_legacy", models.TextField(null=True)),
                (
                    "text_content",
                    models.JSONField(
                        default=eventyay.base.models.exhibitor.default_text
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        choices=[("1x1", "S"), ("3x1", "M"), ("3x3", "L")],
                        default="1x1",
                        max_length=3,
                    ),
                ),
                ("sorting_priority", models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="Poll",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("open", "Open"),
                            ("closed", "Closed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=8,
                    ),
                ),
                (
                    "poll_type",
                    models.CharField(
                        choices=[("choice", "Choice"), ("multi", "Multi Choice")],
                        default="choice",
                        max_length=6,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_pinned", models.BooleanField(default=False)),
                ("cached_results", models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PollOption",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("order", models.IntegerField(default=1)),
                ("content", models.TextField()),
                (
                    "poll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="eventyaybase.poll",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Poster",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("import_id", models.TextField(blank=True, db_index=True, null=True)),
                ("title", models.TextField(null=True)),
                (
                    "abstract",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                (
                    "authors",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                (
                    "tags",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                ("category", models.TextField(blank=True, null=True)),
                ("poster_url", models.URLField(blank=True, null=True)),
                ("poster_preview", models.URLField(blank=True, null=True)),
                ("schedule_session", models.TextField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posters",
                        to="eventyaybase.channel",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("deleted", models.BooleanField(default=False)),
                (
                    "trait_grants",
                    models.JSONField(
                        blank=True,
                        default=eventyay.base.models.room.default_grants,
                        null=True,
                    ),
                ),
                (
                    "module_config",
                    models.JSONField(
                        default=eventyay.base.models.room.empty_module_config, null=True
                    ),
                ),
                ("name", models.CharField(max_length=300)),
                ("description", models.TextField(blank=True, null=True)),
                ("picture", models.FileField(blank=True, null=True, upload_to="")),
                ("sorting_priority", models.IntegerField(default=0)),
                ("import_id", models.CharField(blank=True, max_length=100, null=True)),
                ("pretalx_id", models.IntegerField(default=0)),
                ("schedule_data", models.JSONField(blank=True, null=True)),
                ("force_join", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("sorting_priority", "name"),
            },
        ),
        migrations.CreateModel(
            name="StreamingServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=300)),
                ("token_secret", models.CharField(max_length=300)),
                (
                    "url_input",
                    models.CharField(
                        default="rtmp://server/app/{name}?token={token}", max_length=300
                    ),
                ),
                (
                    "url_output",
                    models.CharField(
                        default="https://server/hls/{name}.m3u8", max_length=300
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="World",
            fields=[
                ("version", models.PositiveIntegerField(default=1)),
                (
                    "id",
                    models.CharField(
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                        validators=[
                            django.core.validators.RegexValidator(regex="^[a-z0-9]+$")
                        ],
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("config", models.JSONField(blank=True, null=True)),
                (
                    "roles",
                    models.JSONField(
                        blank=True,
                        default=eventyay.base.models.world.default_roles,
                        encoder=eventyay.base.core.utils.json.CustomJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "trait_grants",
                    models.JSONField(
                        blank=True,
                        default=eventyay.base.models.world.default_grants,
                        null=True,
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                regex="^[a-z0-9-.:]+(/[a-zA-Z0-9-_./]*)?$"
                            )
                        ],
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        choices=[("en", "English"), ("de", "German")],
                        default="en",
                        max_length=100,
                    ),
                ),
                ("timezone", models.CharField(default="Europe/Berlin", max_length=120)),
                (
                    "feature_flags",
                    models.JSONField(
                        blank=True,
                        default=eventyay.base.models.world.default_feature_flags,
                    ),
                ),
                ("external_auth_url", models.URLField(blank=True, null=True)),
            ],
            options={
                "ordering": ("id",),
            },
        ),
        migrations.AlterField(
            model_name="user",
            name="locale",
            field=models.CharField(
                choices=[("en", "English"), ("de", "Deutsch")],
                default="en",
                max_length=50,
                verbose_name="Language",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="timezone",
            field=models.CharField(
                default="Europe/Berlin", max_length=100, verbose_name="Timezone"
            ),
        ),
        migrations.CreateModel(
            name="TurnServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("hostname", models.CharField(max_length=300)),
                ("auth_secret", models.CharField(max_length=300)),
                (
                    "world_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoulettePairing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roulette_pairing_left",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roulette_pairing_right",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoomQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("visible", "Visible"),
                            ("mod_queue", "Mod Queue"),
                            ("archived", "Archived"),
                        ],
                        default="mod_queue",
                        max_length=10,
                    ),
                ),
                ("answered", models.BooleanField(default=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_pinned", models.BooleanField(default=False)),
                (
                    "moderator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderated_questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="room",
            name="world",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="rooms",
                to="eventyaybase.world",
            ),
        ),
        migrations.CreateModel(
            name="Reaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("reaction", models.CharField(max_length=100)),
                ("amount", models.IntegerField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="eventyaybase.roomquestion",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PosterLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="eventyaybase.poster",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="poster",
            name="parent_room",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="child_posters",
                to="eventyaybase.room",
            ),
        ),
        migrations.AddField(
            model_name="poster",
            name="presentation_room",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="presentation_posters",
                to="eventyaybase.room",
            ),
        ),
        migrations.AddField(
            model_name="poster",
            name="world",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="posters",
                to="eventyaybase.world",
            ),
        ),
        migrations.AddField(
            model_name="poll",
            name="room",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polls",
                to="eventyaybase.room",
            ),
        ),
        migrations.CreateModel(
            name="PlannedUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField()),
                ("end", models.DateField()),
                ("attendees", models.PositiveIntegerField()),
                ("notes", models.TextField(blank=True)),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="planned_usages",
                        to="eventyaybase.world",
                    ),
                ),
            ],
            options={
                "ordering": ("start",),
            },
        ),
        migrations.CreateModel(
            name="JanusServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("url", models.CharField(max_length=200)),
                ("room_create_key", models.CharField(max_length=300)),
                (
                    "world_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("module", models.CharField(max_length=200)),
                ("message", models.TextField(blank=True, null=True)),
                ("trace", models.TextField(blank=True, null=True)),
                (
                    "world",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feedback",
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="eventyaybase.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitor_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorSocialMediaLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_media_links",
                        to="eventyaybase.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[("profile", "Profile"), ("download", "Download")],
                        default="profile",
                        max_length=32,
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="eventyaybase.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="exhibitor",
            name="highlighted_room",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="highlighted_by_exhibitors",
                to="eventyaybase.room",
            ),
        ),
        migrations.AddField(
            model_name="exhibitor",
            name="room",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exhibitors",
                to="eventyaybase.room",
            ),
        ),
        migrations.AddField(
            model_name="exhibitor",
            name="world",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exhibitors",
                to="eventyaybase.world",
            ),
        ),
        migrations.CreateModel(
            name="ContactRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("missed", "Missed"),
                            ("answered", "Answered"),
                        ],
                        default="open",
                        max_length=8,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "answered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_answered_contact_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_requests",
                        to="eventyaybase.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_contact_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatEventReaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reaction", models.TextField()),
                (
                    "chat_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="eventyaybase.chatevent",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatEventNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chat_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="eventyaybase.chatevent",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Event Notification",
                "verbose_name_plural": "Chat Event Notifications",
            },
        ),
        migrations.AddField(
            model_name="chatevent",
            name="sender",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="chat_events",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="channel",
            name="room",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="channel",
                to="eventyaybase.room",
            ),
        ),
        migrations.AddField(
            model_name="channel",
            name="world",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="channels",
                to="eventyaybase.world",
            ),
        ),
        migrations.CreateModel(
            name="BBBServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("url", models.URLField()),
                ("secret", models.CharField(max_length=300)),
                ("rooms_only", models.BooleanField(default=False)),
                ("cost", models.IntegerField(default=0)),
                (
                    "world_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BBBCall",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "meeting_id",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "attendee_pw",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "moderator_pw",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "guest_policy",
                    models.CharField(default="ALWAYS_ACCEPT", max_length=50),
                ),
                ("voice_bridge", models.CharField(blank=True, max_length=5, null=True)),
                (
                    "invited_members",
                    models.ManyToManyField(
                        related_name="bbb_invites", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "room",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbb_call",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventyaybase.bbbserver",
                    ),
                ),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbb_calls",
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("type", models.CharField(max_length=255)),
                ("data", models.JSONField()),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "world",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnonymousInvite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "short_token",
                    models.CharField(
                        db_index=True,
                        default=eventyay.base.models.room.generate_short_token,
                        max_length=150,
                        unique=True,
                    ),
                ),
                ("expires", models.DateTimeField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anonymous_invites",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anonymous_invites",
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Announcement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("text", models.TextField()),
                ("show_until", models.DateTimeField(null=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=8,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="announcements",
                        to="eventyaybase.world",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WorldView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField(auto_now_add=True)),
                ("end", models.DateTimeField(db_index=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="world_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "world",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="eventyaybase.world",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["start"], name="eventyaybas_start_b34ce0_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="RouletteRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("socket_id", models.UUIDField()),
                ("expiry", models.DateTimeField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("socket_id", "room")},
            },
        ),
        migrations.CreateModel(
            name="RoomView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField(auto_now_add=True)),
                ("end", models.DateTimeField(db_index=True, null=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["start"], name="eventyaybas_start_3cf324_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="PosterVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="eventyaybase.poster",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poster_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "poster")},
            },
        ),
        migrations.CreateModel(
            name="PosterPresenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="presenters",
                        to="eventyaybase.poster",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="poster_presenter",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "poster")},
            },
        ),
        migrations.CreateModel(
            name="PollVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="eventyaybase.polloption",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("option", "sender")},
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("volatile", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(default=False)),
                (
                    "channel",
                    models.ForeignKey(
                        max_length=300,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="eventyaybase.channel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_channels",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "channel")},
            },
        ),
        migrations.CreateModel(
            name="ExhibitorStaff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff",
                        to="eventyaybase.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_staff",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "exhibitor")},
            },
        ),
    ]
