"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import sys
import configparser
import os

from django.utils.translation import gettext_lazy as _
from pathlib import Path
from kombu import Queue

from eventyay.helpers.config import EnvOrParserConfig
from .settings_helpers import build_db_tls_config, build_redis_tls_config
from pycountry import currencies

_config = configparser.RawConfigParser()
if 'EVENTYAY_CONFIG_FILE' in os.environ:
    _config.read_file(open(os.environ.get('EVENTYAY_CONFIG_FILE'), encoding='utf-8'))
else:
    _config.read(
        ['/etc/eventyay/eventyay.cfg', os.path.expanduser('~/.eventyay.cfg'), 'eventyay.cfg'],
        encoding='utf-8',
    )
config = EnvOrParserConfig(_config)

def instance_name(request):
    from django.conf import settings
    return {
        'INSTANCE_NAME': getattr(settings, 'INSTANCE_NAME', 'eventyay')
    }

debug_fallback = 'runserver' in sys.argv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_sesosamnd81fm%go!+5inrmln^p1c%b&$abp6j(lw8$xx(ria'
SITE_URL = config.get('eventyay', 'url', fallback='http://localhost')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Security settings
X_FRAME_OPTIONS = 'DENY'

# URL settings
# ROOT_URLCONF = 'eventyay.multidomain.maindomain_urlconf'

HAS_CELERY = config.has_option('celery', 'broker')
if HAS_CELERY:
    CELERY_BROKER_URL = config.get('celery', 'broker')
    CELERY_RESULT_BACKEND = config.get('celery', 'backend')
else:
    CELERY_TASK_ALWAYS_EAGER = True

# Application definition

AUTH_USER_MODEL = 'eventyaybase.User'
STATIC_ROOT = os.path.join(os.path.dirname(__file__), 'static.dist')
INSTALLED_APPS = [
    'bootstrap3',
    'compressor',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'djangoformsetjs',
    'oauth2_provider',
    'eventyay.api',
    'eventyay.base',
    'eventyay.common',
    'eventyay.control',
    'eventyay.eventyay_common',
    'eventyay.helpers',
    'eventyay.multidomain',
    'eventyay.presale',
    'statici18n',
]


STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'eventyay.base.middleware.CustomCommonMiddleware',
    'eventyay.base.middleware.LocaleMiddleware',
    'eventyay.base.middleware.SecurityMiddleware',
    'eventyay.multidomain.middlewares.MultiDomainMiddleware',
    'eventyay.multidomain.middlewares.SessionMiddleware',
    'eventyay.multidomain.middlewares.CsrfViewMiddleware',
    'eventyay.control.middleware.PermissionMiddleware',
    'eventyay.control.middleware.AuditLogMiddleware',
]

ROOT_URLCONF = 'config.urls'
# ROOT_URLCONF = 'eventyay.multidomain.maindomain_urlconf'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'config.settings.instance_name',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

STATICFILES_DIRS = (
    [os.path.join(BASE_DIR, 'eventyay/static/')] if os.path.exists(os.path.join(BASE_DIR, 'eventyay/static')) else []
)

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
    ('text/vue', 'pretix.helpers.compressor.VueCompiler'),
)

COMPRESS_ROOT = os.path.join(BASE_DIR, 'static/')

COMPRESS_ENABLED = COMPRESS_OFFLINE = not debug_fallback

COMPRESS_CSS_FILTERS = (
    # CssAbsoluteFilter is incredibly slow, especially when dealing with our _flags.scss
    # However, we don't need it if we consequently use the static() function in Sass
    # 'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSCompressorFilter',
)
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'HOST': config.get('database', 'host', fallback=''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


ENTROPY = {
    'order_code': config.getint('entropy', 'order_code', fallback=5),
    'ticket_secret': config.getint('entropy', 'ticket_secret', fallback=32),
    'voucher_code': config.getint('entropy', 'voucher_code', fallback=16),
    'giftcard_secret': config.getint('entropy', 'giftcard_secret', fallback=12),
}
EVENTYAY_PRIMARY_COLOR = '#2185d0'


DEFAULT_CURRENCY = config.get('eventyay', 'currency', fallback='EUR')
CURRENCY_PLACES = {
    # default is 2
    'BIF': 0,
    'CLP': 0,
    'DJF': 0,
    'GNF': 0,
    'JPY': 0,
    'KMF': 0,
    'KRW': 0,
    'MGA': 0,
    'PYG': 0,
    'RWF': 0,
    'VND': 0,
    'VUV': 0,
    'XAF': 0,
    'XOF': 0,
    'XPF': 0,
}

CURRENCIES = list(currencies)

EVENTYAY_EMAIL_NONE_VALUE = 'info@eventyay.com'
MAIL_FROM = SERVER_EMAIL = DEFAULT_FROM_EMAIL = config.get('mail', 'from', fallback='eventyay@localhost')

# Internal settings
SESSION_COOKIE_NAME = 'eventyay_session'
LANGUAGE_COOKIE_NAME = 'eventyay_language'
CSRF_COOKIE_NAME = 'eventyay_csrftoken'
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_DOMAIN = config.get('eventyay', 'cookie_domain', fallback=None)


TALK_HOSTNAME = config.get('eventyay', 'talk_hostname', fallback='https://wikimania-dev.eventyay.com/')
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


METRICS_ENABLED = config.getboolean('metrics', 'enabled', fallback=False)
METRICS_USER = config.get('metrics', 'user', fallback='metrics')
METRICS_PASSPHRASE = config.get('metrics', 'passphrase', fallback='')

CACHES = {
    'default': {
        'BACKEND': 'eventyay.helpers.cache.CustomDummyCache',
    }
}
REAL_CACHE_USED = False
SESSION_ENGINE = None

HAS_MEMCACHED = config.has_option('memcached', 'location')
if HAS_MEMCACHED:
    REAL_CACHE_USED = True
    CACHES['default'] = {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': config.get('memcached', 'location'),
    }

HAS_REDIS = config.has_option('redis', 'location')
if HAS_REDIS:
    redis_options = {
        'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        'REDIS_CLIENT_KWARGS': {'health_check_interval': 30},
    }
    redis_tls_config = build_redis_tls_config(config)
    if redis_tls_config is not None:
        redis_options['CONNECTION_POOL_KWARGS'] = redis_tls_config
        redis_options['REDIS_CLIENT_KWARGS'].update(redis_tls_config)

    if config.has_option('redis', 'password'):
        redis_options['PASSWORD'] = config.get('redis', 'password')

    CACHES['redis'] = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('redis', 'location'),
        'OPTIONS': redis_options,
    }
    CACHES['redis_sessions'] = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('redis', 'location'),
        'TIMEOUT': 3600 * 24 * 30,
        'OPTIONS': redis_options,
    }
    if not HAS_MEMCACHED:
        CACHES['default'] = CACHES['redis']
        REAL_CACHE_USED = True
    if config.getboolean('redis', 'sessions', fallback=False):
        SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
        SESSION_CACHE_ALIAS = 'redis_sessions'

if not SESSION_ENGINE:
    if REAL_CACHE_USED:
        SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
    else:
        SESSION_ENGINE = 'django.contrib.sessions.backends.db'

CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TASK_QUEUES = (
    Queue('default', routing_key='default.#'),
    Queue('background', routing_key='background.#'),
    Queue('notifications', routing_key='notifications.#'),
)
CELERY_TASK_ROUTES = (
    [
        ('eventyay.base.services.notifications.*', {'queue': 'notifications'}),
        ('eventyay.api.webhooks.*', {'queue': 'notifications'}),
    ],
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

BASE_PATH = config.get('eventyay', 'base_path', fallback='/tickets')
TALK_BASE_PATH = config.get('eventyay', 'talk_base_path', fallback='/talks')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Adjustable settings
INSTANCE_NAME = config.get('eventyay', 'instance_name', fallback='eventyay')
EVENTYAY_REGISTRATION = config.getboolean('eventyay', 'registration', fallback=True)
EVENTYAY_PASSWORD_RESET = config.getboolean('eventyay', 'password_reset', fallback=True)
EVENTYAY_LONG_SESSIONS = config.getboolean('eventyay', 'long_sessions', fallback=True)
EVENTYAY_AUTH_BACKENDS = config.get('eventyay', 'auth_backends', fallback='eventyay.base.auth.NativeAuthBackend').split(',')
EVENTYAY_ADMIN_AUDIT_COMMENTS = config.getboolean('eventyay', 'audit_comments', fallback=False)
EVENTYAY_OBLIGATORY_2FA = config.getboolean('eventyay', 'obligatory_2fa', fallback=False)
EVENTYAY_SESSION_TIMEOUT_RELATIVE = 3600 * 3
EVENTYAY_SESSION_TIMEOUT_ABSOLUTE = 3600 * 12

LOG_CSP = config.getboolean('eventyay', 'csp_log', fallback=True)
CSP_ADDITIONAL_HEADER = config.get('eventyay', 'csp_additional_header', fallback='')

# Django allauth settings for social login
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True

SOCIALACCOUNT_ADAPTER = 'eventyay.plugins.socialauth.adapter.CustomSocialAccountAdapter'
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_LOGIN_ON_GET = True

OAUTH2_PROVIDER_APPLICATION_MODEL = 'eventyayapi.OAuthApplication'
OAUTH2_PROVIDER_GRANT_MODEL = 'eventyayapi.OAuthGrant'
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = 'eventyayapi.OAuthAccessToken'
OAUTH2_PROVIDER_ID_TOKEN_MODEL = 'eventyayapi.OAuthIDToken'
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = 'eventyayapi.OAuthRefreshToken'
OAUTH2_PROVIDER = {
    'SCOPES': {
        'profile': _('User profile only'),
        'read': _('Read access'),
        'write': _('Write access'),
    },
    'OAUTH2_VALIDATOR_CLASS': 'eventyay.api.oauth.Validator',
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'] if not DEBUG else ['http', 'https'],
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600 * 24,
    'ROTATE_REFRESH_TOKEN': False,
    'PKCE_REQUIRED': False,
    'OIDC_RESPONSE_TYPES_SUPPORTED': ['code'],  # We don't support proper OIDC for now
}

AUTH_USER_MODEL = 'eventyaybase.User'
LOGIN_URL = 'eventyay_common:auth.login'
LOGIN_URL_CONTROL = 'eventyay_common:auth.login'
# CSRF_FAILURE_VIEW = 'eventyay.base.views.errors.csrf_failure'


STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# django-compressor SCSS support
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = not DEBUG

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)

COMPRESS_CSS_FILTERS = (
    'compressor.filters.cssmin.CSSCompressorFilter',
)
