# Generated by Django 5.1.9 on 2025-08-20 22:14

import django.core.validators
import django.db.models.deletion
import eventyay.exhibitors.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('eventyaybase', '0002_alter_event_currency'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExhibitorInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190, verbose_name='Exhibitor Name')),
                ('tagline', models.CharField(blank=True, max_length=255, verbose_name='Tagline')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('url', models.URLField(blank=True, verbose_name='Website URL')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email')),
                ('logo', models.ImageField(blank=True, upload_to=eventyay.exhibitors.models.exhibitor_logo_path, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])], verbose_name='Logo')),
                ('banner', models.ImageField(blank=True, upload_to=eventyay.exhibitors.models.exhibitor_banner_path, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp', 'mp4', 'webm'])], verbose_name='Banner/Video')),
                ('booth_id', models.CharField(default=eventyay.exhibitors.models.generate_booth_id, max_length=100, unique=True, verbose_name='Booth ID')),
                ('booth_name', models.CharField(max_length=100, verbose_name='Booth Name')),
                ('highlighted_room_id', models.CharField(blank=True, help_text='Video room ID for virtual booth', max_length=100)),
                ('api_key', models.CharField(default=eventyay.exhibitors.models.generate_api_key, max_length=16, unique=True, verbose_name='API Key')),
                ('contact_enabled', models.BooleanField(default=True, verbose_name='Enable Contact Form')),
                ('lead_scanning_enabled', models.BooleanField(default=False, verbose_name='Enable Lead Scanning')),
                ('allow_voucher_access', models.BooleanField(default=False, verbose_name='Allow Voucher Access')),
                ('allow_lead_access', models.BooleanField(default=False, verbose_name='Allow Lead Access')),
                ('lead_scanning_scope_by_device', models.BooleanField(default=False, verbose_name='Scope Lead Scanning by Device')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('sort_order', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exhibitors', to='eventyaybase.event')),
            ],
            options={
                'verbose_name': 'Exhibitor',
                'verbose_name_plural': 'Exhibitors',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContactRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendee_name', models.CharField(max_length=100, verbose_name='Attendee Name')),
                ('attendee_email', models.EmailField(max_length=254, verbose_name='Attendee Email')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('message', models.TextField(verbose_name='Message')),
                ('additional_data', models.JSONField(blank=True, default=dict, verbose_name='Additional Data')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('responded', 'Responded'), ('closed', 'Closed')], default='pending', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_requests', to='exhibitors.exhibitorinfo')),
            ],
            options={
                'verbose_name': 'Contact Request',
                'verbose_name_plural': 'Contact Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExhibitorLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name='URL')),
                ('display_text', models.CharField(max_length=100, verbose_name='Display Text')),
                ('category', models.CharField(choices=[('profile', 'Profile'), ('download', 'Download'), ('social', 'Social Media'), ('video', 'Video'), ('external', 'External Link')], max_length=20, verbose_name='Category')),
                ('sorting_priority', models.IntegerField(default=0, verbose_name='Sort Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='exhibitors.exhibitorinfo')),
            ],
            options={
                'verbose_name': 'Exhibitor Link',
                'verbose_name_plural': 'Exhibitor Links',
                'ordering': ['sorting_priority', 'display_text'],
            },
        ),
        migrations.CreateModel(
            name='ExhibitorSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directory_enabled', models.BooleanField(default=True, verbose_name='Enable Exhibitor Directory')),
                ('contact_form_enabled', models.BooleanField(default=True, verbose_name='Enable Contact Forms')),
                ('lead_scanning_enabled', models.BooleanField(default=False, verbose_name='Enable Lead Scanning')),
                ('allowed_contact_fields', models.JSONField(default=list, help_text='Additional fields allowed in contact forms')),
                ('exhibitors_access_mail_subject', models.CharField(blank=True, max_length=255, verbose_name='Access Email Subject')),
                ('exhibitors_access_mail_body', models.TextField(blank=True, verbose_name='Access Email Body')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='exhibitor_settings', to='eventyaybase.event')),
            ],
            options={
                'verbose_name': 'Exhibitor Settings',
                'verbose_name_plural': 'Exhibitor Settings',
            },
        ),
        migrations.CreateModel(
            name='ExhibitorStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('staff', 'Staff Member'), ('representative', 'Representative')], default='staff', max_length=50, verbose_name='Role')),
                ('can_manage_leads', models.BooleanField(default=True, verbose_name='Can Manage Leads')),
                ('can_edit_info', models.BooleanField(default=False, verbose_name='Can Edit Exhibitor Info')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='exhibitors.exhibitorinfo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Exhibitor Staff',
                'verbose_name_plural': 'Exhibitor Staff',
            },
        ),
        migrations.CreateModel(
            name='ExhibitorTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Tag Name')),
                ('use_count', models.IntegerField(default=0, verbose_name='Use Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='exhibitors.exhibitorinfo')),
            ],
            options={
                'verbose_name': 'Exhibitor Tag',
                'verbose_name_plural': 'Exhibitor Tags',
                'ordering': ['-use_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exhibitor_name', models.CharField(max_length=190, verbose_name='Exhibitor Name')),
                ('pseudonymization_id', models.CharField(max_length=190, verbose_name='Attendee ID')),
                ('scanned', models.DateTimeField(verbose_name='Scan Time')),
                ('scan_type', models.CharField(choices=[('qr_code', 'QR Code'), ('manual', 'Manual Entry'), ('contact_form', 'Contact Form'), ('booth_visit', 'Booth Visit')], max_length=50, verbose_name='Scan Type')),
                ('device_name', models.CharField(max_length=50, verbose_name='Device Name')),
                ('attendee', models.JSONField(blank=True, null=True, verbose_name='Attendee Data')),
                ('booth_id', models.CharField(max_length=100, verbose_name='Booth ID')),
                ('booth_name', models.CharField(max_length=100, verbose_name='Booth Name')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('follow_up_required', models.BooleanField(default=False, verbose_name='Follow-up Required')),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leads', to='exhibitors.exhibitorinfo')),
            ],
            options={
                'verbose_name': 'Lead',
                'verbose_name_plural': 'Leads',
                'ordering': ['-scanned'],
            },
        ),
        migrations.AddIndex(
            model_name='exhibitorinfo',
            index=models.Index(fields=['event', 'is_active'], name='exhibitors__event_i_5da9b4_idx'),
        ),
        migrations.AddIndex(
            model_name='exhibitorinfo',
            index=models.Index(fields=['booth_id'], name='exhibitors__booth_i_47a0ac_idx'),
        ),
        migrations.AddIndex(
            model_name='exhibitorinfo',
            index=models.Index(fields=['featured'], name='exhibitors__feature_ead3bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='exhibitorstaff',
            unique_together={('exhibitor', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='exhibitortag',
            unique_together={('exhibitor', 'name')},
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['exhibitor', 'scanned'], name='exhibitors__exhibit_cb80f4_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['pseudonymization_id'], name='exhibitors__pseudon_53f39c_idx'),
        ),
    ]
