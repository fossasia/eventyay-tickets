# Generated by Django 5.1.9 on 2025-09-10 12:36

import datetime
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import eventyay.base.models.auth
import eventyay.base.models.base
import eventyay.base.models.cfp
import eventyay.base.models.devices
import eventyay.base.models.event
import eventyay.base.models.fields
import eventyay.base.models.invoices
import eventyay.base.models.mixins
import eventyay.base.models.orders
import eventyay.base.models.organizer
import eventyay.base.models.product
import eventyay.base.models.question
import eventyay.base.models.resource
import eventyay.base.models.seating
import eventyay.base.models.submission
import eventyay.base.models.vouchers
import eventyay.base.validators
import eventyay.helpers.countries
import i18nfield.fields
import phonenumber_field.modelfields
import rules.contrib.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.OAUTH2_PROVIDER_APPLICATION_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CachedFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('filename', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('file', models.FileField(blank=True, max_length=255, null=True, upload_to=eventyay.base.models.base.cachedfile_name)),
                ('web_download', models.BooleanField(default=True)),
                ('session_key', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testmode', models.BooleanField(default=False)),
                ('name', i18nfield.fields.I18nCharField(max_length=200, verbose_name='Event name')),
                ('slug', models.CharField(db_index=True, help_text='Should be short, only contain lowercase letters, numbers, dots, and dashes, and must be unique among your events. We recommend some kind of abbreviation or a date with less than 10 characters that can be easily remembered, but you can also choose to use a random value. This will be used in URLs, order codes, invoice numbers, and bank transfer references.', max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=2), django.core.validators.RegexValidator(message='The slug may only contain letters, numbers, dots and dashes.', regex='^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$'), eventyay.base.validators.EventSlugBanlistValidator()], verbose_name='Short form')),
                ('live', models.BooleanField(default=False, verbose_name='Shop is live')),
                ('currency', models.CharField(choices=[('AED', 'AED - UAE Dirham'), ('AFN', 'AFN - Afghani'), ('ALL', 'ALL - Lek'), ('AMD', 'AMD - Armenian Dram'), ('ANG', 'ANG - Netherlands Antillean Guilder'), ('AOA', 'AOA - Kwanza'), ('ARS', 'ARS - Argentine Peso'), ('AUD', 'AUD - Australian Dollar'), ('AWG', 'AWG - Aruban Florin'), ('AZN', 'AZN - Azerbaijan Manat'), ('BAM', 'BAM - Convertible Mark'), ('BBD', 'BBD - Barbados Dollar'), ('BDT', 'BDT - Taka'), ('BGN', 'BGN - Bulgarian Lev'), ('BHD', 'BHD - Bahraini Dinar'), ('BIF', 'BIF - Burundi Franc'), ('BMD', 'BMD - Bermudian Dollar'), ('BND', 'BND - Brunei Dollar'), ('BOB', 'BOB - Boliviano'), ('BOV', 'BOV - Mvdol'), ('BRL', 'BRL - Brazilian Real'), ('BSD', 'BSD - Bahamian Dollar'), ('BTN', 'BTN - Ngultrum'), ('BWP', 'BWP - Pula'), ('BYN', 'BYN - Belarusian Ruble'), ('BZD', 'BZD - Belize Dollar'), ('CAD', 'CAD - Canadian Dollar'), ('CDF', 'CDF - Congolese Franc'), ('CHE', 'CHE - WIR Euro'), ('CHF', 'CHF - Swiss Franc'), ('CHW', 'CHW - WIR Franc'), ('CLF', 'CLF - Unidad de Fomento'), ('CLP', 'CLP - Chilean Peso'), ('CNY', 'CNY - Yuan Renminbi'), ('COP', 'COP - Colombian Peso'), ('COU', 'COU - Unidad de Valor Real'), ('CRC', 'CRC - Costa Rican Colon'), ('CUC', 'CUC - Peso Convertible'), ('CUP', 'CUP - Cuban Peso'), ('CVE', 'CVE - Cabo Verde Escudo'), ('CZK', 'CZK - Czech Koruna'), ('DJF', 'DJF - Djibouti Franc'), ('DKK', 'DKK - Danish Krone'), ('DOP', 'DOP - Dominican Peso'), ('DZD', 'DZD - Algerian Dinar'), ('EGP', 'EGP - Egyptian Pound'), ('ERN', 'ERN - Nakfa'), ('ETB', 'ETB - Ethiopian Birr'), ('EUR', 'EUR - Euro'), ('FJD', 'FJD - Fiji Dollar'), ('FKP', 'FKP - Falkland Islands Pound'), ('GBP', 'GBP - Pound Sterling'), ('GEL', 'GEL - Lari'), ('GHS', 'GHS - Ghana Cedi'), ('GIP', 'GIP - Gibraltar Pound'), ('GMD', 'GMD - Dalasi'), ('GNF', 'GNF - Guinean Franc'), ('GTQ', 'GTQ - Quetzal'), ('GYD', 'GYD - Guyana Dollar'), ('HKD', 'HKD - Hong Kong Dollar'), ('HNL', 'HNL - Lempira'), ('HRK', 'HRK - Kuna'), ('HTG', 'HTG - Gourde'), ('HUF', 'HUF - Forint'), ('IDR', 'IDR - Rupiah'), ('ILS', 'ILS - New Israeli Sheqel'), ('INR', 'INR - Indian Rupee'), ('IQD', 'IQD - Iraqi Dinar'), ('IRR', 'IRR - Iranian Rial'), ('ISK', 'ISK - Iceland Krona'), ('JMD', 'JMD - Jamaican Dollar'), ('JOD', 'JOD - Jordanian Dinar'), ('JPY', 'JPY - Yen'), ('KES', 'KES - Kenyan Shilling'), ('KGS', 'KGS - Som'), ('KHR', 'KHR - Riel'), ('KMF', 'KMF - Comorian Franc'), ('KPW', 'KPW - North Korean Won'), ('KRW', 'KRW - Won'), ('KWD', 'KWD - Kuwaiti Dinar'), ('KYD', 'KYD - Cayman Islands Dollar'), ('KZT', 'KZT - Tenge'), ('LAK', 'LAK - Lao Kip'), ('LBP', 'LBP - Lebanese Pound'), ('LKR', 'LKR - Sri Lanka Rupee'), ('LRD', 'LRD - Liberian Dollar'), ('LSL', 'LSL - Loti'), ('LYD', 'LYD - Libyan Dinar'), ('MAD', 'MAD - Moroccan Dirham'), ('MDL', 'MDL - Moldovan Leu'), ('MGA', 'MGA - Malagasy Ariary'), ('MKD', 'MKD - Denar'), ('MMK', 'MMK - Kyat'), ('MNT', 'MNT - Tugrik'), ('MOP', 'MOP - Pataca'), ('MRU', 'MRU - Ouguiya'), ('MUR', 'MUR - Mauritius Rupee'), ('MVR', 'MVR - Rufiyaa'), ('MWK', 'MWK - Malawi Kwacha'), ('MXN', 'MXN - Mexican Peso'), ('MXV', 'MXV - Mexican Unidad de Inversion (UDI)'), ('MYR', 'MYR - Malaysian Ringgit'), ('MZN', 'MZN - Mozambique Metical'), ('NAD', 'NAD - Namibia Dollar'), ('NGN', 'NGN - Naira'), ('NIO', 'NIO - Cordoba Oro'), ('NOK', 'NOK - Norwegian Krone'), ('NPR', 'NPR - Nepalese Rupee'), ('NZD', 'NZD - New Zealand Dollar'), ('OMR', 'OMR - Rial Omani'), ('PAB', 'PAB - Balboa'), ('PEN', 'PEN - Sol'), ('PGK', 'PGK - Kina'), ('PHP', 'PHP - Philippine Peso'), ('PKR', 'PKR - Pakistan Rupee'), ('PLN', 'PLN - Zloty'), ('PYG', 'PYG - Guarani'), ('QAR', 'QAR - Qatari Rial'), ('RON', 'RON - Romanian Leu'), ('RSD', 'RSD - Serbian Dinar'), ('RUB', 'RUB - Russian Ruble'), ('RWF', 'RWF - Rwanda Franc'), ('SAR', 'SAR - Saudi Riyal'), ('SBD', 'SBD - Solomon Islands Dollar'), ('SCR', 'SCR - Seychelles Rupee'), ('SDG', 'SDG - Sudanese Pound'), ('SEK', 'SEK - Swedish Krona'), ('SGD', 'SGD - Singapore Dollar'), ('SHP', 'SHP - Saint Helena Pound'), ('SLE', 'SLE - Leone'), ('SLL', 'SLL - Leone'), ('SOS', 'SOS - Somali Shilling'), ('SRD', 'SRD - Surinam Dollar'), ('SSP', 'SSP - South Sudanese Pound'), ('STN', 'STN - Dobra'), ('SVC', 'SVC - El Salvador Colon'), ('SYP', 'SYP - Syrian Pound'), ('SZL', 'SZL - Lilangeni'), ('THB', 'THB - Baht'), ('TJS', 'TJS - Somoni'), ('TMT', 'TMT - Turkmenistan New Manat'), ('TND', 'TND - Tunisian Dinar'), ('TOP', 'TOP - Pa’anga'), ('TRY', 'TRY - Turkish Lira'), ('TTD', 'TTD - Trinidad and Tobago Dollar'), ('TWD', 'TWD - New Taiwan Dollar'), ('TZS', 'TZS - Tanzanian Shilling'), ('UAH', 'UAH - Hryvnia'), ('UGX', 'UGX - Uganda Shilling'), ('USD', 'USD - US Dollar'), ('USN', 'USN - US Dollar (Next day)'), ('UYI', 'UYI - Uruguay Peso en Unidades Indexadas (UI)'), ('UYU', 'UYU - Peso Uruguayo'), ('UYW', 'UYW - Unidad Previsional'), ('UZS', 'UZS - Uzbekistan Sum'), ('VED', 'VED - Bolívar Soberano'), ('VES', 'VES - Bolívar Soberano'), ('VND', 'VND - Dong'), ('VUV', 'VUV - Vatu'), ('WST', 'WST - Tala'), ('XAF', 'XAF - CFA Franc BEAC'), ('XAG', 'XAG - Silver'), ('XAU', 'XAU - Gold'), ('XBA', 'XBA - Bond Markets Unit European Composite Unit (EURCO)'), ('XBB', 'XBB - Bond Markets Unit European Monetary Unit (E.M.U.-6)'), ('XBC', 'XBC - Bond Markets Unit European Unit of Account 9 (E.U.A.-9)'), ('XBD', 'XBD - Bond Markets Unit European Unit of Account 17 (E.U.A.-17)'), ('XCD', 'XCD - East Caribbean Dollar'), ('XDR', 'XDR - SDR (Special Drawing Right)'), ('XOF', 'XOF - CFA Franc BCEAO'), ('XPD', 'XPD - Palladium'), ('XPF', 'XPF - CFP Franc'), ('XPT', 'XPT - Platinum'), ('XSU', 'XSU - Sucre'), ('XTS', 'XTS - Codes specifically reserved for testing purposes'), ('XUA', 'XUA - ADB Unit of Account'), ('XXX', 'XXX - The codes assigned for transactions where no currency is involved'), ('YER', 'YER - Yemeni Rial'), ('ZAR', 'ZAR - Rand'), ('ZMW', 'ZMW - Zambian Kwacha'), ('ZWL', 'ZWL - Zimbabwe Dollar')], default='USD', max_length=10, verbose_name='Event currency')),
                ('date_from', models.DateTimeField(verbose_name='Event start time')),
                ('date_to', models.DateTimeField(blank=True, null=True, verbose_name='Event end time')),
                ('date_admission', models.DateTimeField(blank=True, null=True, verbose_name='Admission time')),
                ('is_public', models.BooleanField(default=True, help_text='If selected, this event will show up publicly on the list of events for your organizer account.', verbose_name='Show in lists')),
                ('presale_end', models.DateTimeField(blank=True, help_text='Optional. No products will be sold after this date. If you do not set this value, the presale will end after the end date of your event.', null=True, verbose_name='End of presale')),
                ('presale_start', models.DateTimeField(blank=True, help_text='Optional. No products will be sold before this date.', null=True, verbose_name='Start of presale')),
                ('location', i18nfield.fields.I18nTextField(blank=True, max_length=200, null=True, verbose_name='Location')),
                ('geo_lat', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Latitude')),
                ('geo_lon', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Longitude')),
                ('plugins', models.TextField(blank=True, verbose_name='Plugins')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Internal comment')),
                ('has_subevents', models.BooleanField(default=False, verbose_name='Event series')),
                ('sales_channels', eventyay.base.models.fields.MultiStringField(default=['web'], help_text='Only sell tickets for this event on the following sales channels.', verbose_name='Restrict to specific sales channels')),
                ('is_video_creation', models.BooleanField(default=False, help_text='Create Video platform for Event.', verbose_name='Add video call')),
                ('timezone', models.CharField(choices=[('Africa/Abidjan', 'Africa/Abidjan'), ('Africa/Accra', 'Africa/Accra'), ('Africa/Addis_Ababa', 'Africa/Addis_Ababa'), ('Africa/Algiers', 'Africa/Algiers'), ('Africa/Asmara', 'Africa/Asmara'), ('Africa/Asmera', 'Africa/Asmera'), ('Africa/Bamako', 'Africa/Bamako'), ('Africa/Bangui', 'Africa/Bangui'), ('Africa/Banjul', 'Africa/Banjul'), ('Africa/Bissau', 'Africa/Bissau'), ('Africa/Blantyre', 'Africa/Blantyre'), ('Africa/Brazzaville', 'Africa/Brazzaville'), ('Africa/Bujumbura', 'Africa/Bujumbura'), ('Africa/Cairo', 'Africa/Cairo'), ('Africa/Casablanca', 'Africa/Casablanca'), ('Africa/Ceuta', 'Africa/Ceuta'), ('Africa/Conakry', 'Africa/Conakry'), ('Africa/Dakar', 'Africa/Dakar'), ('Africa/Dar_es_Salaam', 'Africa/Dar_es_Salaam'), ('Africa/Djibouti', 'Africa/Djibouti'), ('Africa/Douala', 'Africa/Douala'), ('Africa/El_Aaiun', 'Africa/El_Aaiun'), ('Africa/Freetown', 'Africa/Freetown'), ('Africa/Gaborone', 'Africa/Gaborone'), ('Africa/Harare', 'Africa/Harare'), ('Africa/Johannesburg', 'Africa/Johannesburg'), ('Africa/Juba', 'Africa/Juba'), ('Africa/Kampala', 'Africa/Kampala'), ('Africa/Khartoum', 'Africa/Khartoum'), ('Africa/Kigali', 'Africa/Kigali'), ('Africa/Kinshasa', 'Africa/Kinshasa'), ('Africa/Lagos', 'Africa/Lagos'), ('Africa/Libreville', 'Africa/Libreville'), ('Africa/Lome', 'Africa/Lome'), ('Africa/Luanda', 'Africa/Luanda'), ('Africa/Lubumbashi', 'Africa/Lubumbashi'), ('Africa/Lusaka', 'Africa/Lusaka'), ('Africa/Malabo', 'Africa/Malabo'), ('Africa/Maputo', 'Africa/Maputo'), ('Africa/Maseru', 'Africa/Maseru'), ('Africa/Mbabane', 'Africa/Mbabane'), ('Africa/Mogadishu', 'Africa/Mogadishu'), ('Africa/Monrovia', 'Africa/Monrovia'), ('Africa/Nairobi', 'Africa/Nairobi'), ('Africa/Ndjamena', 'Africa/Ndjamena'), ('Africa/Niamey', 'Africa/Niamey'), ('Africa/Nouakchott', 'Africa/Nouakchott'), ('Africa/Ouagadougou', 'Africa/Ouagadougou'), ('Africa/Porto-Novo', 'Africa/Porto-Novo'), ('Africa/Sao_Tome', 'Africa/Sao_Tome'), ('Africa/Timbuktu', 'Africa/Timbuktu'), ('Africa/Tripoli', 'Africa/Tripoli'), ('Africa/Tunis', 'Africa/Tunis'), ('Africa/Windhoek', 'Africa/Windhoek'), ('America/Adak', 'America/Adak'), ('America/Anchorage', 'America/Anchorage'), ('America/Anguilla', 'America/Anguilla'), ('America/Antigua', 'America/Antigua'), ('America/Araguaina', 'America/Araguaina'), ('America/Argentina/Buenos_Aires', 'America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', 'America/Argentina/Catamarca'), ('America/Argentina/ComodRivadavia', 'America/Argentina/ComodRivadavia'), ('America/Argentina/Cordoba', 'America/Argentina/Cordoba'), ('America/Argentina/Jujuy', 'America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', 'America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', 'America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', 'America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', 'America/Argentina/Salta'), ('America/Argentina/San_Juan', 'America/Argentina/San_Juan'), ('America/Argentina/San_Luis', 'America/Argentina/San_Luis'), ('America/Argentina/Tucuman', 'America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', 'America/Argentina/Ushuaia'), ('America/Aruba', 'America/Aruba'), ('America/Asuncion', 'America/Asuncion'), ('America/Atikokan', 'America/Atikokan'), ('America/Atka', 'America/Atka'), ('America/Bahia', 'America/Bahia'), ('America/Bahia_Banderas', 'America/Bahia_Banderas'), ('America/Barbados', 'America/Barbados'), ('America/Belem', 'America/Belem'), ('America/Belize', 'America/Belize'), ('America/Blanc-Sablon', 'America/Blanc-Sablon'), ('America/Boa_Vista', 'America/Boa_Vista'), ('America/Bogota', 'America/Bogota'), ('America/Boise', 'America/Boise'), ('America/Buenos_Aires', 'America/Buenos_Aires'), ('America/Cambridge_Bay', 'America/Cambridge_Bay'), ('America/Campo_Grande', 'America/Campo_Grande'), ('America/Cancun', 'America/Cancun'), ('America/Caracas', 'America/Caracas'), ('America/Catamarca', 'America/Catamarca'), ('America/Cayenne', 'America/Cayenne'), ('America/Cayman', 'America/Cayman'), ('America/Chicago', 'America/Chicago'), ('America/Chihuahua', 'America/Chihuahua'), ('America/Ciudad_Juarez', 'America/Ciudad_Juarez'), ('America/Coral_Harbour', 'America/Coral_Harbour'), ('America/Cordoba', 'America/Cordoba'), ('America/Costa_Rica', 'America/Costa_Rica'), ('America/Coyhaique', 'America/Coyhaique'), ('America/Creston', 'America/Creston'), ('America/Cuiaba', 'America/Cuiaba'), ('America/Curacao', 'America/Curacao'), ('America/Danmarkshavn', 'America/Danmarkshavn'), ('America/Dawson', 'America/Dawson'), ('America/Dawson_Creek', 'America/Dawson_Creek'), ('America/Denver', 'America/Denver'), ('America/Detroit', 'America/Detroit'), ('America/Dominica', 'America/Dominica'), ('America/Edmonton', 'America/Edmonton'), ('America/Eirunepe', 'America/Eirunepe'), ('America/El_Salvador', 'America/El_Salvador'), ('America/Ensenada', 'America/Ensenada'), ('America/Fort_Nelson', 'America/Fort_Nelson'), ('America/Fort_Wayne', 'America/Fort_Wayne'), ('America/Fortaleza', 'America/Fortaleza'), ('America/Glace_Bay', 'America/Glace_Bay'), ('America/Godthab', 'America/Godthab'), ('America/Goose_Bay', 'America/Goose_Bay'), ('America/Grand_Turk', 'America/Grand_Turk'), ('America/Grenada', 'America/Grenada'), ('America/Guadeloupe', 'America/Guadeloupe'), ('America/Guatemala', 'America/Guatemala'), ('America/Guayaquil', 'America/Guayaquil'), ('America/Guyana', 'America/Guyana'), ('America/Halifax', 'America/Halifax'), ('America/Havana', 'America/Havana'), ('America/Hermosillo', 'America/Hermosillo'), ('America/Indiana/Indianapolis', 'America/Indiana/Indianapolis'), ('America/Indiana/Knox', 'America/Indiana/Knox'), ('America/Indiana/Marengo', 'America/Indiana/Marengo'), ('America/Indiana/Petersburg', 'America/Indiana/Petersburg'), ('America/Indiana/Tell_City', 'America/Indiana/Tell_City'), ('America/Indiana/Vevay', 'America/Indiana/Vevay'), ('America/Indiana/Vincennes', 'America/Indiana/Vincennes'), ('America/Indiana/Winamac', 'America/Indiana/Winamac'), ('America/Indianapolis', 'America/Indianapolis'), ('America/Inuvik', 'America/Inuvik'), ('America/Iqaluit', 'America/Iqaluit'), ('America/Jamaica', 'America/Jamaica'), ('America/Jujuy', 'America/Jujuy'), ('America/Juneau', 'America/Juneau'), ('America/Kentucky/Louisville', 'America/Kentucky/Louisville'), ('America/Kentucky/Monticello', 'America/Kentucky/Monticello'), ('America/Knox_IN', 'America/Knox_IN'), ('America/Kralendijk', 'America/Kralendijk'), ('America/La_Paz', 'America/La_Paz'), ('America/Lima', 'America/Lima'), ('America/Los_Angeles', 'America/Los_Angeles'), ('America/Louisville', 'America/Louisville'), ('America/Lower_Princes', 'America/Lower_Princes'), ('America/Maceio', 'America/Maceio'), ('America/Managua', 'America/Managua'), ('America/Manaus', 'America/Manaus'), ('America/Marigot', 'America/Marigot'), ('America/Martinique', 'America/Martinique'), ('America/Matamoros', 'America/Matamoros'), ('America/Mazatlan', 'America/Mazatlan'), ('America/Mendoza', 'America/Mendoza'), ('America/Menominee', 'America/Menominee'), ('America/Merida', 'America/Merida'), ('America/Metlakatla', 'America/Metlakatla'), ('America/Mexico_City', 'America/Mexico_City'), ('America/Miquelon', 'America/Miquelon'), ('America/Moncton', 'America/Moncton'), ('America/Monterrey', 'America/Monterrey'), ('America/Montevideo', 'America/Montevideo'), ('America/Montreal', 'America/Montreal'), ('America/Montserrat', 'America/Montserrat'), ('America/Nassau', 'America/Nassau'), ('America/New_York', 'America/New_York'), ('America/Nipigon', 'America/Nipigon'), ('America/Nome', 'America/Nome'), ('America/Noronha', 'America/Noronha'), ('America/North_Dakota/Beulah', 'America/North_Dakota/Beulah'), ('America/North_Dakota/Center', 'America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', 'America/North_Dakota/New_Salem'), ('America/Nuuk', 'America/Nuuk'), ('America/Ojinaga', 'America/Ojinaga'), ('America/Panama', 'America/Panama'), ('America/Pangnirtung', 'America/Pangnirtung'), ('America/Paramaribo', 'America/Paramaribo'), ('America/Phoenix', 'America/Phoenix'), ('America/Port-au-Prince', 'America/Port-au-Prince'), ('America/Port_of_Spain', 'America/Port_of_Spain'), ('America/Porto_Acre', 'America/Porto_Acre'), ('America/Porto_Velho', 'America/Porto_Velho'), ('America/Puerto_Rico', 'America/Puerto_Rico'), ('America/Punta_Arenas', 'America/Punta_Arenas'), ('America/Rainy_River', 'America/Rainy_River'), ('America/Rankin_Inlet', 'America/Rankin_Inlet'), ('America/Recife', 'America/Recife'), ('America/Regina', 'America/Regina'), ('America/Resolute', 'America/Resolute'), ('America/Rio_Branco', 'America/Rio_Branco'), ('America/Rosario', 'America/Rosario'), ('America/Santa_Isabel', 'America/Santa_Isabel'), ('America/Santarem', 'America/Santarem'), ('America/Santiago', 'America/Santiago'), ('America/Santo_Domingo', 'America/Santo_Domingo'), ('America/Sao_Paulo', 'America/Sao_Paulo'), ('America/Scoresbysund', 'America/Scoresbysund'), ('America/Shiprock', 'America/Shiprock'), ('America/Sitka', 'America/Sitka'), ('America/St_Barthelemy', 'America/St_Barthelemy'), ('America/St_Johns', 'America/St_Johns'), ('America/St_Kitts', 'America/St_Kitts'), ('America/St_Lucia', 'America/St_Lucia'), ('America/St_Thomas', 'America/St_Thomas'), ('America/St_Vincent', 'America/St_Vincent'), ('America/Swift_Current', 'America/Swift_Current'), ('America/Tegucigalpa', 'America/Tegucigalpa'), ('America/Thule', 'America/Thule'), ('America/Thunder_Bay', 'America/Thunder_Bay'), ('America/Tijuana', 'America/Tijuana'), ('America/Toronto', 'America/Toronto'), ('America/Tortola', 'America/Tortola'), ('America/Vancouver', 'America/Vancouver'), ('America/Virgin', 'America/Virgin'), ('America/Whitehorse', 'America/Whitehorse'), ('America/Winnipeg', 'America/Winnipeg'), ('America/Yakutat', 'America/Yakutat'), ('America/Yellowknife', 'America/Yellowknife'), ('Antarctica/Casey', 'Antarctica/Casey'), ('Antarctica/Davis', 'Antarctica/Davis'), ('Antarctica/DumontDUrville', 'Antarctica/DumontDUrville'), ('Antarctica/Macquarie', 'Antarctica/Macquarie'), ('Antarctica/Mawson', 'Antarctica/Mawson'), ('Antarctica/McMurdo', 'Antarctica/McMurdo'), ('Antarctica/Palmer', 'Antarctica/Palmer'), ('Antarctica/Rothera', 'Antarctica/Rothera'), ('Antarctica/South_Pole', 'Antarctica/South_Pole'), ('Antarctica/Syowa', 'Antarctica/Syowa'), ('Antarctica/Troll', 'Antarctica/Troll'), ('Antarctica/Vostok', 'Antarctica/Vostok'), ('Arctic/Longyearbyen', 'Arctic/Longyearbyen'), ('Asia/Aden', 'Asia/Aden'), ('Asia/Almaty', 'Asia/Almaty'), ('Asia/Amman', 'Asia/Amman'), ('Asia/Anadyr', 'Asia/Anadyr'), ('Asia/Aqtau', 'Asia/Aqtau'), ('Asia/Aqtobe', 'Asia/Aqtobe'), ('Asia/Ashgabat', 'Asia/Ashgabat'), ('Asia/Ashkhabad', 'Asia/Ashkhabad'), ('Asia/Atyrau', 'Asia/Atyrau'), ('Asia/Baghdad', 'Asia/Baghdad'), ('Asia/Bahrain', 'Asia/Bahrain'), ('Asia/Baku', 'Asia/Baku'), ('Asia/Bangkok', 'Asia/Bangkok'), ('Asia/Barnaul', 'Asia/Barnaul'), ('Asia/Beirut', 'Asia/Beirut'), ('Asia/Bishkek', 'Asia/Bishkek'), ('Asia/Brunei', 'Asia/Brunei'), ('Asia/Calcutta', 'Asia/Calcutta'), ('Asia/Chita', 'Asia/Chita'), ('Asia/Choibalsan', 'Asia/Choibalsan'), ('Asia/Chongqing', 'Asia/Chongqing'), ('Asia/Chungking', 'Asia/Chungking'), ('Asia/Colombo', 'Asia/Colombo'), ('Asia/Dacca', 'Asia/Dacca'), ('Asia/Damascus', 'Asia/Damascus'), ('Asia/Dhaka', 'Asia/Dhaka'), ('Asia/Dili', 'Asia/Dili'), ('Asia/Dubai', 'Asia/Dubai'), ('Asia/Dushanbe', 'Asia/Dushanbe'), ('Asia/Famagusta', 'Asia/Famagusta'), ('Asia/Gaza', 'Asia/Gaza'), ('Asia/Harbin', 'Asia/Harbin'), ('Asia/Hebron', 'Asia/Hebron'), ('Asia/Ho_Chi_Minh', 'Asia/Ho_Chi_Minh'), ('Asia/Hong_Kong', 'Asia/Hong_Kong'), ('Asia/Hovd', 'Asia/Hovd'), ('Asia/Irkutsk', 'Asia/Irkutsk'), ('Asia/Istanbul', 'Asia/Istanbul'), ('Asia/Jakarta', 'Asia/Jakarta'), ('Asia/Jayapura', 'Asia/Jayapura'), ('Asia/Jerusalem', 'Asia/Jerusalem'), ('Asia/Kabul', 'Asia/Kabul'), ('Asia/Kamchatka', 'Asia/Kamchatka'), ('Asia/Karachi', 'Asia/Karachi'), ('Asia/Kashgar', 'Asia/Kashgar'), ('Asia/Kathmandu', 'Asia/Kathmandu'), ('Asia/Katmandu', 'Asia/Katmandu'), ('Asia/Khandyga', 'Asia/Khandyga'), ('Asia/Kolkata', 'Asia/Kolkata'), ('Asia/Krasnoyarsk', 'Asia/Krasnoyarsk'), ('Asia/Kuala_Lumpur', 'Asia/Kuala_Lumpur'), ('Asia/Kuching', 'Asia/Kuching'), ('Asia/Kuwait', 'Asia/Kuwait'), ('Asia/Macao', 'Asia/Macao'), ('Asia/Macau', 'Asia/Macau'), ('Asia/Magadan', 'Asia/Magadan'), ('Asia/Makassar', 'Asia/Makassar'), ('Asia/Manila', 'Asia/Manila'), ('Asia/Muscat', 'Asia/Muscat'), ('Asia/Nicosia', 'Asia/Nicosia'), ('Asia/Novokuznetsk', 'Asia/Novokuznetsk'), ('Asia/Novosibirsk', 'Asia/Novosibirsk'), ('Asia/Omsk', 'Asia/Omsk'), ('Asia/Oral', 'Asia/Oral'), ('Asia/Phnom_Penh', 'Asia/Phnom_Penh'), ('Asia/Pontianak', 'Asia/Pontianak'), ('Asia/Pyongyang', 'Asia/Pyongyang'), ('Asia/Qatar', 'Asia/Qatar'), ('Asia/Qostanay', 'Asia/Qostanay'), ('Asia/Qyzylorda', 'Asia/Qyzylorda'), ('Asia/Rangoon', 'Asia/Rangoon'), ('Asia/Riyadh', 'Asia/Riyadh'), ('Asia/Saigon', 'Asia/Saigon'), ('Asia/Sakhalin', 'Asia/Sakhalin'), ('Asia/Samarkand', 'Asia/Samarkand'), ('Asia/Seoul', 'Asia/Seoul'), ('Asia/Shanghai', 'Asia/Shanghai'), ('Asia/Singapore', 'Asia/Singapore'), ('Asia/Srednekolymsk', 'Asia/Srednekolymsk'), ('Asia/Taipei', 'Asia/Taipei'), ('Asia/Tashkent', 'Asia/Tashkent'), ('Asia/Tbilisi', 'Asia/Tbilisi'), ('Asia/Tehran', 'Asia/Tehran'), ('Asia/Tel_Aviv', 'Asia/Tel_Aviv'), ('Asia/Thimbu', 'Asia/Thimbu'), ('Asia/Thimphu', 'Asia/Thimphu'), ('Asia/Tokyo', 'Asia/Tokyo'), ('Asia/Tomsk', 'Asia/Tomsk'), ('Asia/Ujung_Pandang', 'Asia/Ujung_Pandang'), ('Asia/Ulaanbaatar', 'Asia/Ulaanbaatar'), ('Asia/Ulan_Bator', 'Asia/Ulan_Bator'), ('Asia/Urumqi', 'Asia/Urumqi'), ('Asia/Ust-Nera', 'Asia/Ust-Nera'), ('Asia/Vientiane', 'Asia/Vientiane'), ('Asia/Vladivostok', 'Asia/Vladivostok'), ('Asia/Yakutsk', 'Asia/Yakutsk'), ('Asia/Yangon', 'Asia/Yangon'), ('Asia/Yekaterinburg', 'Asia/Yekaterinburg'), ('Asia/Yerevan', 'Asia/Yerevan'), ('Atlantic/Azores', 'Atlantic/Azores'), ('Atlantic/Bermuda', 'Atlantic/Bermuda'), ('Atlantic/Canary', 'Atlantic/Canary'), ('Atlantic/Cape_Verde', 'Atlantic/Cape_Verde'), ('Atlantic/Faeroe', 'Atlantic/Faeroe'), ('Atlantic/Faroe', 'Atlantic/Faroe'), ('Atlantic/Jan_Mayen', 'Atlantic/Jan_Mayen'), ('Atlantic/Madeira', 'Atlantic/Madeira'), ('Atlantic/Reykjavik', 'Atlantic/Reykjavik'), ('Atlantic/South_Georgia', 'Atlantic/South_Georgia'), ('Atlantic/St_Helena', 'Atlantic/St_Helena'), ('Atlantic/Stanley', 'Atlantic/Stanley'), ('Australia/ACT', 'Australia/ACT'), ('Australia/Adelaide', 'Australia/Adelaide'), ('Australia/Brisbane', 'Australia/Brisbane'), ('Australia/Broken_Hill', 'Australia/Broken_Hill'), ('Australia/Canberra', 'Australia/Canberra'), ('Australia/Currie', 'Australia/Currie'), ('Australia/Darwin', 'Australia/Darwin'), ('Australia/Eucla', 'Australia/Eucla'), ('Australia/Hobart', 'Australia/Hobart'), ('Australia/LHI', 'Australia/LHI'), ('Australia/Lindeman', 'Australia/Lindeman'), ('Australia/Lord_Howe', 'Australia/Lord_Howe'), ('Australia/Melbourne', 'Australia/Melbourne'), ('Australia/NSW', 'Australia/NSW'), ('Australia/North', 'Australia/North'), ('Australia/Perth', 'Australia/Perth'), ('Australia/Queensland', 'Australia/Queensland'), ('Australia/South', 'Australia/South'), ('Australia/Sydney', 'Australia/Sydney'), ('Australia/Tasmania', 'Australia/Tasmania'), ('Australia/Victoria', 'Australia/Victoria'), ('Australia/West', 'Australia/West'), ('Australia/Yancowinna', 'Australia/Yancowinna'), ('Brazil/Acre', 'Brazil/Acre'), ('Brazil/DeNoronha', 'Brazil/DeNoronha'), ('Brazil/East', 'Brazil/East'), ('Brazil/West', 'Brazil/West'), ('CET', 'CET'), ('CST6CDT', 'CST6CDT'), ('Canada/Atlantic', 'Canada/Atlantic'), ('Canada/Central', 'Canada/Central'), ('Canada/Eastern', 'Canada/Eastern'), ('Canada/Mountain', 'Canada/Mountain'), ('Canada/Newfoundland', 'Canada/Newfoundland'), ('Canada/Pacific', 'Canada/Pacific'), ('Canada/Saskatchewan', 'Canada/Saskatchewan'), ('Canada/Yukon', 'Canada/Yukon'), ('Chile/Continental', 'Chile/Continental'), ('Chile/EasterIsland', 'Chile/EasterIsland'), ('Cuba', 'Cuba'), ('EET', 'EET'), ('EST', 'EST'), ('EST5EDT', 'EST5EDT'), ('Egypt', 'Egypt'), ('Eire', 'Eire'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Andorra', 'Europe/Andorra'), ('Europe/Astrakhan', 'Europe/Astrakhan'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belfast', 'Europe/Belfast'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Bratislava', 'Europe/Bratislava'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Busingen', 'Europe/Busingen'), ('Europe/Chisinau', 'Europe/Chisinau'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Guernsey', 'Europe/Guernsey'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Isle_of_Man', 'Europe/Isle_of_Man'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Jersey', 'Europe/Jersey'), ('Europe/Kaliningrad', 'Europe/Kaliningrad'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Kirov', 'Europe/Kirov'), ('Europe/Kyiv', 'Europe/Kyiv'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/Ljubljana', 'Europe/Ljubljana'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Mariehamn', 'Europe/Mariehamn'), ('Europe/Minsk', 'Europe/Minsk'), ('Europe/Monaco', 'Europe/Monaco'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Nicosia', 'Europe/Nicosia'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Podgorica', 'Europe/Podgorica'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Riga', 'Europe/Riga'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Samara', 'Europe/Samara'), ('Europe/San_Marino', 'Europe/San_Marino'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Saratov', 'Europe/Saratov'), ('Europe/Simferopol', 'Europe/Simferopol'), ('Europe/Skopje', 'Europe/Skopje'), ('Europe/Sofia', 'Europe/Sofia'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Tallinn', 'Europe/Tallinn'), ('Europe/Tirane', 'Europe/Tirane'), ('Europe/Tiraspol', 'Europe/Tiraspol'), ('Europe/Ulyanovsk', 'Europe/Ulyanovsk'), ('Europe/Uzhgorod', 'Europe/Uzhgorod'), ('Europe/Vaduz', 'Europe/Vaduz'), ('Europe/Vatican', 'Europe/Vatican'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Vilnius', 'Europe/Vilnius'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zagreb', 'Europe/Zagreb'), ('Europe/Zaporozhye', 'Europe/Zaporozhye'), ('Europe/Zurich', 'Europe/Zurich'), ('Factory', 'Factory'), ('GB', 'GB'), ('GB-Eire', 'GB-Eire'), ('GMT', 'GMT'), ('GMT+0', 'GMT+0'), ('GMT-0', 'GMT-0'), ('GMT0', 'GMT0'), ('Greenwich', 'Greenwich'), ('HST', 'HST'), ('Hongkong', 'Hongkong'), ('Iceland', 'Iceland'), ('Indian/Antananarivo', 'Indian/Antananarivo'), ('Indian/Chagos', 'Indian/Chagos'), ('Indian/Christmas', 'Indian/Christmas'), ('Indian/Cocos', 'Indian/Cocos'), ('Indian/Comoro', 'Indian/Comoro'), ('Indian/Kerguelen', 'Indian/Kerguelen'), ('Indian/Mahe', 'Indian/Mahe'), ('Indian/Maldives', 'Indian/Maldives'), ('Indian/Mauritius', 'Indian/Mauritius'), ('Indian/Mayotte', 'Indian/Mayotte'), ('Indian/Reunion', 'Indian/Reunion'), ('Iran', 'Iran'), ('Israel', 'Israel'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Kwajalein', 'Kwajalein'), ('Libya', 'Libya'), ('MET', 'MET'), ('MST', 'MST'), ('MST7MDT', 'MST7MDT'), ('Mexico/BajaNorte', 'Mexico/BajaNorte'), ('Mexico/BajaSur', 'Mexico/BajaSur'), ('Mexico/General', 'Mexico/General'), ('NZ', 'NZ'), ('NZ-CHAT', 'NZ-CHAT'), ('Navajo', 'Navajo'), ('PRC', 'PRC'), ('PST8PDT', 'PST8PDT'), ('Pacific/Apia', 'Pacific/Apia'), ('Pacific/Auckland', 'Pacific/Auckland'), ('Pacific/Bougainville', 'Pacific/Bougainville'), ('Pacific/Chatham', 'Pacific/Chatham'), ('Pacific/Chuuk', 'Pacific/Chuuk'), ('Pacific/Easter', 'Pacific/Easter'), ('Pacific/Efate', 'Pacific/Efate'), ('Pacific/Enderbury', 'Pacific/Enderbury'), ('Pacific/Fakaofo', 'Pacific/Fakaofo'), ('Pacific/Fiji', 'Pacific/Fiji'), ('Pacific/Funafuti', 'Pacific/Funafuti'), ('Pacific/Galapagos', 'Pacific/Galapagos'), ('Pacific/Gambier', 'Pacific/Gambier'), ('Pacific/Guadalcanal', 'Pacific/Guadalcanal'), ('Pacific/Guam', 'Pacific/Guam'), ('Pacific/Honolulu', 'Pacific/Honolulu'), ('Pacific/Johnston', 'Pacific/Johnston'), ('Pacific/Kanton', 'Pacific/Kanton'), ('Pacific/Kiritimati', 'Pacific/Kiritimati'), ('Pacific/Kosrae', 'Pacific/Kosrae'), ('Pacific/Kwajalein', 'Pacific/Kwajalein'), ('Pacific/Majuro', 'Pacific/Majuro'), ('Pacific/Marquesas', 'Pacific/Marquesas'), ('Pacific/Midway', 'Pacific/Midway'), ('Pacific/Nauru', 'Pacific/Nauru'), ('Pacific/Niue', 'Pacific/Niue'), ('Pacific/Norfolk', 'Pacific/Norfolk'), ('Pacific/Noumea', 'Pacific/Noumea'), ('Pacific/Pago_Pago', 'Pacific/Pago_Pago'), ('Pacific/Palau', 'Pacific/Palau'), ('Pacific/Pitcairn', 'Pacific/Pitcairn'), ('Pacific/Pohnpei', 'Pacific/Pohnpei'), ('Pacific/Ponape', 'Pacific/Ponape'), ('Pacific/Port_Moresby', 'Pacific/Port_Moresby'), ('Pacific/Rarotonga', 'Pacific/Rarotonga'), ('Pacific/Saipan', 'Pacific/Saipan'), ('Pacific/Samoa', 'Pacific/Samoa'), ('Pacific/Tahiti', 'Pacific/Tahiti'), ('Pacific/Tarawa', 'Pacific/Tarawa'), ('Pacific/Tongatapu', 'Pacific/Tongatapu'), ('Pacific/Truk', 'Pacific/Truk'), ('Pacific/Wake', 'Pacific/Wake'), ('Pacific/Wallis', 'Pacific/Wallis'), ('Pacific/Yap', 'Pacific/Yap'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('ROC', 'ROC'), ('ROK', 'ROK'), ('Singapore', 'Singapore'), ('Turkey', 'Turkey'), ('UCT', 'UCT'), ('US/Alaska', 'US/Alaska'), ('US/Aleutian', 'US/Aleutian'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/East-Indiana', 'US/East-Indiana'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Indiana-Starke', 'US/Indiana-Starke'), ('US/Michigan', 'US/Michigan'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('US/Samoa', 'US/Samoa'), ('UTC', 'UTC'), ('Universal', 'Universal'), ('W-SU', 'W-SU'), ('WET', 'WET'), ('Zulu', 'Zulu')], default='UTC', help_text='All event dates will be localised and interpreted to be in this timezone.', max_length=32)),
                ('email', models.EmailField(default='org@mail.com', help_text='Will be used as Reply-To in emails.', max_length=254, verbose_name='Organiser email address')),
                ('custom_domain', models.URLField(blank=True, help_text='Enter a custom domain, such as https://my.event.example.org', null=True, verbose_name='Custom domain')),
                ('feature_flags', models.JSONField(default=eventyay.base.models.event.default_feature_flags)),
                ('display_settings', models.JSONField(default=eventyay.base.models.event.default_display_settings)),
                ('review_settings', models.JSONField(default=eventyay.base.models.event.default_review_settings)),
                ('mail_settings', models.JSONField(default=eventyay.base.models.event.default_mail_settings)),
                ('primary_color', models.CharField(blank=True, help_text='Provide a hex value like #00ff00 if you want to style eventyay in your event’s colour scheme.', max_length=7, null=True, validators=[django.core.validators.RegexValidator('#([0-9A-Fa-f]{3}){1,2}')], verbose_name='Main event colour')),
                ('custom_css', models.FileField(blank=True, help_text='Upload a custom CSS file if changing the primary colour is not sufficient for you.', null=True, upload_to=eventyay.base.models.event.event_css_path, verbose_name='Custom Event CSS')),
                ('logo', models.ImageField(blank=True, help_text='If you provide a logo image, your event’s name will not be shown in the event header. The logo will be scaled down to a height of 140px.', null=True, upload_to=eventyay.base.models.event.event_logo_path, verbose_name='Logo')),
                ('header_image', models.ImageField(blank=True, help_text='If you provide a header image, it will be displayed instead of your event’s color and/or header pattern at the top of all event pages. It will be center-aligned, so when the window shrinks, the center parts will continue to be displayed, and not stretched.', null=True, upload_to=eventyay.base.models.event.event_logo_path, verbose_name='Header image')),
                ('locale_array', models.TextField(default='en')),
                ('content_locale_array', models.TextField(default='en')),
                ('locale', models.CharField(choices=[('en', 'English'), ('de', 'German'), ('de-formal', 'German (informal)'), ('ar', 'Arabic'), ('zh-hans', 'Chinese (simplified)'), ('da', 'Danish'), ('nl', 'Dutch'), ('nl-informal', 'Dutch (informal)'), ('fr', 'French'), ('fi', 'Finnish'), ('el', 'Greek'), ('it', 'Italian'), ('lv', 'Latvian'), ('pl', 'Polish'), ('pt-pt', 'Portuguese (Portugal)'), ('pt-br', 'Portuguese (Brazil)'), ('ru', 'Russian'), ('es', 'Spanish'), ('sw', 'Swahili'), ('tr', 'Turkish'), ('uk', 'Ukrainian')], default='en', max_length=32, verbose_name='Default language')),
                ('landing_page_text', i18nfield.fields.I18nTextField(blank=True, help_text='This text will be shown on the landing page, alongside with links to the CfP and schedule, if appropriate. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True, verbose_name='Landing page text')),
                ('featured_sessions_text', i18nfield.fields.I18nTextField(blank=True, help_text='This text will be shown at the top of the featured sessions page instead of the default text. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True, verbose_name='Featured sessions text')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ('date_from', 'name'),
            },
            bases=(eventyay.base.models.event.EventMixin, models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='EventLock',
            fields=[
                ('event', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now=True)),
                ('token', models.UUIDField(default=uuid.uuid4)),
            ],
        ),
        migrations.CreateModel(
            name='Gate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190, verbose_name='Name')),
                ('identifier', models.CharField(blank=True, help_text='You can enter any value here to make it easier to match the data with other sources. If you do not input one, we will generate one automatically.', max_length=190, verbose_name='Internal identifier')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='GlobalSettings_SettingsStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='GlobalSettingsObject_SettingsStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('slug', models.CharField(db_index=True, help_text='Should be short, only contain lowercase letters, numbers, dots, and dashes. Every slug can only be used once. This is being used in URLs to refer to your organizer accounts and your events.', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(limit_value=2), django.core.validators.RegexValidator(message='The slug may only contain letters, numbers, dots and dashes.', regex='^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]$'), eventyay.base.validators.OrganizerSlugBanlistValidator()], verbose_name='Short form')),
            ],
            options={
                'verbose_name': 'Organizer',
                'verbose_name_plural': 'Organizers',
                'ordering': ('name',),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', i18nfield.fields.I18nCharField(verbose_name='Page title')),
                ('slug', models.SlugField(help_text='This will be used to generate the URL of the page. Please only use latin letters, numbers, dots and dashes. You cannot change this afterwards.', max_length=150, verbose_name='URL form')),
                ('link_on_website_start_page', models.BooleanField(default=False, verbose_name='Show link on the website start page')),
                ('link_in_header', models.BooleanField(default=False, verbose_name='Show in header menu on all pages')),
                ('link_in_footer', models.BooleanField(default=False, verbose_name='Show in website footer menu on all pages')),
                ('confirmation_required', models.BooleanField(default=False, verbose_name='Require the user to acknowledge this page before the sign up is created (e.g. for terms of service).')),
                ('text', i18nfield.fields.I18nTextField(verbose_name='Page content')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, db_index=True, max_length=190, null=True, unique=True, verbose_name='E-mail')),
                ('fullname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Full name')),
                ('wikimedia_username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Wikimedia username')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is site admin')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date joined')),
                ('locale', models.CharField(choices=[('en', 'English'), ('de', 'German'), ('de-formal', 'German (informal)'), ('ar', 'Arabic'), ('zh-hans', 'Chinese (simplified)'), ('da', 'Danish'), ('nl', 'Dutch'), ('nl-informal', 'Dutch (informal)'), ('fr', 'French'), ('fi', 'Finnish'), ('el', 'Greek'), ('it', 'Italian'), ('lv', 'Latvian'), ('pl', 'Polish'), ('pt-pt', 'Portuguese (Portugal)'), ('pt-br', 'Portuguese (Brazil)'), ('ru', 'Russian'), ('es', 'Spanish'), ('sw', 'Swahili'), ('tr', 'Turkish'), ('uk', 'Ukrainian')], default='en', max_length=50, verbose_name='Language')),
                ('timezone', models.CharField(default='UTC', max_length=100, verbose_name='Timezone')),
                ('require_2fa', models.BooleanField(default=False, verbose_name='Two-factor authentication is required to log in')),
                ('notifications_send', models.BooleanField(default=True, help_text='If turned off, you will not get any notifications.', verbose_name='Receive notifications according to my settings below')),
                ('notifications_token', models.CharField(default=eventyay.base.models.auth.generate_notifications_token, max_length=255)),
                ('auth_backend', models.CharField(default='native', max_length=255)),
                ('session_token', models.CharField(default=eventyay.base.models.auth.generate_session_token, max_length=32)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('email',),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('action_type', models.CharField(max_length=200)),
                ('data', models.TextField(blank=True, null=True)),
                ('is_orga_action', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='log_entries', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='log_entries', to='base.event')),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='Event_SettingsStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_settings_objects', to='base.event')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.PositiveIntegerField()),
                ('unique_serial', models.CharField(default=eventyay.base.models.devices.generate_serial, max_length=190, unique=True)),
                ('initialization_token', models.CharField(default=eventyay.base.models.devices.generate_initialization_token, max_length=190, unique=True)),
                ('api_token', models.CharField(max_length=190, null=True, unique=True)),
                ('all_events', models.BooleanField(default=False, verbose_name='All events (including newly created ones)')),
                ('revoked', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=190, verbose_name='Name')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Setup date')),
                ('initialized', models.DateTimeField(null=True, verbose_name='Initialization date')),
                ('hardware_brand', models.CharField(blank=True, max_length=190, null=True)),
                ('hardware_model', models.CharField(blank=True, max_length=190, null=True)),
                ('software_brand', models.CharField(blank=True, max_length=190, null=True)),
                ('software_version', models.CharField(blank=True, max_length=190, null=True)),
                ('security_profile', models.CharField(choices=[('full', 'Full device access (reading and changing orders and gift cards, reading of products and settings)'), ('eventyay_checkin', 'eventyay_checkin'), ('eventyay_checkin_online_kiosk', 'eventyay_checkin (kiosk mode, online only)')], default='full', max_length=190, null=True)),
                ('limit_events', models.ManyToManyField(blank=True, to='base.event', verbose_name='Limit to events')),
                ('gate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices', to='base.gate', verbose_name='Gate')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='base.organizer')),
            ],
            options={
                'unique_together': {('organizer', 'device_id')},
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='CheckinList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190)),
                ('all_products', models.BooleanField(default=True, verbose_name='All products (including newly created ones)')),
                ('include_pending', models.BooleanField(default=False, help_text='With this option, people will be able to check in even if the order has not been paid.', verbose_name='Include pending orders')),
                ('allow_entry_after_exit', models.BooleanField(default=True, verbose_name='Allow re-entering after an exit scan')),
                ('allow_multiple_entries', models.BooleanField(default=False, help_text='Use this option to turn off warnings if a ticket is scanned a second time.', verbose_name='Allow multiple entries per ticket')),
                ('exit_all_at', models.DateTimeField(blank=True, null=True, verbose_name='Automatically check out everyone at')),
                ('auto_checkin_sales_channels', eventyay.base.models.fields.MultiStringField(blank=True, default=[], help_text='All products on this check-in list will be automatically marked as checked-in when purchased through any of the selected sales channels. This option can be useful when tickets sold at the box office are not checked again before entry and should be considered validated directly upon purchase.', verbose_name='Sales channels to automatically check in')),
                ('rules', models.JSONField(blank=True, default=dict)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkin_lists', to='base.event')),
                ('gates', models.ManyToManyField(blank=True, help_text='Does not have any effect for the validation of tickets, only for the automatic configuration of check-in devices.', to='base.gate', verbose_name='Gates')),
            ],
            options={
                'ordering': ('subevent__date_from', 'name'),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='MailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('role', models.CharField(choices=[('submission.new', 'Acknowledge proposal submission'), ('submission.new.internal', 'New proposal (organiser notification)'), ('submission.state.accepted', 'Proposal accepted'), ('submission.state.rejected', 'Proposal rejected'), ('speaker.invite', 'Add a speaker to a proposal (new account)'), ('speaker.invite.existing', 'Add a speaker to a proposal (existing account)'), ('question.reminder', 'Custom fields reminder'), ('schedule.new', 'New schedule published')], default=None, editable=False, max_length=30, null=True)),
                ('subject', i18nfield.fields.I18nCharField(max_length=200, verbose_name='Subject')),
                ('text', i18nfield.fields.I18nTextField(verbose_name='Text')),
                ('reply_to', models.CharField(blank=True, help_text='Change the Reply-To address if you do not want to use the default organiser address', max_length=200, null=True, verbose_name='Reply-To')),
                ('bcc', models.CharField(blank=True, help_text='Enter comma separated addresses. Will receive a blind copy of every mail sent from this template. This may be a LOT!', max_length=1000, null=True, verbose_name='BCC')),
                ('is_auto_created', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mail_templates', to='base.event')),
            ],
            options={
                'unique_together': {('event', 'role')},
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=16, verbose_name='Order code')),
                ('status', models.CharField(choices=[('n', 'pending'), ('p', 'paid'), ('e', 'expired'), ('c', 'canceled')], db_index=True, max_length=3, verbose_name='Status')),
                ('testmode', models.BooleanField(default=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone number')),
                ('locale', models.CharField(blank=True, max_length=32, null=True, verbose_name='Locale')),
                ('secret', models.CharField(default=eventyay.base.models.orders.generate_secret, max_length=32)),
                ('datetime', models.DateTimeField(db_index=True, verbose_name='Date')),
                ('cancellation_date', models.DateTimeField(blank=True, null=True)),
                ('expires', models.DateTimeField(verbose_name='Expiration date')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Total amount')),
                ('comment', models.TextField(blank=True, help_text='The text entered in this field will not be visible to the user and is available for your convenience.', verbose_name='Comment')),
                ('checkin_attention', models.BooleanField(default=False, help_text='If you set this, the check-in app will show a visible warning that tickets of this order require special attention. This will not show any details or custom message, so you need to brief your check-in staff how to handle these cases.', verbose_name='Requires special attention')),
                ('expiry_reminder_sent', models.BooleanField(default=False)),
                ('download_reminder_sent', models.BooleanField(default=False)),
                ('meta_info', models.TextField(blank=True, null=True, verbose_name='Meta information')),
                ('last_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('require_approval', models.BooleanField(default=False)),
                ('sales_channel', models.CharField(default='web', max_length=190)),
                ('email_known_to_work', models.BooleanField(default=False, verbose_name='E-mail address verified')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='base.event', verbose_name='Event')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ('-datetime',),
            },
            bases=(eventyay.base.models.base.LockModel, models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='InvoiceAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('is_business', models.BooleanField(default=False, verbose_name='Business customer')),
                ('company', models.CharField(blank=True, max_length=255, verbose_name='Company name')),
                ('name_cached', models.CharField(blank=True, max_length=255, verbose_name='Full name')),
                ('name_parts', models.JSONField(default=dict)),
                ('street', models.TextField(verbose_name='Address')),
                ('zipcode', models.CharField(max_length=30, verbose_name='ZIP code')),
                ('city', models.CharField(max_length=255, verbose_name='City')),
                ('country_old', models.CharField(max_length=255, verbose_name='Country')),
                ('country', eventyay.helpers.countries.FastCountryField(countries=eventyay.helpers.countries.CachedCountries, max_length=2, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=255, verbose_name='State')),
                ('vat_id', models.CharField(blank=True, help_text='Only for business customers within the EU.', max_length=255, verbose_name='VAT ID')),
                ('vat_id_validated', models.BooleanField(default=False)),
                ('custom_field', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_reference', models.TextField(blank=True, help_text='This reference will be printed on your invoice for your convenience.', verbose_name='Internal reference')),
                ('beneficiary', models.TextField(blank=True, verbose_name='Beneficiary')),
                ('order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoice_address', to='base.order')),
            ],
        ),
        migrations.CreateModel(
            name='CancellationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('cancellation_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('refund_as_giftcard', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cancellation_requests', to='base.order')),
            ],
        ),
        migrations.CreateModel(
            name='CachedCombinedTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('extension', models.CharField(max_length=255)),
                ('file', models.FileField(blank=True, max_length=255, null=True, upload_to=eventyay.base.models.orders.cachedcombinedticket_name)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Value')),
                ('fee_type', models.CharField(choices=[('payment', 'Payment fee'), ('shipping', 'Shipping fee'), ('service', 'Service fee'), ('cancellation', 'Cancellation fee'), ('other', 'Other fees'), ('giftcard', 'Gift card')], max_length=100)),
                ('description', models.CharField(blank=True, max_length=190)),
                ('internal_type', models.CharField(blank=True, max_length=255)),
                ('tax_rate', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Tax rate')),
                ('tax_value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Tax value')),
                ('canceled', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='all_fees', to='base.order', verbose_name='Order')),
            ],
            managers=[
                ('all', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='OrderPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_id', models.PositiveIntegerField()),
                ('state', models.CharField(choices=[('created', 'created'), ('pending', 'pending'), ('confirmed', 'confirmed'), ('canceled', 'canceled'), ('failed', 'failed'), ('refunded', 'refunded')], max_length=190)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('provider', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment provider')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Payment information')),
                ('migrated', models.BooleanField(default=False)),
                ('fee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='base.orderfee')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='base.order', verbose_name='Order')),
            ],
            options={
                'ordering': ('local_id',),
            },
        ),
        migrations.CreateModel(
            name='OrderPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_before_voucher', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('attendee_name_cached', models.CharField(blank=True, help_text='Empty, if this product is not an admission ticket', max_length=255, null=True, verbose_name='Attendee name')),
                ('attendee_name_parts', models.JSONField(blank=True, default=dict)),
                ('attendee_email', models.EmailField(blank=True, help_text='Empty, if this product is not an admission ticket', max_length=254, null=True, verbose_name='Attendee email')),
                ('meta_info', models.TextField(blank=True, null=True, verbose_name='Meta information')),
                ('company', models.CharField(blank=True, max_length=255, null=True, verbose_name='Company name')),
                ('job_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Job Title')),
                ('street', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('zipcode', models.CharField(blank=True, max_length=30, null=True, verbose_name='ZIP code')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City')),
                ('country', eventyay.helpers.countries.FastCountryField(blank=True, countries=eventyay.helpers.countries.CachedCountries, max_length=2, null=True, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State')),
                ('positionid', models.PositiveIntegerField(default=1)),
                ('tax_rate', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Tax rate')),
                ('tax_value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Tax value')),
                ('secret', models.CharField(db_index=True, max_length=255)),
                ('web_secret', models.CharField(db_index=True, default=eventyay.base.models.orders.generate_secret, max_length=32)),
                ('pseudonymization_id', models.CharField(db_index=True, max_length=16, unique=True)),
                ('canceled', models.BooleanField(default=False)),
                ('addon_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='addons', to='base.orderposition')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='all_positions', to='base.order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Order position',
                'verbose_name_plural': 'Order positions',
                'ordering': ('positionid', 'id'),
            },
            managers=[
                ('all', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GiftCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issuance', models.DateTimeField(auto_now_add=True)),
                ('secret', models.CharField(db_index=True, max_length=190, validators=[django.core.validators.RegexValidator(message='The gift card code may only contain letters, numbers, dots and dashes.', regex='^[a-zA-Z0-9][a-zA-Z0-9.-]+$')], verbose_name='Gift card code')),
                ('testmode', models.BooleanField(default=False, verbose_name='Test mode card')),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='Expiry date')),
                ('conditions', models.TextField(blank=True, null=True, verbose_name='Special terms and conditions')),
                ('currency', models.CharField(choices=[('AED', 'AED - UAE Dirham'), ('AFN', 'AFN - Afghani'), ('ALL', 'ALL - Lek'), ('AMD', 'AMD - Armenian Dram'), ('ANG', 'ANG - Netherlands Antillean Guilder'), ('AOA', 'AOA - Kwanza'), ('ARS', 'ARS - Argentine Peso'), ('AUD', 'AUD - Australian Dollar'), ('AWG', 'AWG - Aruban Florin'), ('AZN', 'AZN - Azerbaijan Manat'), ('BAM', 'BAM - Convertible Mark'), ('BBD', 'BBD - Barbados Dollar'), ('BDT', 'BDT - Taka'), ('BGN', 'BGN - Bulgarian Lev'), ('BHD', 'BHD - Bahraini Dinar'), ('BIF', 'BIF - Burundi Franc'), ('BMD', 'BMD - Bermudian Dollar'), ('BND', 'BND - Brunei Dollar'), ('BOB', 'BOB - Boliviano'), ('BOV', 'BOV - Mvdol'), ('BRL', 'BRL - Brazilian Real'), ('BSD', 'BSD - Bahamian Dollar'), ('BTN', 'BTN - Ngultrum'), ('BWP', 'BWP - Pula'), ('BYN', 'BYN - Belarusian Ruble'), ('BZD', 'BZD - Belize Dollar'), ('CAD', 'CAD - Canadian Dollar'), ('CDF', 'CDF - Congolese Franc'), ('CHE', 'CHE - WIR Euro'), ('CHF', 'CHF - Swiss Franc'), ('CHW', 'CHW - WIR Franc'), ('CLF', 'CLF - Unidad de Fomento'), ('CLP', 'CLP - Chilean Peso'), ('CNY', 'CNY - Yuan Renminbi'), ('COP', 'COP - Colombian Peso'), ('COU', 'COU - Unidad de Valor Real'), ('CRC', 'CRC - Costa Rican Colon'), ('CUC', 'CUC - Peso Convertible'), ('CUP', 'CUP - Cuban Peso'), ('CVE', 'CVE - Cabo Verde Escudo'), ('CZK', 'CZK - Czech Koruna'), ('DJF', 'DJF - Djibouti Franc'), ('DKK', 'DKK - Danish Krone'), ('DOP', 'DOP - Dominican Peso'), ('DZD', 'DZD - Algerian Dinar'), ('EGP', 'EGP - Egyptian Pound'), ('ERN', 'ERN - Nakfa'), ('ETB', 'ETB - Ethiopian Birr'), ('EUR', 'EUR - Euro'), ('FJD', 'FJD - Fiji Dollar'), ('FKP', 'FKP - Falkland Islands Pound'), ('GBP', 'GBP - Pound Sterling'), ('GEL', 'GEL - Lari'), ('GHS', 'GHS - Ghana Cedi'), ('GIP', 'GIP - Gibraltar Pound'), ('GMD', 'GMD - Dalasi'), ('GNF', 'GNF - Guinean Franc'), ('GTQ', 'GTQ - Quetzal'), ('GYD', 'GYD - Guyana Dollar'), ('HKD', 'HKD - Hong Kong Dollar'), ('HNL', 'HNL - Lempira'), ('HRK', 'HRK - Kuna'), ('HTG', 'HTG - Gourde'), ('HUF', 'HUF - Forint'), ('IDR', 'IDR - Rupiah'), ('ILS', 'ILS - New Israeli Sheqel'), ('INR', 'INR - Indian Rupee'), ('IQD', 'IQD - Iraqi Dinar'), ('IRR', 'IRR - Iranian Rial'), ('ISK', 'ISK - Iceland Krona'), ('JMD', 'JMD - Jamaican Dollar'), ('JOD', 'JOD - Jordanian Dinar'), ('JPY', 'JPY - Yen'), ('KES', 'KES - Kenyan Shilling'), ('KGS', 'KGS - Som'), ('KHR', 'KHR - Riel'), ('KMF', 'KMF - Comorian Franc'), ('KPW', 'KPW - North Korean Won'), ('KRW', 'KRW - Won'), ('KWD', 'KWD - Kuwaiti Dinar'), ('KYD', 'KYD - Cayman Islands Dollar'), ('KZT', 'KZT - Tenge'), ('LAK', 'LAK - Lao Kip'), ('LBP', 'LBP - Lebanese Pound'), ('LKR', 'LKR - Sri Lanka Rupee'), ('LRD', 'LRD - Liberian Dollar'), ('LSL', 'LSL - Loti'), ('LYD', 'LYD - Libyan Dinar'), ('MAD', 'MAD - Moroccan Dirham'), ('MDL', 'MDL - Moldovan Leu'), ('MGA', 'MGA - Malagasy Ariary'), ('MKD', 'MKD - Denar'), ('MMK', 'MMK - Kyat'), ('MNT', 'MNT - Tugrik'), ('MOP', 'MOP - Pataca'), ('MRU', 'MRU - Ouguiya'), ('MUR', 'MUR - Mauritius Rupee'), ('MVR', 'MVR - Rufiyaa'), ('MWK', 'MWK - Malawi Kwacha'), ('MXN', 'MXN - Mexican Peso'), ('MXV', 'MXV - Mexican Unidad de Inversion (UDI)'), ('MYR', 'MYR - Malaysian Ringgit'), ('MZN', 'MZN - Mozambique Metical'), ('NAD', 'NAD - Namibia Dollar'), ('NGN', 'NGN - Naira'), ('NIO', 'NIO - Cordoba Oro'), ('NOK', 'NOK - Norwegian Krone'), ('NPR', 'NPR - Nepalese Rupee'), ('NZD', 'NZD - New Zealand Dollar'), ('OMR', 'OMR - Rial Omani'), ('PAB', 'PAB - Balboa'), ('PEN', 'PEN - Sol'), ('PGK', 'PGK - Kina'), ('PHP', 'PHP - Philippine Peso'), ('PKR', 'PKR - Pakistan Rupee'), ('PLN', 'PLN - Zloty'), ('PYG', 'PYG - Guarani'), ('QAR', 'QAR - Qatari Rial'), ('RON', 'RON - Romanian Leu'), ('RSD', 'RSD - Serbian Dinar'), ('RUB', 'RUB - Russian Ruble'), ('RWF', 'RWF - Rwanda Franc'), ('SAR', 'SAR - Saudi Riyal'), ('SBD', 'SBD - Solomon Islands Dollar'), ('SCR', 'SCR - Seychelles Rupee'), ('SDG', 'SDG - Sudanese Pound'), ('SEK', 'SEK - Swedish Krona'), ('SGD', 'SGD - Singapore Dollar'), ('SHP', 'SHP - Saint Helena Pound'), ('SLE', 'SLE - Leone'), ('SLL', 'SLL - Leone'), ('SOS', 'SOS - Somali Shilling'), ('SRD', 'SRD - Surinam Dollar'), ('SSP', 'SSP - South Sudanese Pound'), ('STN', 'STN - Dobra'), ('SVC', 'SVC - El Salvador Colon'), ('SYP', 'SYP - Syrian Pound'), ('SZL', 'SZL - Lilangeni'), ('THB', 'THB - Baht'), ('TJS', 'TJS - Somoni'), ('TMT', 'TMT - Turkmenistan New Manat'), ('TND', 'TND - Tunisian Dinar'), ('TOP', 'TOP - Pa’anga'), ('TRY', 'TRY - Turkish Lira'), ('TTD', 'TTD - Trinidad and Tobago Dollar'), ('TWD', 'TWD - New Taiwan Dollar'), ('TZS', 'TZS - Tanzanian Shilling'), ('UAH', 'UAH - Hryvnia'), ('UGX', 'UGX - Uganda Shilling'), ('USD', 'USD - US Dollar'), ('USN', 'USN - US Dollar (Next day)'), ('UYI', 'UYI - Uruguay Peso en Unidades Indexadas (UI)'), ('UYU', 'UYU - Peso Uruguayo'), ('UYW', 'UYW - Unidad Previsional'), ('UZS', 'UZS - Uzbekistan Sum'), ('VED', 'VED - Bolívar Soberano'), ('VES', 'VES - Bolívar Soberano'), ('VND', 'VND - Dong'), ('VUV', 'VUV - Vatu'), ('WST', 'WST - Tala'), ('XAF', 'XAF - CFA Franc BEAC'), ('XAG', 'XAG - Silver'), ('XAU', 'XAU - Gold'), ('XBA', 'XBA - Bond Markets Unit European Composite Unit (EURCO)'), ('XBB', 'XBB - Bond Markets Unit European Monetary Unit (E.M.U.-6)'), ('XBC', 'XBC - Bond Markets Unit European Unit of Account 9 (E.U.A.-9)'), ('XBD', 'XBD - Bond Markets Unit European Unit of Account 17 (E.U.A.-17)'), ('XCD', 'XCD - East Caribbean Dollar'), ('XDR', 'XDR - SDR (Special Drawing Right)'), ('XOF', 'XOF - CFA Franc BCEAO'), ('XPD', 'XPD - Palladium'), ('XPF', 'XPF - CFP Franc'), ('XPT', 'XPT - Platinum'), ('XSU', 'XSU - Sucre'), ('XTS', 'XTS - Codes specifically reserved for testing purposes'), ('XUA', 'XUA - ADB Unit of Account'), ('XXX', 'XXX - The codes assigned for transactions where no currency is involved'), ('YER', 'YER - Yemeni Rial'), ('ZAR', 'ZAR - Rand'), ('ZMW', 'ZMW - Zambian Kwacha'), ('ZWL', 'ZWL - Zimbabwe Dollar')], max_length=10)),
                ('issued_in', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='issued_gift_cards', to='base.orderposition')),
                ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='issued_gift_cards', to='base.organizer')),
            ],
            options={
                'ordering': ('issuance',),
                'unique_together': {('secret', 'issuer')},
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='Checkin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('nonce', models.CharField(blank=True, max_length=190, null=True)),
                ('type', models.CharField(choices=[('entry', 'Entry'), ('exit', 'Exit')], default='entry', max_length=100)),
                ('forced', models.BooleanField(default=False)),
                ('auto_checked_in', models.BooleanField(default=False)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='checkins', to='base.checkinlist')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='checkins', to='base.device')),
                ('gate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checkins', to='base.gate')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkins', to='base.orderposition')),
            ],
            options={
                'ordering': ('-datetime',),
            },
        ),
        migrations.CreateModel(
            name='CachedTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('extension', models.CharField(max_length=255)),
                ('file', models.FileField(blank=True, max_length=255, null=True, upload_to=eventyay.base.models.orders.cachedticket_name)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order_position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.orderposition')),
            ],
        ),
        migrations.CreateModel(
            name='OrderRefund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_id', models.PositiveIntegerField()),
                ('state', models.CharField(choices=[('external', 'started externally'), ('created', 'created'), ('transit', 'in transit'), ('done', 'done'), ('failed', 'failed'), ('canceled', 'canceled')], max_length=190)),
                ('source', models.CharField(choices=[('admin', 'Organizer'), ('buyer', 'Customer'), ('external', 'External')], max_length=190)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('execution_date', models.DateTimeField(blank=True, null=True)),
                ('provider', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment provider')),
                ('comment', models.TextField(blank=True, help_text='May be shown to the end user or used e.g. as part of a payment reference.', null=True, verbose_name='Refund reason')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Payment information')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='refunds', to='base.order', verbose_name='Order')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='refunds', to='base.orderpayment')),
            ],
            options={
                'ordering': ('local_id',),
            },
        ),
        migrations.CreateModel(
            name='GiftCardTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('text', models.TextField(blank=True, null=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='base.giftcard')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gift_card_transactions', to='base.order')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gift_card_transactions', to='base.orderpayment')),
                ('refund', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gift_card_transactions', to='base.orderrefund')),
            ],
            options={
                'ordering': ('datetime',),
            },
        ),
        migrations.CreateModel(
            name='InvoiceVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, default=eventyay.base.models.vouchers.generate_code, max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='Voucher code')),
                ('max_usages', models.PositiveIntegerField(default=1, help_text='Number of times this voucher can be redeemed.', verbose_name='Maximum usages')),
                ('redeemed', models.PositiveIntegerField(default=0, verbose_name='Redeemed')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, help_text='This is the maximum monetary amount that will be discounted using this voucher across all usages.', max_digits=10, null=True, verbose_name='Maximum discount budget')),
                ('valid_until', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Valid until')),
                ('price_mode', models.CharField(choices=[('none', 'No effect'), ('set', 'Set product price to'), ('subtract', 'Subtract from product price'), ('percent', 'Reduce product price by (%)')], default='none', max_length=100, verbose_name='Price mode')),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Voucher value')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(default='system', max_length=50)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(default='system', max_length=50)),
                ('limit_events', models.ManyToManyField(blank=True, related_name='invoice_vouchers', to='base.event', verbose_name='Limit to events')),
                ('limit_organizer', models.ManyToManyField(blank=True, related_name='invoice_vouchers', to='base.organizer', verbose_name='Limit to Organizer')),
            ],
            options={
                'verbose_name': 'Invoice Voucher',
                'verbose_name_plural': 'Invoice Vouchers',
                'ordering': ('code',),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefix', models.CharField(db_index=True, max_length=160)),
                ('invoice_no', models.CharField(db_index=True, max_length=19)),
                ('full_invoice_no', models.CharField(db_index=True, max_length=190)),
                ('is_cancellation', models.BooleanField(default=False)),
                ('invoice_from', models.TextField()),
                ('invoice_from_name', models.CharField(max_length=190, null=True)),
                ('invoice_from_zipcode', models.CharField(max_length=190, null=True)),
                ('invoice_from_city', models.CharField(max_length=190, null=True)),
                ('invoice_from_country', eventyay.helpers.countries.FastCountryField(countries=eventyay.helpers.countries.CachedCountries, max_length=2, null=True)),
                ('invoice_from_tax_id', models.CharField(max_length=190, null=True)),
                ('invoice_from_vat_id', models.CharField(max_length=190, null=True)),
                ('invoice_to', models.TextField()),
                ('invoice_to_company', models.TextField(null=True)),
                ('invoice_to_name', models.TextField(null=True)),
                ('invoice_to_street', models.TextField(null=True)),
                ('invoice_to_zipcode', models.CharField(max_length=190, null=True)),
                ('invoice_to_city', models.TextField(null=True)),
                ('invoice_to_state', models.CharField(max_length=190, null=True)),
                ('invoice_to_country', eventyay.helpers.countries.FastCountryField(countries=eventyay.helpers.countries.CachedCountries, max_length=2, null=True)),
                ('invoice_to_vat_id', models.TextField(null=True)),
                ('invoice_to_beneficiary', models.TextField(null=True)),
                ('date', models.DateField(default=eventyay.base.models.invoices.today)),
                ('locale', models.CharField(default='en', max_length=50)),
                ('introductory_text', models.TextField(blank=True)),
                ('additional_text', models.TextField(blank=True)),
                ('reverse_charge', models.BooleanField(default=False)),
                ('payment_provider_text', models.TextField(blank=True)),
                ('footer_text', models.TextField(blank=True)),
                ('foreign_currency_display', models.CharField(blank=True, max_length=50, null=True)),
                ('foreign_currency_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('foreign_currency_rate_date', models.DateField(blank=True, null=True)),
                ('shredded', models.BooleanField(default=False)),
                ('file', models.FileField(blank=True, max_length=255, null=True, upload_to=eventyay.base.models.invoices.invoice_filename)),
                ('internal_reference', models.TextField(blank=True)),
                ('custom_field', models.CharField(max_length=255, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='base.event')),
                ('refers', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='refered', to='base.invoice')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='base.order')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='base.organizer')),
            ],
            options={
                'ordering': ('date', 'invoice_no'),
                'unique_together': {('organizer', 'prefix', 'invoice_no')},
            },
        ),
        migrations.CreateModel(
            name='GiftCardAcceptance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gift_card_issuer_acceptance', to='base.organizer')),
                ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gift_card_collector_acceptance', to='base.organizer')),
            ],
        ),
        migrations.AddField(
            model_name='gate',
            name='organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='gates', to='base.organizer'),
        ),
        migrations.CreateModel(
            name='EventMetaProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Can not contain spaces or special characters except underscores', max_length=50, validators=[django.core.validators.RegexValidator(message='The property name may only contain letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Name')),
                ('default', models.TextField(blank=True, verbose_name='Default value')),
                ('protected', models.BooleanField(default=False, verbose_name='Can only be changed by organizer-level administrators')),
                ('required', models.BooleanField(default=False, help_text='If checked, an event can only be taken live if the property is set. In event series, its always optional to set a value for individual dates', verbose_name='Required for events')),
                ('allowed_values', models.TextField(blank=True, help_text='If you keep this empty, any value is allowed. Otherwise, enter one possible value per line.', null=True, verbose_name='Valid values')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta_properties', to='base.organizer')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='base.organizer'),
        ),
        migrations.CreateModel(
            name='BillingInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('n', 'pending'), ('p', 'paid'), ('e', 'expired'), ('c', 'canceled')], default='n', max_length=1)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=3)),
                ('ticket_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('final_ticket_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('voucher_discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('voucher_price_mode', models.CharField(blank=True, choices=[('none', 'No effect'), ('set', 'Set product price to'), ('subtract', 'Subtract from product price'), ('percent', 'Reduce product price by (%)')], max_length=20, null=True)),
                ('voucher_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_method', models.CharField(blank=True, max_length=20, null=True)),
                ('paid_datetime', models.DateTimeField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('monthly_bill', models.DateField(default=datetime.date.today)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(max_length=50)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(max_length=50)),
                ('last_reminder_datetime', models.DateTimeField(blank=True, null=True)),
                ('next_reminder_datetime', models.DateTimeField(blank=True, null=True)),
                ('reminder_schedule', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, help_text='Days after creation for reminders, e.g., [14, 28]', size=None)),
                ('reminder_enabled', models.BooleanField(default=True)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=50, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.event')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.organizer')),
            ],
            options={
                'verbose_name': 'Billing Invoice',
                'verbose_name_plural': 'Billing Invoices',
                'ordering': ('-created_at',),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='Organizer_SettingsStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_settings_objects', to='base.organizer')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizerBillingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_contact_name', models.CharField(max_length=255, verbose_name='Primary Contact Name')),
                ('primary_contact_email', models.EmailField(max_length=255, verbose_name='Primary Contact Email')),
                ('company_or_organization_name', models.CharField(max_length=255, verbose_name='Company or Organization Name')),
                ('address_line_1', models.CharField(max_length=255, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(max_length=255, verbose_name='Address Line 2')),
                ('city', models.CharField(max_length=255, verbose_name='City')),
                ('zip_code', models.CharField(max_length=255, verbose_name='Zip Code')),
                ('country', models.CharField(max_length=255, verbose_name='Country')),
                ('preferred_language', models.CharField(max_length=255, verbose_name='Preferred Language')),
                ('tax_id', models.CharField(max_length=255, verbose_name='Tax ID')),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Stripe Customer ID')),
                ('stripe_payment_method_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Method')),
                ('stripe_setup_intent_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Setup Intent ID')),
                ('invoice_voucher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billing', to='base.invoicevoucher')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billing', to='base.organizer')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', i18nfield.fields.I18nCharField(max_length=255, verbose_name='Product name')),
                ('internal_name', models.CharField(blank=True, help_text='If you set this, this will be used instead of the public name in the backend.', max_length=255, null=True, verbose_name='Internal name')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('description', i18nfield.fields.I18nTextField(blank=True, help_text='This is shown below the product name in lists.', null=True, verbose_name='Description')),
                ('default_price', models.DecimalField(decimal_places=2, help_text='If this product has multiple variations, you can set different prices for each of the variations. If a variation does not have a special price or if you do not have variations, this price will be used.', max_digits=7, null=True, verbose_name='Default price')),
                ('free_price', models.BooleanField(default=False, help_text='If this option is active, your users can choose the price themselves. The price configured above is then interpreted as the minimum price a user has to enter. You could use this e.g. to collect additional donations for your event. This is currently not supported for products that are bought as an add-on to other products.', verbose_name='Free price input')),
                ('admission', models.BooleanField(default=False, help_text='Whether or not buying this product allows a person to enter your event', verbose_name='Is an admission ticket')),
                ('generate_tickets', models.BooleanField(blank=True, null=True, verbose_name='Generate tickets')),
                ('allow_waitinglist', models.BooleanField(default=True, help_text='This will only work if waiting lists are enabled for this event.', verbose_name='Show a waiting list for this ticket')),
                ('show_quota_left', models.BooleanField(blank=True, help_text='Publicly show how many tickets are still available.', null=True, verbose_name='Show number of tickets left')),
                ('position', models.IntegerField(default=0)),
                ('picture', models.ImageField(blank=True, max_length=255, null=True, upload_to=eventyay.base.models.product.productpicture_upload_to, verbose_name='Product picture')),
                ('available_from', models.DateTimeField(blank=True, help_text='This product will not be sold before the given date.', null=True, verbose_name='Available from')),
                ('available_until', models.DateTimeField(blank=True, help_text='This product will not be sold after the given date.', null=True, verbose_name='Available until')),
                ('require_voucher', models.BooleanField(default=False, help_text='To buy this product, the user needs a voucher that applies to this product either directly or via a quota.', verbose_name='This product can only be bought using a voucher.')),
                ('require_approval', models.BooleanField(default=False, help_text='If this product is part of an order, the order will be put into an "approval" state and will need to be confirmed by you before it can be paid and completed. You can use this e.g. for discounted tickets that are only available to specific groups.', verbose_name='Buying this product requires approval')),
                ('hide_without_voucher', models.BooleanField(default=False, help_text='This product will be hidden from the event page until the user enters a voucher that unlocks this product.', verbose_name='This product will only be shown if a voucher matching the product is redeemed.')),
                ('require_bundling', models.BooleanField(default=False, help_text='If this option is set, the product will only be sold as part of bundle products. Do <strong>not</strong> check this option if you want to use this product as an add-on product, but only for fixed bundles!', verbose_name='Only sell this product as part of a bundle')),
                ('allow_cancel', models.BooleanField(default=True, help_text='If this is checked, the usual cancellation and order change settings of this event apply. If this is unchecked, orders containing this product can not be canceled by users but only by you.', verbose_name='Allow product to be canceled or changed')),
                ('min_per_order', models.IntegerField(blank=True, help_text='This product can only be bought if it is added to the cart at least this many times. If you keep the field empty or set it to 0, there is no special limit for this product.', null=True, verbose_name='Minimum amount per order')),
                ('max_per_order', models.IntegerField(blank=True, help_text='This product can only be bought at most this many times within one order. If you keep the field empty or set it to 0, there is no special limit for this product. The limit for the maximum number of products in the whole order applies regardless.', null=True, verbose_name='Maximum amount per order')),
                ('checkin_attention', models.BooleanField(default=False, help_text='If you set this, the check-in app will show a visible warning that this ticket requires special attention. You can use this for example for student tickets to indicate to the person at check-in that the student ID card still needs to be checked.', verbose_name='Requires special attention')),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='If set, this will be displayed next to the current price to show that the current price is a discounted one. This is just a cosmetic setting and will not actually impact pricing.', max_digits=7, null=True, verbose_name='Original price')),
                ('sales_channels', eventyay.base.models.fields.MultiStringField(blank=True, default=['web'], verbose_name='Sales channels')),
                ('issue_giftcard', models.BooleanField(default=False, help_text='When a customer buys this product, they will get a gift card with a value corresponding to the product price.', verbose_name='This product is a gift card')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='base.event', verbose_name='Event')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ('category__position', 'category', 'position'),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='orderposition',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='checkinlist',
            name='limit_products',
            field=models.ManyToManyField(blank=True, to='base.product', verbose_name='Limit to products'),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', i18nfield.fields.I18nCharField(max_length=255, verbose_name='Category name')),
                ('internal_name', models.CharField(blank=True, help_text='If you set this, this will be used instead of the public name in the backend.', max_length=255, null=True, verbose_name='Internal name')),
                ('description', i18nfield.fields.I18nTextField(blank=True, verbose_name='Category description')),
                ('position', models.IntegerField(default=0)),
                ('is_addon', models.BooleanField(default=False, help_text='If selected, the products belonging to this category are not for sale on their own. They can only be bought in combination with a product that has this category configured as a possible source for add-ons.', verbose_name='Products in this category are add-on products')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='base.event')),
            ],
            options={
                'verbose_name': 'Product category',
                'verbose_name_plural': 'Product categories',
                'ordering': ('position', 'id'),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, help_text='If you have many products, you can optionally sort them into categories to keep things organized.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products', to='base.productcategory', verbose_name='Category'),
        ),
        migrations.CreateModel(
            name='ProductMetaProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Can not contain spaces or special characters except underscores', max_length=50, validators=[django.core.validators.RegexValidator(message='The property name may only contain letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Name')),
                ('default', models.TextField(blank=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_meta_properties', to='base.event')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='ProductVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', i18nfield.fields.I18nCharField(max_length=255, verbose_name='Description')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('description', i18nfield.fields.I18nTextField(blank=True, help_text='This is shown below the variation name in lists.', null=True, verbose_name='Description')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position')),
                ('default_price', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Default price')),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='If set, this will be displayed next to the current price to show that the current price is a discounted one. This is just a cosmetic setting and will not actually impact pricing.', max_digits=7, null=True, verbose_name='Original price')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variations', to='base.product')),
            ],
            options={
                'verbose_name': 'Product variation',
                'verbose_name_plural': 'Product variations',
                'ordering': ('position', 'id'),
            },
        ),
        migrations.CreateModel(
            name='ProductBundle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=1, verbose_name='Number')),
                ('designated_price', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text="If set, it will be shown that this bundled product is responsible for the given value of the total gross price. This might be important in cases of mixed taxation, but can be kept blank otherwise. This value will NOT be added to the base product's price.", max_digits=10, verbose_name='Designated price part')),
                ('base_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bundles', to='base.product')),
                ('bundled_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bundled_with', to='base.product', verbose_name='Bundled product')),
                ('bundled_variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bundled_with', to='base.productvariation', verbose_name='Bundled variation')),
            ],
        ),
        migrations.AddField(
            model_name='orderposition',
            name='variation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.productvariation', verbose_name='Variation'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', i18nfield.fields.I18nTextField(verbose_name='Question')),
                ('description', i18nfield.fields.I18nTextField(blank=True, default='', null=True, verbose_name='Description')),
                ('identifier', models.CharField(help_text='You can enter any value here to make it easier to match the data with other sources. If you do not input one, we will generate one automatically.', max_length=190, verbose_name='Internal identifier')),
                ('help_text', i18nfield.fields.I18nTextField(blank=True, help_text='If the question needs to be explained or clarified, do it here!', null=True, verbose_name='Help text')),
                ('type', models.CharField(choices=[('N', 'Number'), ('S', 'Text (one line)'), ('T', 'Multiline text'), ('B', 'Confirm Checkbox'), ('C', 'Choose one from a list'), ('M', 'Choose multiple from a list'), ('F', 'File upload'), ('D', 'Date'), ('H', 'Time'), ('W', 'Date and time'), ('CC', 'Country code (ISO 3166-1 alpha-2)'), ('TEL', 'Phone number'), ('DES', 'Text field')], max_length=5, verbose_name='Question type')),
                ('required', models.BooleanField(default=False, verbose_name='Required question')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position')),
                ('ask_during_checkin', models.BooleanField(default=False, help_text='Not supported by all check-in apps for all question types.', verbose_name='Ask during check-in instead of in the ticket buying process')),
                ('hidden', models.BooleanField(default=False, help_text='This question will only show up in the backend.', verbose_name='Hidden question')),
                ('print_on_invoice', models.BooleanField(default=False, verbose_name='Print answer on invoices')),
                ('dependency_values', eventyay.base.models.fields.MultiStringField(default=[])),
                ('valid_number_min', models.DecimalField(blank=True, decimal_places=6, help_text='Currently not supported in our apps and during check-in', max_digits=16, null=True, verbose_name='Minimum value')),
                ('valid_number_max', models.DecimalField(blank=True, decimal_places=6, help_text='Currently not supported in our apps and during check-in', max_digits=16, null=True, verbose_name='Maximum value')),
                ('valid_date_min', models.DateField(blank=True, help_text='Currently not supported in our apps and during check-in', null=True, verbose_name='Minimum value')),
                ('valid_date_max', models.DateField(blank=True, help_text='Currently not supported in our apps and during check-in', null=True, verbose_name='Maximum value')),
                ('valid_datetime_min', models.DateTimeField(blank=True, help_text='Currently not supported in our apps and during check-in', null=True, verbose_name='Minimum value')),
                ('valid_datetime_max', models.DateTimeField(blank=True, help_text='Currently not supported in our apps and during check-in', null=True, verbose_name='Maximum value')),
                ('dependency_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dependent_questions', to='base.question')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='base.event')),
                ('products', models.ManyToManyField(blank=True, help_text='This question will be asked to buyers of the selected products', related_name='questions', to='base.product', verbose_name='Products')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ('position', 'id'),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=190)),
                ('answer', i18nfield.fields.I18nCharField(verbose_name='Answer')),
                ('position', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='base.question')),
            ],
            options={
                'verbose_name': 'Question option',
                'verbose_name_plural': 'Question options',
                'ordering': ('position', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Quota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('size', models.PositiveIntegerField(blank=True, help_text='Leave empty for an unlimited number of tickets.', null=True, verbose_name='Total capacity')),
                ('close_when_sold_out', models.BooleanField(default=False, help_text='If you enable this, when the quota is sold out once, no more tickets will be sold, even if tickets become available again through cancellations or expiring orders. Of course, you can always re-open it manually.', verbose_name='Close this quota permanently once it is sold out')),
                ('closed', models.BooleanField(default=False)),
                ('release_after_exit', models.BooleanField(default=False, help_text='With this option, quota will be released as soon as people are scanned at an exit of your event. This will only happen if they have been scanned both at an entry and at an exit and the exit is the more recent scan. It does not matter which check-in list either of the scans was on, but check-in lists are ignored if they are set to "Allow re-entering after an exit scan" to prevent accidental overbooking.', verbose_name='Allow to sell more tickets once people have checked out')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quotas', to='base.event', verbose_name='Event')),
                ('products', models.ManyToManyField(blank=True, related_name='quotas', to='base.product', verbose_name='Product')),
                ('variations', models.ManyToManyField(blank=True, related_name='quotas', to='base.productvariation', verbose_name='Variations')),
            ],
            options={
                'verbose_name': 'Quota',
                'verbose_name_plural': 'Quotas',
                'ordering': ('name',),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='product',
            name='hidden_if_available',
            field=models.ForeignKey(blank=True, help_text='If you select a quota here, this product will only be shown when that quota is unavailable. If combined with the option to hide sold-out products, this allows you to swap out products for more expensive ones once they are sold out. There might be a short period in which both products are visible while all tickets in the referenced quota are reserved, but not yet sold.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.quota', verbose_name='Only show after sellout of'),
        ),
        migrations.CreateModel(
            name='RequiredAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('done', models.BooleanField(default=False)),
                ('action_type', models.CharField(max_length=255)),
                ('data', models.TextField(default='{}')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('datetime',),
            },
        ),
        migrations.CreateModel(
            name='ReviewPhase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='Phase start')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='Phase end')),
                ('position', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=False)),
                ('can_review', models.BooleanField(default=True, verbose_name='Reviewers can write and edit reviews')),
                ('proposal_visibility', models.CharField(choices=[('all', 'All'), ('assigned', 'Only assigned proposals')], default='all', help_text='If you select “all”, reviewers can review all proposals that their teams have access to (so either all, or specific tracks). In this mode, assigned proposals will be highlighted and will be shown first in the review workflow. ', max_length=8, verbose_name='Reviewers may see these proposals')),
                ('can_see_other_reviews', models.CharField(choices=[('always', 'Always'), ('never', 'Never'), ('after_review', 'After reviewing the proposal')], default='after_review', max_length=12, verbose_name='Reviewers can see other reviews')),
                ('can_see_speaker_names', models.BooleanField(default=True, verbose_name='Reviewers can see speaker names')),
                ('can_see_reviewer_names', models.BooleanField(default=True, verbose_name='Reviewers can see the names of other reviewers')),
                ('can_change_submission_state', models.BooleanField(default=False, verbose_name='Reviewers can accept and reject proposals')),
                ('can_tag_submissions', models.CharField(choices=[('never', 'Never'), ('use_tags', 'Add and remove existing tags'), ('create_tags', 'Add, remove and create tags')], default='never', max_length=12, verbose_name='Reviewers can tag proposals')),
                ('speakers_can_change_submissions', models.BooleanField(default=False, help_text='By default, modification of proposals is locked after the CfP ends, and is re-enabled once the proposal was accepted.', verbose_name='Speakers can modify their proposals before acceptance')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_phases', to='base.event')),
            ],
            options={
                'ordering': ('position',),
            },
            bases=(eventyay.base.models.mixins.OrderedModel, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ReviewScoreCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', i18nfield.fields.I18nCharField()),
                ('weight', models.DecimalField(decimal_places=1, default=1, max_digits=4)),
                ('required', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('is_independent', models.BooleanField(default=False, help_text='Independent scores are not part of the total score. Instead they are shown in a separate column in the review dashboard.', verbose_name='Independent score')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_categories', to='base.event')),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ReviewScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=7)),
                ('label', models.CharField(blank=True, max_length=200, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='base.reviewscorecategory')),
            ],
            options={
                'ordering': ('value',),
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RevokedTicketSecret',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret', models.TextField(db_index=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revoked_secrets', to='base.event')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revoked_secrets', to='base.orderposition')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', i18nfield.fields.I18nCharField(max_length=100, verbose_name='Name')),
                ('guid', models.UUIDField(blank=True, help_text='Unique identifier (UUID) to help external tools identify the room.', null=True, verbose_name='GUID')),
                ('description', i18nfield.fields.I18nCharField(blank=True, help_text='A description for attendees, for example directions.', max_length=1000, null=True, verbose_name='Description')),
                ('speaker_info', i18nfield.fields.I18nCharField(blank=True, help_text='Information relevant for speakers scheduled in this room, for example room size, special directions, available adaptors for video input …', max_length=1000, null=True, verbose_name='Speaker Information')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='How many people can fit in the room?', null=True, verbose_name='Capacity')),
                ('position', models.PositiveIntegerField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rooms', to='base.event')),
            ],
            options={
                'ordering': ('position',),
                'unique_together': {('event', 'guid')},
            },
            bases=(eventyay.base.models.mixins.OrderedModel, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('version', models.CharField(blank=True, max_length=190, null=True, verbose_name='Version')),
                ('published', models.DateTimeField(blank=True, null=True)),
                ('comment', i18nfield.fields.I18nTextField(blank=True, help_text='This text will be shown in the public changelog and the RSS feed. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='schedules', to='base.event')),
            ],
            options={
                'ordering': ('-published',),
                'unique_together': {('event', 'version')},
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_name', models.CharField(blank=True, default='', max_length=190)),
                ('row_name', models.CharField(blank=True, default='', max_length=190)),
                ('row_label', models.CharField(max_length=190, null=True)),
                ('seat_number', models.CharField(blank=True, default='', max_length=190)),
                ('seat_label', models.CharField(max_length=190, null=True)),
                ('seat_guid', models.CharField(db_index=True, max_length=190)),
                ('blocked', models.BooleanField(default=False)),
                ('sorting_rank', models.BigIntegerField(default=0)),
                ('x', models.FloatField(null=True)),
                ('y', models.FloatField(null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seats', to='base.event')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seats', to='base.product')),
            ],
            options={
                'ordering': ['sorting_rank', 'seat_guid'],
            },
        ),
        migrations.AddField(
            model_name='orderposition',
            name='seat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.seat'),
        ),
        migrations.CreateModel(
            name='SeatingPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190, verbose_name='Name')),
                ('layout', models.TextField(validators=[eventyay.base.models.seating.SeatingPlanLayoutValidator()])),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seating_plans', to='base.organizer')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='event',
            name='seating_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='base.seatingplan'),
        ),
        migrations.CreateModel(
            name='SpeakerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('biography', models.TextField(blank=True, help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True, verbose_name='Biography')),
                ('has_arrived', models.BooleanField(default=False, verbose_name='The speaker has arrived')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base.event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='base.event')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='base.room')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='base.speakerprofile')),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SpeakerRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speaker_roles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StaffSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateTimeField(auto_now_add=True)),
                ('date_end', models.DateTimeField(blank=True, null=True)),
                ('session_key', models.CharField(max_length=255)),
                ('comment', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('date_start',),
            },
        ),
        migrations.CreateModel(
            name='StaffSessionAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('url', models.CharField(max_length=255)),
                ('method', models.CharField(max_length=255)),
                ('impersonating', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='logs', to='base.staffsession')),
            ],
            options={
                'ordering': ('datetime',),
            },
        ),
        migrations.CreateModel(
            name='SubEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='Only with this checkbox enabled, this date is visible in the frontend to users.', verbose_name='Active')),
                ('is_public', models.BooleanField(default=True, help_text='If selected, this event will show up publicly on the list of dates for your event.', verbose_name='Show in lists')),
                ('name', i18nfield.fields.I18nCharField(max_length=200, verbose_name='Name')),
                ('date_from', models.DateTimeField(verbose_name='Event start time')),
                ('date_to', models.DateTimeField(blank=True, null=True, verbose_name='Event end time')),
                ('date_admission', models.DateTimeField(blank=True, null=True, verbose_name='Admission time')),
                ('presale_end', models.DateTimeField(blank=True, help_text='Optional. No products will be sold after this date. If you do not set this value, the presale will end after the end date of your event.', null=True, verbose_name='End of presale')),
                ('presale_start', models.DateTimeField(blank=True, help_text='Optional. No products will be sold before this date.', null=True, verbose_name='Start of presale')),
                ('location', i18nfield.fields.I18nTextField(blank=True, max_length=200, null=True, verbose_name='Location')),
                ('geo_lat', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Latitude')),
                ('geo_lon', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Longitude')),
                ('frontpage_text', i18nfield.fields.I18nTextField(blank=True, null=True, verbose_name='Frontpage text')),
                ('last_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subevents', to='base.event')),
                ('seating_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subevents', to='base.seatingplan')),
            ],
            options={
                'verbose_name': 'Date in event series',
                'verbose_name_plural': 'Dates in event series',
                'ordering': ('date_from', 'name'),
            },
            bases=(eventyay.base.models.event.EventMixin, models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='SeatCategoryMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layout_category', models.CharField(max_length=190)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seat_category_mappings', to='base.event')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seat_category_mappings', to='base.product')),
                ('subevent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seat_category_mappings', to='base.subevent')),
            ],
        ),
        migrations.AddField(
            model_name='seat',
            name='subevent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seats', to='base.subevent'),
        ),
        migrations.AddField(
            model_name='quota',
            name='subevent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quotas', to='base.subevent', verbose_name='Date'),
        ),
        migrations.AddField(
            model_name='orderposition',
            name='subevent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.subevent', verbose_name='Date'),
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(default=0)),
                ('description', models.TextField()),
                ('gross_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('tax_name', models.CharField(max_length=190)),
                ('event_date_from', models.DateTimeField(null=True)),
                ('event_date_to', models.DateTimeField(null=True)),
                ('attendee_name', models.TextField(blank=True, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='base.invoice')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.product')),
                ('variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.productvariation')),
                ('subevent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.subevent')),
            ],
            options={
                'ordering': ('position', 'pk'),
            },
        ),
        migrations.AddField(
            model_name='checkinlist',
            name='subevent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.subevent', verbose_name='Date'),
        ),
        migrations.CreateModel(
            name='SubEventProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('disabled', models.BooleanField(default=False, verbose_name='Disable product for this date')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.product')),
                ('subevent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subevent')),
            ],
        ),
        migrations.AddField(
            model_name='subevent',
            name='products',
            field=models.ManyToManyField(through='base.SubEventProduct', to='base.product'),
        ),
        migrations.CreateModel(
            name='SubEventProductVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('disabled', models.BooleanField(default=False)),
                ('subevent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.subevent')),
                ('variation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.productvariation')),
            ],
        ),
        migrations.AddField(
            model_name='subevent',
            name='variations',
            field=models.ManyToManyField(through='base.SubEventProductVariation', to='base.productvariation'),
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(max_length=16, unique=True)),
                ('title', models.CharField(max_length=200, verbose_name='Proposal title')),
                ('state', models.CharField(choices=[('submitted', 'submitted'), ('accepted', 'accepted'), ('confirmed', 'confirmed'), ('rejected', 'rejected'), ('canceled', 'canceled'), ('withdrawn', 'withdrawn'), ('deleted', 'deleted'), ('draft', 'draft')], default='submitted', max_length=9, verbose_name='Proposal state')),
                ('pending_state', models.CharField(blank=True, choices=[('submitted', 'submitted'), ('accepted', 'accepted'), ('confirmed', 'confirmed'), ('rejected', 'rejected'), ('canceled', 'canceled'), ('withdrawn', 'withdrawn'), ('deleted', 'deleted'), ('draft', 'draft')], default=None, max_length=9, null=True, verbose_name='Pending proposal state')),
                ('abstract', models.TextField(blank=True, help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True, verbose_name='Abstract')),
                ('description', models.TextField(blank=True, help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True, verbose_name='Description')),
                ('notes', models.TextField(blank=True, help_text='These notes are meant for the organiser and won’t be made public.', null=True, verbose_name='Notes')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes for other organisers/reviewers. Not visible to the speakers or the public.', null=True, verbose_name='Internal notes')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='The duration in minutes.', null=True, verbose_name='Duration')),
                ('slot_count', models.IntegerField(default=1, help_text='How many times this session will take place.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Slot Count')),
                ('content_locale', models.CharField(default='en', max_length=32, verbose_name='Language')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Show this session in public list of featured sessions.')),
                ('do_not_record', models.BooleanField(default=False, verbose_name='Don’t record this session.')),
                ('image', models.ImageField(blank=True, help_text='Use this if you want an illustration to go with your proposal.', null=True, upload_to=eventyay.base.models.submission.submission_image_path, verbose_name='Session image')),
                ('invitation_token', models.CharField(default=eventyay.base.models.submission.generate_invite_code, max_length=32)),
                ('review_code', models.CharField(blank=True, default=eventyay.base.models.submission.generate_invite_code, max_length=32, null=True, unique=True)),
                ('anonymised_data', models.TextField(blank=True, default='{}', null=True)),
                ('assigned_reviewers', models.ManyToManyField(blank=True, related_name='assigned_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Assigned reviewers')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='base.event')),
                ('speakers', models.ManyToManyField(blank=True, related_name='submissions', through='base.SpeakerRole', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(eventyay.base.models.mixins.GenerateCode, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='speakerrole',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speaker_roles', to='base.submission'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('text', models.TextField(blank=True, null=True, verbose_name='What do you think?')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Score')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('scores', models.ManyToManyField(related_name='reviews', to='base.reviewscore')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='base.submission')),
            ],
            options={
                'unique_together': {('user', 'submission')},
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('resource', models.FileField(blank=True, null=True, upload_to=eventyay.base.models.resource.resource_path, verbose_name='File')),
                ('link', models.URLField(blank=True, max_length=400, null=True, verbose_name='URL')),
                ('description', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Description')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resources', to='base.submission')),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QueuedMail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('to', models.CharField(blank=True, help_text='One email address or several addresses separated by commas.', max_length=1000, null=True, verbose_name='To')),
                ('reply_to', models.CharField(blank=True, help_text='By default, the organiser address is used as Reply-To.', max_length=1000, null=True, verbose_name='Reply-To')),
                ('cc', models.CharField(blank=True, help_text='One email address or several addresses separated by commas.', max_length=1000, null=True, verbose_name='CC')),
                ('bcc', models.CharField(blank=True, help_text='One email address or several addresses separated by commas.', max_length=1000, null=True, verbose_name='BCC')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('text', models.TextField(verbose_name='Text')),
                ('sent', models.DateTimeField(blank=True, null=True, verbose_name='Sent at')),
                ('locale', models.CharField(blank=True, max_length=32, null=True)),
                ('attachments', models.JSONField(blank=True, default=None, null=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='queued_mails', to='base.event')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mails', to='base.mailtemplate')),
                ('to_users', models.ManyToManyField(related_name='mails', to=settings.AUTH_USER_MODEL)),
                ('submissions', models.ManyToManyField(related_name='mails', to='base.submission')),
            ],
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True, verbose_name='Rating')),
                ('review', models.TextField(help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', verbose_name='Feedback')),
                ('speaker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedback', to=settings.AUTH_USER_MODEL, verbose_name='Speaker')),
                ('talk', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='feedback', to='base.submission', verbose_name='Session')),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubmissionComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('text', models.TextField(help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', verbose_name='Comment')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='base.submissioncomment')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='base.submission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('created',),
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubmissionFavouriteDeprecated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('talk_list', models.JSONField(blank=True, null=True, verbose_name='List favourite talk')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='submission_favorites', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': '"submission_submission_favourites"',
            },
        ),
        migrations.CreateModel(
            name='SubmissionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', i18nfield.fields.I18nCharField(max_length=100, verbose_name='name')),
                ('default_duration', models.PositiveIntegerField(default=30, help_text='Default duration in minutes', verbose_name='default duration')),
                ('deadline', models.DateTimeField(blank=True, help_text='If you want a different deadline than the global deadline for this session type, enter it here.', null=True, verbose_name='Deadline')),
                ('requires_access_code', models.BooleanField(default=False, help_text='This session type will only be shown to submitters with a matching access code.', verbose_name='Requires access code')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_types', to='base.event')),
            ],
            options={
                'ordering': ['default_duration'],
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='submission',
            name='submission_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='base.submissiontype', verbose_name='Session type'),
        ),
        migrations.CreateModel(
            name='CfP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('headline', i18nfield.fields.I18nCharField(blank=True, max_length=300, null=True, verbose_name='headline')),
                ('text', i18nfield.fields.I18nTextField(blank=True, help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', null=True, verbose_name='text')),
                ('deadline', models.DateTimeField(blank=True, help_text='Please put in the last date you want to accept proposals from users.', null=True, verbose_name='Deadline')),
                ('settings', models.JSONField(default=eventyay.base.models.cfp.default_settings)),
                ('fields', models.JSONField(default=eventyay.base.models.cfp.default_fields)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='base.event')),
                ('default_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='base.submissiontype', verbose_name='Default session type')),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubmitterAccessCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('code', models.CharField(db_index=True, max_length=255, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+$')], verbose_name='Access code')),
                ('valid_until', models.DateTimeField(blank=True, help_text='You can set or change this date later to invalidate the access code.', null=True, verbose_name='Valid until')),
                ('maximum_uses', models.PositiveIntegerField(blank=True, default=1, help_text='Numbers of times this access code can be used to submit a proposal. Leave empty for no limit.', null=True, verbose_name='Maximum uses')),
                ('redeemed', models.PositiveIntegerField(default=0, editable=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitter_access_codes', to='base.event')),
                ('submission_type', models.ForeignKey(blank=True, help_text='You can restrict the access code to a single session type, or leave it open for all session types.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitter_access_codes', to='base.submissiontype', verbose_name='Session Type')),
            ],
            bases=(eventyay.base.models.mixins.GenerateCode, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='submission',
            name='access_code',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='base.submitteraccesscode'),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('tag', models.CharField(max_length=50)),
                ('description', i18nfield.fields.I18nTextField(blank=True, verbose_name='Description')),
                ('color', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator('#([0-9A-Fa-f]{3}){1,2}')], verbose_name='Color')),
                ('is_public', models.BooleanField(default=False, help_text='Tags are currently only in use for organisers and reviewers. They will be visible publicly in a future release of pretalx.', verbose_name='Show tag publicly')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tags', to='base.event')),
            ],
            options={
                'unique_together': {('event', 'tag')},
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='submission',
            name='tags',
            field=models.ManyToManyField(related_name='submissions', to='base.tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='TalkQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('variant', models.CharField(choices=[('number', 'Number'), ('string', 'Text (one-line)'), ('text', 'Multi-line text'), ('url', 'URL'), ('date', 'Date'), ('datetime', 'Date and time'), ('boolean', 'Yes/No'), ('file', 'File upload'), ('choices', 'Choose one from a list'), ('multiple_choice', 'Choose multiple from a list')], default='string', max_length=15)),
                ('target', models.CharField(choices=[('submission', 'per proposal'), ('speaker', 'per speaker'), ('reviewer', 'for reviewers')], default='submission', help_text='Do you require an answer from every speaker or for every session?', max_length=10, verbose_name='Field type')),
                ('deadline', models.DateTimeField(blank=True, help_text='Set a deadline to make this field required after the given date.', null=True, verbose_name='Deadline')),
                ('freeze_after', models.DateTimeField(blank=True, help_text='Set a deadline to stop changes to responses after the given date.', null=True, verbose_name='freeze after')),
                ('question_required', models.CharField(choices=[('optional', 'always optional'), ('required', 'always required'), ('after_deadline', 'required after a deadline')], default='optional', max_length=14, verbose_name='Field required')),
                ('question', i18nfield.fields.I18nCharField(max_length=800, verbose_name='Label')),
                ('help_text', i18nfield.fields.I18nCharField(blank=True, help_text='Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', max_length=800, null=True, verbose_name='help text')),
                ('default_answer', models.TextField(blank=True, null=True, verbose_name='default answer')),
                ('position', models.IntegerField(default=0)),
                ('active', models.BooleanField(default=True, help_text='Inactive fields will no longer be shown.', verbose_name='active')),
                ('contains_personal_data', models.BooleanField(default=True, help_text='If a user deletes their account, responses containing personal data will be removed, too.', verbose_name='Responses contain personal data')),
                ('min_length', models.PositiveIntegerField(blank=True, help_text='Minimum allowed text in characters or words (set in CfP settings).', null=True, verbose_name='Minimum text length')),
                ('max_length', models.PositiveIntegerField(blank=True, help_text='Maximum allowed text length in characters or words (set in CfP settings).', null=True, verbose_name='Maximum text length')),
                ('min_number', models.DecimalField(blank=True, decimal_places=6, max_digits=16, null=True, verbose_name='Minimum value')),
                ('max_number', models.DecimalField(blank=True, decimal_places=6, max_digits=16, null=True, verbose_name='Maximum value')),
                ('min_date', models.DateField(blank=True, null=True, verbose_name='Minimum value')),
                ('max_date', models.DateField(blank=True, null=True, verbose_name='Maximum value')),
                ('min_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Minimum value')),
                ('max_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Maximum value')),
                ('is_public', models.BooleanField(default=False, help_text='Responses will be shown on session or speaker pages as appropriate. Please note that you cannot make a field public after the first answers have been given, to allow speakers explicit consent before publishing information.', verbose_name='Publish answers')),
                ('is_visible_to_reviewers', models.BooleanField(default=True, help_text='Should responses to this field be shown to reviewers? This is helpful if you want to collect personal information, but use anonymous reviews.', verbose_name='Show answers to reviewers')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='talkquestions', to='base.event')),
                ('submission_types', models.ManyToManyField(blank=True, help_text='You can limit this field to some session types. Leave empty to apply to all session types.', related_name='questions', to='base.submissiontype', verbose_name='Session Types')),
            ],
            options={
                'ordering': ('position', 'id'),
            },
            bases=(eventyay.base.models.mixins.OrderedModel, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AnswerOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('answer', i18nfield.fields.I18nCharField(verbose_name='Response')),
                ('position', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='options', to='base.talkquestion')),
            ],
            options={
                'ordering': ('position', 'id'),
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('answer', models.TextField()),
                ('answer_file', models.FileField(blank=True, null=True, upload_to=eventyay.base.models.question.answer_file_path)),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='answers', to=settings.AUTH_USER_MODEL)),
                ('options', models.ManyToManyField(related_name='answers', to='base.answeroption')),
                ('review', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='answers', to='base.review')),
                ('submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='answers', to='base.submission')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='answers', to='base.talkquestion')),
            ],
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TalkSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_visible', models.BooleanField(default=False)),
                ('start', models.DateTimeField(help_text='When the talk starts, if it is currently scheduled', null=True, verbose_name='Start')),
                ('end', models.DateTimeField(help_text='When the talk ends, if it is currently scheduled', null=True, verbose_name='End')),
                ('description', i18nfield.fields.I18nCharField(null=True)),
                ('room', models.ForeignKey(blank=True, help_text='The room this talk is scheduled in, if any', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='talks', to='base.room', verbose_name='Room')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='talks', to='base.schedule')),
                ('submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='slots', to='base.submission')),
            ],
            options={
                'ordering': ('start',),
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TaxRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', i18nfield.fields.I18nCharField(help_text='Should be short, e.g. "VAT"', max_length=190, verbose_name='Name')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Tax rate')),
                ('price_includes_tax', models.BooleanField(default=True, verbose_name='The configured product prices include the tax amount')),
                ('eu_reverse_charge', models.BooleanField(default=False, help_text='Not recommended. Most events will NOT be qualified for reverse charge since the place of taxation is the location of the event. This option disables charging VAT for all customers outside the EU and for business customers in different EU countries who entered a valid EU VAT ID. Only enable this option after consulting a tax counsel. No warranty given for correct tax calculation. USE AT YOUR OWN RISK.', verbose_name='Use EU reverse charge taxation rules')),
                ('home_country', eventyay.helpers.countries.FastCountryField(blank=True, countries=eventyay.helpers.countries.CachedCountries, help_text='Your country of residence. This is the country the EU reverse charge rule will not apply in, if configured above.', max_length=2, verbose_name='Merchant country')),
                ('custom_rules', models.TextField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_rules', to='base.event')),
            ],
            options={
                'ordering': ('event', 'rate', 'id'),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='product',
            name='tax_rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.taxrule', verbose_name='Sales tax'),
        ),
        migrations.AddField(
            model_name='orderposition',
            name='tax_rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.taxrule'),
        ),
        migrations.AddField(
            model_name='orderfee',
            name='tax_rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.taxrule'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190, verbose_name='Team name')),
                ('all_events', models.BooleanField(default=False, verbose_name='All events (including newly created ones)')),
                ('can_create_events', models.BooleanField(default=False, verbose_name='Can create events')),
                ('can_change_teams', models.BooleanField(default=False, verbose_name='Can change teams and permissions')),
                ('can_change_organizer_settings', models.BooleanField(default=False, help_text='Someone with this setting can get access to most data of all of your events, i.e. via privacy reports, so be careful who you add to this team!', verbose_name='Can change organizer settings')),
                ('can_manage_gift_cards', models.BooleanField(default=False, verbose_name='Can manage gift cards')),
                ('can_change_event_settings', models.BooleanField(default=False, verbose_name='Can change event settings')),
                ('can_change_items', models.BooleanField(default=False, verbose_name='Can change product settings')),
                ('can_view_orders', models.BooleanField(default=False, verbose_name='Can view orders')),
                ('can_change_orders', models.BooleanField(default=False, verbose_name='Can change orders')),
                ('can_checkin_orders', models.BooleanField(default=False, help_text='This includes searching for attendees, which can be used to obtain personal information about attendees. Users with "can change orders" can also perform check-ins.', verbose_name='Can perform check-ins')),
                ('can_view_vouchers', models.BooleanField(default=False, verbose_name='Can view vouchers')),
                ('can_change_vouchers', models.BooleanField(default=False, verbose_name='Can change vouchers')),
                ('limit_events', models.ManyToManyField(blank=True, to='base.event', verbose_name='Limit to events')),
                ('members', models.ManyToManyField(related_name='teams', to=settings.AUTH_USER_MODEL, verbose_name='Team members')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='base.organizer')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='TeamAPIToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=190)),
                ('active', models.BooleanField(default=True)),
                ('token', models.CharField(default=eventyay.base.models.organizer.generate_api_token, max_length=64)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='base.team')),
            ],
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True)),
                ('datetime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('action_type', models.CharField(max_length=255)),
                ('data', models.TextField(default='{}')),
                ('visible', models.BooleanField(default=True)),
                ('shredded', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eventyay_log_entries', to='contenttypes.contenttype')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.device')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.event')),
                ('oauth_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.OAUTH2_PROVIDER_APPLICATION_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='eventyay_log_entries', to=settings.AUTH_USER_MODEL)),
                ('api_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.teamapitoken')),
            ],
            options={
                'ordering': ('-datetime', '-id'),
            },
        ),
        migrations.CreateModel(
            name='TeamInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('token', models.CharField(blank=True, default=eventyay.base.models.organizer.generate_invite_token, max_length=64, null=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invites', to='base.team')),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', i18nfield.fields.I18nCharField(max_length=200, verbose_name='Name')),
                ('description', i18nfield.fields.I18nTextField(blank=True, verbose_name='Description')),
                ('color', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator('#([0-9A-Fa-f]{3}){1,2}')], verbose_name='Color')),
                ('position', models.PositiveIntegerField(blank=True, help_text='The position field is used to determine the order that tracks are displayed in (lowest first).', null=True)),
                ('requires_access_code', models.BooleanField(default=False, help_text='This track will only be shown to submitters with a matching access code.', verbose_name='Requires access code')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tracks', to='base.event')),
            ],
            options={
                'ordering': ('position',),
            },
            bases=(eventyay.base.models.mixins.OrderedModel, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='talkquestion',
            name='tracks',
            field=models.ManyToManyField(blank=True, help_text='You can limit this field to some tracks. Leave empty to apply to all tracks.', related_name='questions', to='base.track', verbose_name='Tracks'),
        ),
        migrations.AddField(
            model_name='submitteraccesscode',
            name='track',
            field=models.ForeignKey(blank=True, help_text='You can restrict the access code to a single track, or leave it open for all tracks.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitter_access_codes', to='base.track', verbose_name='Track'),
        ),
        migrations.AddField(
            model_name='submission',
            name='track',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='base.track', verbose_name='Track'),
        ),
        migrations.AddField(
            model_name='reviewscorecategory',
            name='limit_tracks',
            field=models.ManyToManyField(blank=True, help_text='Leave empty to use this category for all tracks.', to='base.track', verbose_name='Limit to tracks'),
        ),
        migrations.CreateModel(
            name='U2FDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The human-readable name of this device.', max_length=64)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('json_data', models.TextField()),
                ('user', models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, default=eventyay.base.models.vouchers.generate_code, max_length=255, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='Voucher code')),
                ('max_usages', models.PositiveIntegerField(default=1, help_text='Number of times this voucher can be redeemed.', verbose_name='Maximum usages')),
                ('redeemed', models.PositiveIntegerField(default=0, verbose_name='Redeemed')),
                ('budget', models.DecimalField(blank=True, decimal_places=2, help_text='This is the maximum monetary amount that will be discounted using this voucher across all usages. If this is sum reached, the voucher can no longer be used.', max_digits=10, null=True, verbose_name='Maximum discount budget')),
                ('valid_until', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Valid until')),
                ('block_quota', models.BooleanField(default=False, help_text="If activated, this voucher will be substracted from the affected product's quotas, such that it is guaranteed that anyone with this voucher code does receive a ticket.", verbose_name='Reserve ticket from quota')),
                ('allow_ignore_quota', models.BooleanField(default=False, help_text='If activated, a holder of this voucher code can buy tickets, even if there are none left.', verbose_name='Allow to bypass quota')),
                ('price_mode', models.CharField(choices=[('none', 'No effect'), ('set', 'Set product price to'), ('subtract', 'Subtract from product price'), ('percent', 'Reduce product price by (%)')], default='none', max_length=100, verbose_name='Price mode')),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Voucher value')),
                ('tag', models.CharField(blank=True, db_index=True, help_text='You can use this field to group multiple vouchers together. If you enter the same value for multiple vouchers, you can get statistics on how many of them have been redeemed etc.', max_length=255, verbose_name='Tag')),
                ('comment', models.TextField(blank=True, help_text='The text entered in this field will not be visible to the user and is available for your convenience.', verbose_name='Comment')),
                ('show_hidden_products', models.BooleanField(default=True, verbose_name='Shows hidden products that match this voucher')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='base.event', verbose_name='Event')),
                ('product', models.ForeignKey(blank=True, help_text="This product is added to the user's cart if the voucher is redeemed.", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='base.product', verbose_name='Product')),
                ('quota', models.ForeignKey(blank=True, help_text='If enabled, the voucher is valid for any product affected by this quota.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='base.quota', verbose_name='Quota')),
                ('seat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='base.seat', verbose_name='Specific seat')),
                ('subevent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.subevent', verbose_name='Date')),
                ('variation', models.ForeignKey(blank=True, help_text='This variation of the product select above is being used.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vouchers', to='base.productvariation', verbose_name='Product variation')),
            ],
            options={
                'verbose_name': 'Voucher',
                'verbose_name_plural': 'Vouchers',
                'ordering': ('code',),
                'unique_together': {('event', 'code')},
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AddField(
            model_name='orderposition',
            name='voucher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.voucher'),
        ),
        migrations.CreateModel(
            name='CartPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_before_voucher', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('attendee_name_cached', models.CharField(blank=True, help_text='Empty, if this product is not an admission ticket', max_length=255, null=True, verbose_name='Attendee name')),
                ('attendee_name_parts', models.JSONField(blank=True, default=dict)),
                ('attendee_email', models.EmailField(blank=True, help_text='Empty, if this product is not an admission ticket', max_length=254, null=True, verbose_name='Attendee email')),
                ('meta_info', models.TextField(blank=True, null=True, verbose_name='Meta information')),
                ('company', models.CharField(blank=True, max_length=255, null=True, verbose_name='Company name')),
                ('job_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Job Title')),
                ('street', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('zipcode', models.CharField(blank=True, max_length=30, null=True, verbose_name='ZIP code')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City')),
                ('country', eventyay.helpers.countries.FastCountryField(blank=True, countries=eventyay.helpers.countries.CachedCountries, max_length=2, null=True, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State')),
                ('cart_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Cart ID (e.g. session key)')),
                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('expires', models.DateTimeField(db_index=True, verbose_name='Expiration date')),
                ('includes_tax', models.BooleanField(default=True)),
                ('override_tax_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_bundled', models.BooleanField(default=False)),
                ('addon_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='addons', to='base.cartposition')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.event', verbose_name='Event')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.product', verbose_name='Product')),
                ('variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.productvariation', verbose_name='Variation')),
                ('seat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.seat')),
                ('subevent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.subevent', verbose_name='Date')),
                ('voucher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.voucher')),
            ],
            options={
                'verbose_name': 'Cart position',
                'verbose_name_plural': 'Cart positions',
            },
        ),
        migrations.CreateModel(
            name='WaitingListEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='On waiting list since')),
                ('name_cached', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('name_parts', models.JSONField(blank=True, default=dict)),
                ('email', models.EmailField(max_length=254, verbose_name='E-mail address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone number')),
                ('locale', models.CharField(default='en', max_length=190)),
                ('priority', models.IntegerField(default=0)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitinglistentries', to='base.event', verbose_name='Event')),
                ('product', models.ForeignKey(help_text='The product the user waits for.', on_delete=django.db.models.deletion.CASCADE, related_name='waitinglistentries', to='base.product', verbose_name='Product')),
                ('subevent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.subevent', verbose_name='Date')),
                ('variation', models.ForeignKey(blank=True, help_text='The variation of the product selected above.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='waitinglistentries', to='base.productvariation', verbose_name='Product variation')),
                ('voucher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='waitinglistentries', to='base.voucher', verbose_name='Assigned voucher')),
            ],
            options={
                'verbose_name': 'Waiting list entry',
                'verbose_name_plural': 'Waiting list entries',
                'ordering': ('-priority', 'created'),
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='WebAuthnDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The human-readable name of this device.', max_length=64)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('credential_id', models.CharField(blank=True, max_length=255, null=True)),
                ('rp_id', models.CharField(blank=True, max_length=255, null=True)),
                ('icon_url', models.CharField(blank=True, max_length=255, null=True)),
                ('ukey', models.TextField(null=True)),
                ('pub_key', models.TextField(null=True)),
                ('sign_count', models.IntegerField(default=0)),
                ('user', models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventMetaValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta_values', to='base.event')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_values', to='base.eventmetaproperty')),
            ],
            options={
                'unique_together': {('event', 'property')},
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=255)),
                ('method', models.CharField(choices=[('mail', 'E-mail')], max_length=255)),
                ('enabled', models.BooleanField(default=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to='base.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'action_type', 'event', 'method')},
            },
        ),
        migrations.CreateModel(
            name='ProductAddOn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_count', models.PositiveIntegerField(default=0, verbose_name='Minimum number')),
                ('max_count', models.PositiveIntegerField(default=1, verbose_name='Maximum number')),
                ('price_included', models.BooleanField(default=False, help_text='If selected, adding add-ons to this ticket is free, even if the add-ons would normally cost money individually.', verbose_name='Add-Ons are included in the price')),
                ('multi_allowed', models.BooleanField(default=False, verbose_name='Allow the same product to be selected multiple times')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Position')),
                ('base_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addons', to='base.product')),
                ('addon_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addon_to', to='base.productcategory', verbose_name='Category')),
            ],
            options={
                'ordering': ('position', 'pk'),
                'unique_together': {('base_product', 'addon_category')},
            },
        ),
        migrations.CreateModel(
            name='ProductMetaValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta_values', to='base.product')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_values', to='base.productmetaproperty')),
            ],
            options={
                'unique_together': {('product', 'property')},
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField()),
                ('file', models.FileField(blank=True, max_length=255, null=True, upload_to=eventyay.base.models.orders.answerfile_name)),
                ('cartposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='base.cartposition')),
                ('orderposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='base.orderposition')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='base.question')),
                ('options', models.ManyToManyField(blank=True, related_name='answers', to='base.questionoption')),
            ],
            options={
                'unique_together': {('cartposition', 'question'), ('orderposition', 'question')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('organizer', 'slug')},
        ),
        migrations.CreateModel(
            name='SubEventMetaValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subevent_values', to='base.eventmetaproperty')),
                ('subevent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta_values', to='base.subevent')),
            ],
            options={
                'unique_together': {('subevent', 'property')},
            },
            bases=(models.Model, eventyay.base.models.base.LoggingMixin),
        ),
        migrations.AlterUniqueTogether(
            name='speakerrole',
            unique_together={('submission', 'user')},
        ),
        migrations.CreateModel(
            name='SubmissionFavourite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favourites', to='base.submission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_favourites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'submission')},
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='submitteraccesscode',
            unique_together={('event', 'code')},
        ),
    ]