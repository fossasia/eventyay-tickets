# Generated by Django 5.2.5 on 2025-08-26 20:59

import django.core.serializers.json
import django.core.validators
import django.db.models.deletion
import eventyay.base.models.auth
import eventyay.base.models.bbb
import eventyay.base.models.event
import eventyay.base.models.exhibitor
import eventyay.base.models.poster
import eventyay.base.models.room
import eventyay.base.models.storage_model
import eventyay.core.utils.json
import i18nfield.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("base", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StreamingServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=300)),
                ("token_secret", models.CharField(max_length=300)),
                (
                    "url_input",
                    models.CharField(
                        default="rtmp://server/app/{name}?token={token}", max_length=300
                    ),
                ),
                (
                    "url_output",
                    models.CharField(
                        default="https://server/hls/{name}.m3u8", max_length=300
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.AlterModelOptions(
            name="room",
            options={"ordering": ("position", "sorting_priority", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="event_settingsstore",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="globalsettings_settingsstore",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="globalsettingsobject_settingsstore",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="organizer_settingsstore",
            unique_together=set(),
        ),
        migrations.AddField(
            model_name="event",
            name="config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="event",
            name="domain",
            field=models.CharField(
                blank=True,
                max_length=250,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        regex="^[a-z0-9-.:]+(/[a-zA-Z0-9-_./]*)?$"
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="external_auth_url",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="event",
            name="roles",
            field=models.JSONField(
                blank=True,
                default=eventyay.base.models.event.default_roles,
                encoder=eventyay.core.utils.json.CustomJSONEncoder,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="trait_grants",
            field=models.JSONField(
                blank=True, default=eventyay.base.models.event.default_grants, null=True
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="room",
            name="force_join",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="room",
            name="import_id",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="room",
            name="module_config",
            field=models.JSONField(
                default=eventyay.base.models.room.empty_module_config, null=True
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="picture",
            field=models.FileField(blank=True, null=True, upload_to=""),
        ),
        migrations.AddField(
            model_name="room",
            name="pretalx_id",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="room",
            name="schedule_data",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="room",
            name="sorting_priority",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="room",
            name="trait_grants",
            field=models.JSONField(
                blank=True, default=eventyay.base.models.room.default_grants, null=True
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="version",
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name="user",
            name="blocked_users",
            field=models.ManyToManyField(
                related_name="blocked_by", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="client_id",
            field=models.CharField(
                blank=True, db_index=True, max_length=200, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="client_state",
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="user",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="user",
            name="event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.event",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="moderation_state",
            field=models.CharField(
                choices=[("", "None"), ("silenced", "Silenced"), ("banned", "Banned")],
                default="",
                max_length=8,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="pretalx_id",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="profile",
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="user",
            name="show_publicly",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="user",
            name="social_login_id_linkedin",
            field=models.CharField(
                blank=True, db_index=True, max_length=190, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="social_login_id_twitter",
            field=models.CharField(
                blank=True, db_index=True, max_length=190, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="token_id",
            field=models.CharField(
                blank=True, db_index=True, max_length=200, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="traits",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name="user",
            name="type",
            field=models.CharField(
                choices=[
                    ("person", "Person"),
                    ("kiosk", "Kiosk"),
                    ("anon", "Anonymous"),
                ],
                default="person",
                max_length=8,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="version",
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AlterField(
            model_name="event",
            name="content_locale_array",
            field=models.TextField(default="en"),
        ),
        migrations.AlterField(
            model_name="event",
            name="currency",
            field=models.CharField(
                choices=[
                    ("AED", "AED - UAE Dirham"),
                    ("AFN", "AFN - Afghani"),
                    ("ALL", "ALL - Lek"),
                    ("AMD", "AMD - Armenian Dram"),
                    ("ANG", "ANG - Netherlands Antillean Guilder"),
                    ("AOA", "AOA - Kwanza"),
                    ("ARS", "ARS - Argentine Peso"),
                    ("AUD", "AUD - Australian Dollar"),
                    ("AWG", "AWG - Aruban Florin"),
                    ("AZN", "AZN - Azerbaijan Manat"),
                    ("BAM", "BAM - Convertible Mark"),
                    ("BBD", "BBD - Barbados Dollar"),
                    ("BDT", "BDT - Taka"),
                    ("BGN", "BGN - Bulgarian Lev"),
                    ("BHD", "BHD - Bahraini Dinar"),
                    ("BIF", "BIF - Burundi Franc"),
                    ("BMD", "BMD - Bermudian Dollar"),
                    ("BND", "BND - Brunei Dollar"),
                    ("BOB", "BOB - Boliviano"),
                    ("BOV", "BOV - Mvdol"),
                    ("BRL", "BRL - Brazilian Real"),
                    ("BSD", "BSD - Bahamian Dollar"),
                    ("BTN", "BTN - Ngultrum"),
                    ("BWP", "BWP - Pula"),
                    ("BYN", "BYN - Belarusian Ruble"),
                    ("BZD", "BZD - Belize Dollar"),
                    ("CAD", "CAD - Canadian Dollar"),
                    ("CDF", "CDF - Congolese Franc"),
                    ("CHE", "CHE - WIR Euro"),
                    ("CHF", "CHF - Swiss Franc"),
                    ("CHW", "CHW - WIR Franc"),
                    ("CLF", "CLF - Unidad de Fomento"),
                    ("CLP", "CLP - Chilean Peso"),
                    ("CNY", "CNY - Yuan Renminbi"),
                    ("COP", "COP - Colombian Peso"),
                    ("COU", "COU - Unidad de Valor Real"),
                    ("CRC", "CRC - Costa Rican Colon"),
                    ("CUC", "CUC - Peso Convertible"),
                    ("CUP", "CUP - Cuban Peso"),
                    ("CVE", "CVE - Cabo Verde Escudo"),
                    ("CZK", "CZK - Czech Koruna"),
                    ("DJF", "DJF - Djibouti Franc"),
                    ("DKK", "DKK - Danish Krone"),
                    ("DOP", "DOP - Dominican Peso"),
                    ("DZD", "DZD - Algerian Dinar"),
                    ("EGP", "EGP - Egyptian Pound"),
                    ("ERN", "ERN - Nakfa"),
                    ("ETB", "ETB - Ethiopian Birr"),
                    ("EUR", "EUR - Euro"),
                    ("FJD", "FJD - Fiji Dollar"),
                    ("FKP", "FKP - Falkland Islands Pound"),
                    ("GBP", "GBP - Pound Sterling"),
                    ("GEL", "GEL - Lari"),
                    ("GHS", "GHS - Ghana Cedi"),
                    ("GIP", "GIP - Gibraltar Pound"),
                    ("GMD", "GMD - Dalasi"),
                    ("GNF", "GNF - Guinean Franc"),
                    ("GTQ", "GTQ - Quetzal"),
                    ("GYD", "GYD - Guyana Dollar"),
                    ("HKD", "HKD - Hong Kong Dollar"),
                    ("HNL", "HNL - Lempira"),
                    ("HRK", "HRK - Kuna"),
                    ("HTG", "HTG - Gourde"),
                    ("HUF", "HUF - Forint"),
                    ("IDR", "IDR - Rupiah"),
                    ("ILS", "ILS - New Israeli Sheqel"),
                    ("INR", "INR - Indian Rupee"),
                    ("IQD", "IQD - Iraqi Dinar"),
                    ("IRR", "IRR - Iranian Rial"),
                    ("ISK", "ISK - Iceland Krona"),
                    ("JMD", "JMD - Jamaican Dollar"),
                    ("JOD", "JOD - Jordanian Dinar"),
                    ("JPY", "JPY - Yen"),
                    ("KES", "KES - Kenyan Shilling"),
                    ("KGS", "KGS - Som"),
                    ("KHR", "KHR - Riel"),
                    ("KMF", "KMF - Comorian Franc"),
                    ("KPW", "KPW - North Korean Won"),
                    ("KRW", "KRW - Won"),
                    ("KWD", "KWD - Kuwaiti Dinar"),
                    ("KYD", "KYD - Cayman Islands Dollar"),
                    ("KZT", "KZT - Tenge"),
                    ("LAK", "LAK - Lao Kip"),
                    ("LBP", "LBP - Lebanese Pound"),
                    ("LKR", "LKR - Sri Lanka Rupee"),
                    ("LRD", "LRD - Liberian Dollar"),
                    ("LSL", "LSL - Loti"),
                    ("LYD", "LYD - Libyan Dinar"),
                    ("MAD", "MAD - Moroccan Dirham"),
                    ("MDL", "MDL - Moldovan Leu"),
                    ("MGA", "MGA - Malagasy Ariary"),
                    ("MKD", "MKD - Denar"),
                    ("MMK", "MMK - Kyat"),
                    ("MNT", "MNT - Tugrik"),
                    ("MOP", "MOP - Pataca"),
                    ("MRU", "MRU - Ouguiya"),
                    ("MUR", "MUR - Mauritius Rupee"),
                    ("MVR", "MVR - Rufiyaa"),
                    ("MWK", "MWK - Malawi Kwacha"),
                    ("MXN", "MXN - Mexican Peso"),
                    ("MXV", "MXV - Mexican Unidad de Inversion (UDI)"),
                    ("MYR", "MYR - Malaysian Ringgit"),
                    ("MZN", "MZN - Mozambique Metical"),
                    ("NAD", "NAD - Namibia Dollar"),
                    ("NGN", "NGN - Naira"),
                    ("NIO", "NIO - Cordoba Oro"),
                    ("NOK", "NOK - Norwegian Krone"),
                    ("NPR", "NPR - Nepalese Rupee"),
                    ("NZD", "NZD - New Zealand Dollar"),
                    ("OMR", "OMR - Rial Omani"),
                    ("PAB", "PAB - Balboa"),
                    ("PEN", "PEN - Sol"),
                    ("PGK", "PGK - Kina"),
                    ("PHP", "PHP - Philippine Peso"),
                    ("PKR", "PKR - Pakistan Rupee"),
                    ("PLN", "PLN - Zloty"),
                    ("PYG", "PYG - Guarani"),
                    ("QAR", "QAR - Qatari Rial"),
                    ("RON", "RON - Romanian Leu"),
                    ("RSD", "RSD - Serbian Dinar"),
                    ("RUB", "RUB - Russian Ruble"),
                    ("RWF", "RWF - Rwanda Franc"),
                    ("SAR", "SAR - Saudi Riyal"),
                    ("SBD", "SBD - Solomon Islands Dollar"),
                    ("SCR", "SCR - Seychelles Rupee"),
                    ("SDG", "SDG - Sudanese Pound"),
                    ("SEK", "SEK - Swedish Krona"),
                    ("SGD", "SGD - Singapore Dollar"),
                    ("SHP", "SHP - Saint Helena Pound"),
                    ("SLE", "SLE - Leone"),
                    ("SLL", "SLL - Leone"),
                    ("SOS", "SOS - Somali Shilling"),
                    ("SRD", "SRD - Surinam Dollar"),
                    ("SSP", "SSP - South Sudanese Pound"),
                    ("STN", "STN - Dobra"),
                    ("SVC", "SVC - El Salvador Colon"),
                    ("SYP", "SYP - Syrian Pound"),
                    ("SZL", "SZL - Lilangeni"),
                    ("THB", "THB - Baht"),
                    ("TJS", "TJS - Somoni"),
                    ("TMT", "TMT - Turkmenistan New Manat"),
                    ("TND", "TND - Tunisian Dinar"),
                    ("TOP", "TOP - Pa’anga"),
                    ("TRY", "TRY - Turkish Lira"),
                    ("TTD", "TTD - Trinidad and Tobago Dollar"),
                    ("TWD", "TWD - New Taiwan Dollar"),
                    ("TZS", "TZS - Tanzanian Shilling"),
                    ("UAH", "UAH - Hryvnia"),
                    ("UGX", "UGX - Uganda Shilling"),
                    ("USD", "USD - US Dollar"),
                    ("USN", "USN - US Dollar (Next day)"),
                    ("UYI", "UYI - Uruguay Peso en Unidades Indexadas (UI)"),
                    ("UYU", "UYU - Peso Uruguayo"),
                    ("UYW", "UYW - Unidad Previsional"),
                    ("UZS", "UZS - Uzbekistan Sum"),
                    ("VED", "VED - Bolívar Soberano"),
                    ("VES", "VES - Bolívar Soberano"),
                    ("VND", "VND - Dong"),
                    ("VUV", "VUV - Vatu"),
                    ("WST", "WST - Tala"),
                    ("XAF", "XAF - CFA Franc BEAC"),
                    ("XAG", "XAG - Silver"),
                    ("XAU", "XAU - Gold"),
                    ("XBA", "XBA - Bond Markets Unit European Composite Unit (EURCO)"),
                    (
                        "XBB",
                        "XBB - Bond Markets Unit European Monetary Unit (E.M.U.-6)",
                    ),
                    (
                        "XBC",
                        "XBC - Bond Markets Unit European Unit of Account 9 (E.U.A.-9)",
                    ),
                    (
                        "XBD",
                        "XBD - Bond Markets Unit European Unit of Account 17 (E.U.A.-17)",
                    ),
                    ("XCD", "XCD - East Caribbean Dollar"),
                    ("XDR", "XDR - SDR (Special Drawing Right)"),
                    ("XOF", "XOF - CFA Franc BCEAO"),
                    ("XPD", "XPD - Palladium"),
                    ("XPF", "XPF - CFP Franc"),
                    ("XPT", "XPT - Platinum"),
                    ("XSU", "XSU - Sucre"),
                    ("XTS", "XTS - Codes specifically reserved for testing purposes"),
                    ("XUA", "XUA - ADB Unit of Account"),
                    (
                        "XXX",
                        "XXX - The codes assigned for transactions where no currency is involved",
                    ),
                    ("YER", "YER - Yemeni Rial"),
                    ("ZAR", "ZAR - Rand"),
                    ("ZMW", "ZMW - Zambian Kwacha"),
                    ("ZWL", "ZWL - Zimbabwe Dollar"),
                ],
                default="USD",
                max_length=10,
                verbose_name="Event currency",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="locale",
            field=models.CharField(
                choices=[("en", "English"), ("de", "Deutsch")],
                default="en",
                max_length=32,
                verbose_name="Default language",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="locale_array",
            field=models.TextField(default="en"),
        ),
        migrations.AlterField(
            model_name="logentry",
            name="object_id",
            field=models.JSONField(
                encoder=django.core.serializers.json.DjangoJSONEncoder
            ),
        ),
        migrations.AlterField(
            model_name="room",
            name="description",
            field=models.TextField(blank=True, null=True, verbose_name="Description"),
        ),
        migrations.AlterField(
            model_name="room",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="room",
            name="name",
            field=i18nfield.fields.I18nCharField(max_length=300, verbose_name="Name"),
        ),
        migrations.AlterField(
            model_name="submission",
            name="content_locale",
            field=models.CharField(
                default="en", max_length=32, verbose_name="Language"
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="last_login",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="locale",
            field=models.CharField(
                choices=[("en", "English"), ("de", "Deutsch")],
                default="en",
                max_length=50,
                verbose_name="Language",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="timezone",
            field=models.CharField(
                default="Europe/Berlin", max_length=100, verbose_name="Timezone"
            ),
        ),
        migrations.CreateModel(
            name="Announcement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("text", models.TextField()),
                ("show_until", models.DateTimeField(null=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=8,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="announcements",
                        to="base.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnonymousInvite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "short_token",
                    models.CharField(
                        db_index=True,
                        default=eventyay.base.models.room.generate_short_token,
                        max_length=150,
                        unique=True,
                    ),
                ),
                ("expires", models.DateTimeField()),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anonymous_invites",
                        to="base.event",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anonymous_invites",
                        to="base.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("type", models.CharField(max_length=255)),
                ("data", models.JSONField()),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audits",
                        to="base.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BBBServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("url", models.URLField()),
                ("secret", models.CharField(max_length=300)),
                ("rooms_only", models.BooleanField(default=False)),
                ("cost", models.IntegerField(default=0)),
                (
                    "event_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="base.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BBBCall",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "meeting_id",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "attendee_pw",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "moderator_pw",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "guest_policy",
                    models.CharField(default="ALWAYS_ACCEPT", max_length=50),
                ),
                ("voice_bridge", models.CharField(blank=True, max_length=5, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbb_calls",
                        to="base.event",
                    ),
                ),
                (
                    "invited_members",
                    models.ManyToManyField(
                        related_name="bbb_invites", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "room",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbb_call",
                        to="base.room",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.bbbserver"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=300, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channels",
                        to="base.event",
                    ),
                ),
                (
                    "room",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel",
                        to="base.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatEvent",
            fields=[
                ("id", models.BigIntegerField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("edited", models.DateTimeField(null=True)),
                ("event_type", models.CharField(max_length=200)),
                ("content", models.JSONField()),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_events",
                        to="base.channel",
                    ),
                ),
                (
                    "replaces",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replaced_by",
                        to="base.chatevent",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="chat_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatEventNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chat_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="base.chatevent",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Event Notification",
                "verbose_name_plural": "Chat Event Notifications",
            },
        ),
        migrations.CreateModel(
            name="ChatEventReaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reaction", models.TextField()),
                (
                    "chat_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="base.chatevent",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventGrant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.CharField(max_length=200)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_grants",
                        to="base.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_grants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventPlannedUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField()),
                ("end", models.DateField()),
                ("attendees", models.PositiveIntegerField()),
                ("notes", models.TextField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="planned_usages",
                        to="base.event",
                    ),
                ),
            ],
            options={
                "ordering": ("start",),
            },
        ),
        migrations.CreateModel(
            name="Exhibitor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=80, null=True)),
                ("tagline", models.CharField(max_length=250, null=True)),
                ("short_text", models.TextField(max_length=500, null=True)),
                ("logo", models.URLField(blank=True, null=True)),
                ("banner_list", models.URLField(blank=True, null=True)),
                ("banner_detail", models.URLField(blank=True, null=True)),
                ("contact_enabled", models.BooleanField(default=True)),
                ("text_legacy", models.TextField(null=True)),
                (
                    "text_content",
                    models.JSONField(
                        default=eventyay.base.models.exhibitor.default_text
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        choices=[("1x1", "S"), ("3x1", "M"), ("3x3", "L")],
                        default="1x1",
                        max_length=3,
                    ),
                ),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitors",
                        to="base.event",
                    ),
                ),
                (
                    "highlighted_room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="highlighted_by_exhibitors",
                        to="base.room",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitors",
                        to="base.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContactRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("missed", "Missed"),
                            ("answered", "Answered"),
                        ],
                        default="open",
                        max_length=8,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "answered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_answered_contact_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_contact_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_requests",
                        to="base.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[("profile", "Profile"), ("download", "Download")],
                        default="profile",
                        max_length=32,
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="base.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorSocialMediaLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_media_links",
                        to="base.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="base.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitor_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JanusServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("url", models.CharField(max_length=200)),
                ("room_create_key", models.CharField(max_length=300)),
                (
                    "event_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="base.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Poll",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("open", "Open"),
                            ("closed", "Closed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=8,
                    ),
                ),
                (
                    "poll_type",
                    models.CharField(
                        choices=[("choice", "Choice"), ("multi", "Multi Choice")],
                        default="choice",
                        max_length=6,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_pinned", models.BooleanField(default=False)),
                ("cached_results", models.JSONField(blank=True, null=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polls",
                        to="base.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PollOption",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("order", models.IntegerField(default=1)),
                ("content", models.TextField()),
                (
                    "poll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="base.poll",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Poster",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("import_id", models.TextField(blank=True, db_index=True, null=True)),
                ("title", models.TextField(null=True)),
                (
                    "abstract",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                (
                    "authors",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                (
                    "tags",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                ("category", models.TextField(blank=True, null=True)),
                ("poster_url", models.URLField(blank=True, null=True)),
                ("poster_preview", models.URLField(blank=True, null=True)),
                ("schedule_session", models.TextField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posters",
                        to="base.channel",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posters",
                        to="base.event",
                    ),
                ),
                (
                    "parent_room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_posters",
                        to="base.room",
                    ),
                ),
                (
                    "presentation_room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="presentation_posters",
                        to="base.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PosterLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="base.poster",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("reaction", models.CharField(max_length=100)),
                ("amount", models.IntegerField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="base.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoomGrant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.CharField(max_length=200)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_grants",
                        to="base.event",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_grants",
                        to="base.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_grants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoomQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("visible", "Visible"),
                            ("mod_queue", "Mod Queue"),
                            ("archived", "Archived"),
                        ],
                        default="mod_queue",
                        max_length=10,
                    ),
                ),
                ("answered", models.BooleanField(default=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_pinned", models.BooleanField(default=False)),
                (
                    "moderator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderated_questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="base.room",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="base.roomquestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoulettePairing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.room"
                    ),
                ),
                (
                    "user1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roulette_pairing_left",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roulette_pairing_right",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ShortToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("expires", models.DateTimeField()),
                (
                    "short_token",
                    models.CharField(
                        db_index=True,
                        default=eventyay.base.models.auth.generate_short_token,
                        max_length=150,
                        unique=True,
                    ),
                ),
                ("long_token", models.TextField()),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="short_tokens",
                        to="base.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StoredFile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("filename", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255)),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        max_length=999,
                        null=True,
                        upload_to=eventyay.base.models.storage_model.storedfile_name,
                    ),
                ),
                ("public", models.BooleanField(default=False)),
                ("source_url", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="base.event"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("module", models.CharField(max_length=200)),
                ("message", models.TextField(blank=True, null=True)),
                ("trace", models.TextField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="system_logs",
                        to="base.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TurnServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("hostname", models.CharField(max_length=300)),
                ("auth_secret", models.CharField(max_length=300)),
                (
                    "event_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="base.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField(auto_now_add=True)),
                ("end", models.DateTimeField(db_index=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="base.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["start"], name="base_eventv_start_ccf640_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="ExhibitorStaff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff",
                        to="base.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_staff",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "exhibitor")},
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("volatile", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(default=False)),
                (
                    "channel",
                    models.ForeignKey(
                        max_length=300,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="base.channel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_channels",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "channel")},
            },
        ),
        migrations.CreateModel(
            name="PollVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="base.polloption",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("option", "sender")},
            },
        ),
        migrations.CreateModel(
            name="PosterPresenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="presenters",
                        to="base.poster",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="poster_presenter",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "poster")},
            },
        ),
        migrations.CreateModel(
            name="PosterVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="base.poster",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poster_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "poster")},
            },
        ),
        migrations.CreateModel(
            name="RoomView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField(auto_now_add=True)),
                ("end", models.DateTimeField(db_index=True, null=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="base.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["start"], name="base_roomvi_start_7ac6a2_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="RouletteRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("socket_id", models.UUIDField()),
                ("expiry", models.DateTimeField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.room"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("socket_id", "room")},
            },
        ),
    ]
