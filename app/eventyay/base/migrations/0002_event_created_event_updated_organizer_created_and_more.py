# Generated by Django 5.2.5 on 2025-09-05 10:28

import django.db.models.deletion
import eventyay.base.models.auth
import eventyay.base.models.mixins
import i18nfield.fields
import rules.contrib.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='created',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='updated',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='organizer',
            name='created',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='organizer',
            name='updated',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='team',
            name='can_change_submissions',
            field=models.BooleanField(default=False, verbose_name='Can work with and change proposals'),
        ),
        migrations.AddField(
            model_name='team',
            name='created',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='team',
            name='force_hide_speaker_names',
            field=models.BooleanField(default=False, help_text='Normally, anonymisation is configured in the event review settings. This setting will <strong>override the event settings</strong> and always hide speaker names for this team.', verbose_name='Always hide speaker names'),
        ),
        migrations.AddField(
            model_name='team',
            name='is_reviewer',
            field=models.BooleanField(default=False, verbose_name='Is a reviewer'),
        ),
        migrations.AddField(
            model_name='team',
            name='limit_tracks',
            field=models.ManyToManyField(blank=True, to='base.track', verbose_name='Limit to tracks'),
        ),
        migrations.AddField(
            model_name='team',
            name='updated',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.ImageField(blank=True, help_text='We recommend uploading an image at least 400px wide. A square image works best, as we display it in a circle in several places.', null=True, upload_to=eventyay.base.models.auth.avatar_path, verbose_name='Profile picture'),
        ),
        migrations.AddField(
            model_name='user',
            name='avatar_license',
            field=models.TextField(blank=True, help_text='Please enter the name of the license of the photo and link to it if applicable.', null=True, verbose_name='Profile Picture License'),
        ),
        migrations.AddField(
            model_name='user',
            name='avatar_source',
            field=models.TextField(blank=True, help_text='Please enter the name of the author or source of image and a link if applicable.', null=True, verbose_name='Profile Picture Source'),
        ),
        migrations.AddField(
            model_name='user',
            name='avatar_thumbnail',
            field=models.ImageField(blank=True, null=True, upload_to='avatars/'),
        ),
        migrations.AddField(
            model_name='user',
            name='avatar_thumbnail_tiny',
            field=models.ImageField(blank=True, null=True, upload_to='avatars/'),
        ),
        migrations.AddField(
            model_name='user',
            name='code',
            field=models.CharField(max_length=16, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='user',
            name='get_gravatar',
            field=models.BooleanField(default=False, help_text='If you have registered with an email address that has a gravatar account, we can retrieve your profile picture from there.', verbose_name='Retrieve profile picture via gravatar'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_administrator',
            field=models.BooleanField(default=False, help_text='Should only be ``True`` for people with administrative access to the server eventyay runs on.'),
        ),
        migrations.AddField(
            model_name='user',
            name='nick',
            field=models.CharField(blank=True, max_length=60, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='pw_reset_time',
            field=models.DateTimeField(null=True, verbose_name='Password reset time'),
        ),
        migrations.AddField(
            model_name='user',
            name='pw_reset_token',
            field=models.CharField(max_length=160, null=True, verbose_name='Password reset token'),
        ),
        migrations.AlterField(
            model_name='event',
            name='content_locale_array',
            field=models.TextField(default='en'),
        ),
        migrations.AlterField(
            model_name='event',
            name='email',
            field=models.EmailField(default='org@mail.com', help_text='Will be used as Reply-To in emails.', max_length=254, verbose_name='Organizer email address'),
        ),
        migrations.AlterField(
            model_name='event',
            name='locale',
            field=models.CharField(choices=[('en', 'English'), ('de', 'German'), ('de-formal', 'German (formal)'), ('ar', 'Arabic'), ('cs', 'Czech'), ('el', 'Greek'), ('es', 'Spanish'), ('fa-ir', 'Persian'), ('fr', 'French'), ('it', 'Italian'), ('ja-jp', 'Japanese'), ('nl', 'Dutch'), ('pt-br', 'Brasilian Portuguese'), ('pt-pt', 'Portuguese'), ('ru', 'Russian'), ('sw', 'Swahili'), ('ua', 'Ukrainian'), ('zh-hant', 'Traditional Chinese (Taiwan)'), ('zh-hans', 'Simplified Chinese')], default='en', max_length=32, verbose_name='Default language'),
        ),
        migrations.AlterField(
            model_name='event',
            name='locale_array',
            field=models.TextField(default='en'),
        ),
        migrations.AlterField(
            model_name='submission',
            name='content_locale',
            field=models.CharField(default='en', max_length=32, verbose_name='Language'),
        ),
        migrations.AlterField(
            model_name='user',
            name='locale',
            field=models.CharField(choices=[('en', 'English'), ('de', 'German'), ('de-formal', 'German (formal)'), ('ar', 'Arabic'), ('cs', 'Czech'), ('el', 'Greek'), ('es', 'Spanish'), ('fa-ir', 'Persian'), ('fr', 'French'), ('it', 'Italian'), ('ja-jp', 'Japanese'), ('nl', 'Dutch'), ('pt-br', 'Brasilian Portuguese'), ('pt-pt', 'Portuguese'), ('ru', 'Russian'), ('sw', 'Swahili'), ('ua', 'Ukrainian'), ('zh-hant', 'Traditional Chinese (Taiwan)'), ('zh-hans', 'Simplified Chinese')], default='en', max_length=50, verbose_name='Language'),
        ),
        migrations.AlterUniqueTogether(
            name='event_settingsstore',
            unique_together={('object', 'key')},
        ),
        migrations.AlterUniqueTogether(
            name='globalsettings_settingsstore',
            unique_together={('key',)},
        ),
        migrations.AlterUniqueTogether(
            name='globalsettingsobject_settingsstore',
            unique_together={('key',)},
        ),
        migrations.AlterUniqueTogether(
            name='organizer_settingsstore',
            unique_together={('object', 'key')},
        ),
        migrations.CreateModel(
            name='EventExtraLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('label', i18nfield.fields.I18nCharField(max_length=200, verbose_name='Link text')),
                ('url', models.URLField(verbose_name='Link URL')),
                ('role', models.CharField(choices=[('footer', 'Footer'), ('header', 'Header')], default='footer', max_length=6)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extra_links', to='base.event')),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.OrderedModel, eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
    ]
