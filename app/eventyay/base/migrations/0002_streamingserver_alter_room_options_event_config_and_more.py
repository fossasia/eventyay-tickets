# Generated by Django 5.1.9 on 2025-08-11 08:56

import django.core.validators
import django.db.models.deletion
import eventyay.base.models.auth
import eventyay.base.models.bbb
import eventyay.base.models.event
import eventyay.base.models.exhibitor
import eventyay.base.models.poster
import eventyay.base.models.room
import eventyay.base.models.storage_model
import eventyay.core.utils.json
import i18nfield.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("eventyaybase", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StreamingServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=300)),
                ("token_secret", models.CharField(max_length=300)),
                (
                    "url_input",
                    models.CharField(
                        default="rtmp://server/app/{name}?token={token}", max_length=300
                    ),
                ),
                (
                    "url_output",
                    models.CharField(
                        default="https://server/hls/{name}.m3u8", max_length=300
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.AlterModelOptions(
            name="room",
            options={"ordering": ("position", "sorting_priority", "name")},
        ),
        migrations.AddField(
            model_name="event",
            name="config",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="event",
            name="domain",
            field=models.CharField(
                blank=True,
                max_length=250,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        regex="^[a-z0-9-.:]+(/[a-zA-Z0-9-_./]*)?$"
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="external_auth_url",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="event",
            name="roles",
            field=models.JSONField(
                blank=True,
                default=eventyay.base.models.event.default_roles,
                encoder=eventyay.core.utils.json.CustomJSONEncoder,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="trait_grants",
            field=models.JSONField(
                blank=True, default=eventyay.base.models.event.default_grants, null=True
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="room",
            name="force_join",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="room",
            name="import_id",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="room",
            name="module_config",
            field=models.JSONField(
                default=eventyay.base.models.room.empty_module_config, null=True
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="picture",
            field=models.FileField(blank=True, null=True, upload_to=""),
        ),
        migrations.AddField(
            model_name="room",
            name="pretalx_id",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="room",
            name="schedule_data",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="room",
            name="sorting_priority",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="room",
            name="trait_grants",
            field=models.JSONField(
                blank=True, default=eventyay.base.models.room.default_grants, null=True
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="version",
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name="user",
            name="blocked_users",
            field=models.ManyToManyField(
                related_name="blocked_by", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="client_id",
            field=models.CharField(
                blank=True, db_index=True, max_length=200, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="client_state",
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="user",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="user",
            name="event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="eventyaybase.event",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="moderation_state",
            field=models.CharField(
                choices=[("", "None"), ("silenced", "Silenced"), ("banned", "Banned")],
                default="",
                max_length=8,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="pretalx_id",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="profile",
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name="user",
            name="show_publicly",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="user",
            name="social_login_id_linkedin",
            field=models.CharField(
                blank=True, db_index=True, max_length=190, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="social_login_id_twitter",
            field=models.CharField(
                blank=True, db_index=True, max_length=190, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="token_id",
            field=models.CharField(
                blank=True, db_index=True, max_length=200, null=True
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="traits",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name="user",
            name="type",
            field=models.CharField(
                choices=[
                    ("person", "Person"),
                    ("kiosk", "Kiosk"),
                    ("anon", "Anonymous"),
                ],
                default="person",
                max_length=8,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="version",
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AlterField(
            model_name="event",
            name="content_locale_array",
            field=models.TextField(default="en"),
        ),
        migrations.AlterField(
            model_name="event",
            name="locale",
            field=models.CharField(
                choices=[("en", "English"), ("de", "Deutsch")],
                default="en",
                max_length=32,
                verbose_name="Default language",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="locale_array",
            field=models.TextField(default="en"),
        ),
        migrations.AlterField(
            model_name="event",
            name="timezone",
            field=models.CharField(
                choices=[
                    ("Africa/Abidjan", "Africa/Abidjan"),
                    ("Africa/Accra", "Africa/Accra"),
                    ("Africa/Addis_Ababa", "Africa/Addis_Ababa"),
                    ("Africa/Algiers", "Africa/Algiers"),
                    ("Africa/Asmara", "Africa/Asmara"),
                    ("Africa/Asmera", "Africa/Asmera"),
                    ("Africa/Bamako", "Africa/Bamako"),
                    ("Africa/Bangui", "Africa/Bangui"),
                    ("Africa/Banjul", "Africa/Banjul"),
                    ("Africa/Bissau", "Africa/Bissau"),
                    ("Africa/Blantyre", "Africa/Blantyre"),
                    ("Africa/Brazzaville", "Africa/Brazzaville"),
                    ("Africa/Bujumbura", "Africa/Bujumbura"),
                    ("Africa/Cairo", "Africa/Cairo"),
                    ("Africa/Casablanca", "Africa/Casablanca"),
                    ("Africa/Ceuta", "Africa/Ceuta"),
                    ("Africa/Conakry", "Africa/Conakry"),
                    ("Africa/Dakar", "Africa/Dakar"),
                    ("Africa/Dar_es_Salaam", "Africa/Dar_es_Salaam"),
                    ("Africa/Djibouti", "Africa/Djibouti"),
                    ("Africa/Douala", "Africa/Douala"),
                    ("Africa/El_Aaiun", "Africa/El_Aaiun"),
                    ("Africa/Freetown", "Africa/Freetown"),
                    ("Africa/Gaborone", "Africa/Gaborone"),
                    ("Africa/Harare", "Africa/Harare"),
                    ("Africa/Johannesburg", "Africa/Johannesburg"),
                    ("Africa/Juba", "Africa/Juba"),
                    ("Africa/Kampala", "Africa/Kampala"),
                    ("Africa/Khartoum", "Africa/Khartoum"),
                    ("Africa/Kigali", "Africa/Kigali"),
                    ("Africa/Kinshasa", "Africa/Kinshasa"),
                    ("Africa/Lagos", "Africa/Lagos"),
                    ("Africa/Libreville", "Africa/Libreville"),
                    ("Africa/Lome", "Africa/Lome"),
                    ("Africa/Luanda", "Africa/Luanda"),
                    ("Africa/Lubumbashi", "Africa/Lubumbashi"),
                    ("Africa/Lusaka", "Africa/Lusaka"),
                    ("Africa/Malabo", "Africa/Malabo"),
                    ("Africa/Maputo", "Africa/Maputo"),
                    ("Africa/Maseru", "Africa/Maseru"),
                    ("Africa/Mbabane", "Africa/Mbabane"),
                    ("Africa/Mogadishu", "Africa/Mogadishu"),
                    ("Africa/Monrovia", "Africa/Monrovia"),
                    ("Africa/Nairobi", "Africa/Nairobi"),
                    ("Africa/Ndjamena", "Africa/Ndjamena"),
                    ("Africa/Niamey", "Africa/Niamey"),
                    ("Africa/Nouakchott", "Africa/Nouakchott"),
                    ("Africa/Ouagadougou", "Africa/Ouagadougou"),
                    ("Africa/Porto-Novo", "Africa/Porto-Novo"),
                    ("Africa/Sao_Tome", "Africa/Sao_Tome"),
                    ("Africa/Timbuktu", "Africa/Timbuktu"),
                    ("Africa/Tripoli", "Africa/Tripoli"),
                    ("Africa/Tunis", "Africa/Tunis"),
                    ("Africa/Windhoek", "Africa/Windhoek"),
                    ("America/Adak", "America/Adak"),
                    ("America/Anchorage", "America/Anchorage"),
                    ("America/Anguilla", "America/Anguilla"),
                    ("America/Antigua", "America/Antigua"),
                    ("America/Araguaina", "America/Araguaina"),
                    (
                        "America/Argentina/Buenos_Aires",
                        "America/Argentina/Buenos_Aires",
                    ),
                    ("America/Argentina/Catamarca", "America/Argentina/Catamarca"),
                    (
                        "America/Argentina/ComodRivadavia",
                        "America/Argentina/ComodRivadavia",
                    ),
                    ("America/Argentina/Cordoba", "America/Argentina/Cordoba"),
                    ("America/Argentina/Jujuy", "America/Argentina/Jujuy"),
                    ("America/Argentina/La_Rioja", "America/Argentina/La_Rioja"),
                    ("America/Argentina/Mendoza", "America/Argentina/Mendoza"),
                    (
                        "America/Argentina/Rio_Gallegos",
                        "America/Argentina/Rio_Gallegos",
                    ),
                    ("America/Argentina/Salta", "America/Argentina/Salta"),
                    ("America/Argentina/San_Juan", "America/Argentina/San_Juan"),
                    ("America/Argentina/San_Luis", "America/Argentina/San_Luis"),
                    ("America/Argentina/Tucuman", "America/Argentina/Tucuman"),
                    ("America/Argentina/Ushuaia", "America/Argentina/Ushuaia"),
                    ("America/Aruba", "America/Aruba"),
                    ("America/Asuncion", "America/Asuncion"),
                    ("America/Atikokan", "America/Atikokan"),
                    ("America/Atka", "America/Atka"),
                    ("America/Bahia", "America/Bahia"),
                    ("America/Bahia_Banderas", "America/Bahia_Banderas"),
                    ("America/Barbados", "America/Barbados"),
                    ("America/Belem", "America/Belem"),
                    ("America/Belize", "America/Belize"),
                    ("America/Blanc-Sablon", "America/Blanc-Sablon"),
                    ("America/Boa_Vista", "America/Boa_Vista"),
                    ("America/Bogota", "America/Bogota"),
                    ("America/Boise", "America/Boise"),
                    ("America/Buenos_Aires", "America/Buenos_Aires"),
                    ("America/Cambridge_Bay", "America/Cambridge_Bay"),
                    ("America/Campo_Grande", "America/Campo_Grande"),
                    ("America/Cancun", "America/Cancun"),
                    ("America/Caracas", "America/Caracas"),
                    ("America/Catamarca", "America/Catamarca"),
                    ("America/Cayenne", "America/Cayenne"),
                    ("America/Cayman", "America/Cayman"),
                    ("America/Chicago", "America/Chicago"),
                    ("America/Chihuahua", "America/Chihuahua"),
                    ("America/Ciudad_Juarez", "America/Ciudad_Juarez"),
                    ("America/Coral_Harbour", "America/Coral_Harbour"),
                    ("America/Cordoba", "America/Cordoba"),
                    ("America/Costa_Rica", "America/Costa_Rica"),
                    ("America/Coyhaique", "America/Coyhaique"),
                    ("America/Creston", "America/Creston"),
                    ("America/Cuiaba", "America/Cuiaba"),
                    ("America/Curacao", "America/Curacao"),
                    ("America/Danmarkshavn", "America/Danmarkshavn"),
                    ("America/Dawson", "America/Dawson"),
                    ("America/Dawson_Creek", "America/Dawson_Creek"),
                    ("America/Denver", "America/Denver"),
                    ("America/Detroit", "America/Detroit"),
                    ("America/Dominica", "America/Dominica"),
                    ("America/Edmonton", "America/Edmonton"),
                    ("America/Eirunepe", "America/Eirunepe"),
                    ("America/El_Salvador", "America/El_Salvador"),
                    ("America/Ensenada", "America/Ensenada"),
                    ("America/Fort_Nelson", "America/Fort_Nelson"),
                    ("America/Fort_Wayne", "America/Fort_Wayne"),
                    ("America/Fortaleza", "America/Fortaleza"),
                    ("America/Glace_Bay", "America/Glace_Bay"),
                    ("America/Godthab", "America/Godthab"),
                    ("America/Goose_Bay", "America/Goose_Bay"),
                    ("America/Grand_Turk", "America/Grand_Turk"),
                    ("America/Grenada", "America/Grenada"),
                    ("America/Guadeloupe", "America/Guadeloupe"),
                    ("America/Guatemala", "America/Guatemala"),
                    ("America/Guayaquil", "America/Guayaquil"),
                    ("America/Guyana", "America/Guyana"),
                    ("America/Halifax", "America/Halifax"),
                    ("America/Havana", "America/Havana"),
                    ("America/Hermosillo", "America/Hermosillo"),
                    ("America/Indiana/Indianapolis", "America/Indiana/Indianapolis"),
                    ("America/Indiana/Knox", "America/Indiana/Knox"),
                    ("America/Indiana/Marengo", "America/Indiana/Marengo"),
                    ("America/Indiana/Petersburg", "America/Indiana/Petersburg"),
                    ("America/Indiana/Tell_City", "America/Indiana/Tell_City"),
                    ("America/Indiana/Vevay", "America/Indiana/Vevay"),
                    ("America/Indiana/Vincennes", "America/Indiana/Vincennes"),
                    ("America/Indiana/Winamac", "America/Indiana/Winamac"),
                    ("America/Indianapolis", "America/Indianapolis"),
                    ("America/Inuvik", "America/Inuvik"),
                    ("America/Iqaluit", "America/Iqaluit"),
                    ("America/Jamaica", "America/Jamaica"),
                    ("America/Jujuy", "America/Jujuy"),
                    ("America/Juneau", "America/Juneau"),
                    ("America/Kentucky/Louisville", "America/Kentucky/Louisville"),
                    ("America/Kentucky/Monticello", "America/Kentucky/Monticello"),
                    ("America/Knox_IN", "America/Knox_IN"),
                    ("America/Kralendijk", "America/Kralendijk"),
                    ("America/La_Paz", "America/La_Paz"),
                    ("America/Lima", "America/Lima"),
                    ("America/Los_Angeles", "America/Los_Angeles"),
                    ("America/Louisville", "America/Louisville"),
                    ("America/Lower_Princes", "America/Lower_Princes"),
                    ("America/Maceio", "America/Maceio"),
                    ("America/Managua", "America/Managua"),
                    ("America/Manaus", "America/Manaus"),
                    ("America/Marigot", "America/Marigot"),
                    ("America/Martinique", "America/Martinique"),
                    ("America/Matamoros", "America/Matamoros"),
                    ("America/Mazatlan", "America/Mazatlan"),
                    ("America/Mendoza", "America/Mendoza"),
                    ("America/Menominee", "America/Menominee"),
                    ("America/Merida", "America/Merida"),
                    ("America/Metlakatla", "America/Metlakatla"),
                    ("America/Mexico_City", "America/Mexico_City"),
                    ("America/Miquelon", "America/Miquelon"),
                    ("America/Moncton", "America/Moncton"),
                    ("America/Monterrey", "America/Monterrey"),
                    ("America/Montevideo", "America/Montevideo"),
                    ("America/Montreal", "America/Montreal"),
                    ("America/Montserrat", "America/Montserrat"),
                    ("America/Nassau", "America/Nassau"),
                    ("America/New_York", "America/New_York"),
                    ("America/Nipigon", "America/Nipigon"),
                    ("America/Nome", "America/Nome"),
                    ("America/Noronha", "America/Noronha"),
                    ("America/North_Dakota/Beulah", "America/North_Dakota/Beulah"),
                    ("America/North_Dakota/Center", "America/North_Dakota/Center"),
                    (
                        "America/North_Dakota/New_Salem",
                        "America/North_Dakota/New_Salem",
                    ),
                    ("America/Nuuk", "America/Nuuk"),
                    ("America/Ojinaga", "America/Ojinaga"),
                    ("America/Panama", "America/Panama"),
                    ("America/Pangnirtung", "America/Pangnirtung"),
                    ("America/Paramaribo", "America/Paramaribo"),
                    ("America/Phoenix", "America/Phoenix"),
                    ("America/Port-au-Prince", "America/Port-au-Prince"),
                    ("America/Port_of_Spain", "America/Port_of_Spain"),
                    ("America/Porto_Acre", "America/Porto_Acre"),
                    ("America/Porto_Velho", "America/Porto_Velho"),
                    ("America/Puerto_Rico", "America/Puerto_Rico"),
                    ("America/Punta_Arenas", "America/Punta_Arenas"),
                    ("America/Rainy_River", "America/Rainy_River"),
                    ("America/Rankin_Inlet", "America/Rankin_Inlet"),
                    ("America/Recife", "America/Recife"),
                    ("America/Regina", "America/Regina"),
                    ("America/Resolute", "America/Resolute"),
                    ("America/Rio_Branco", "America/Rio_Branco"),
                    ("America/Rosario", "America/Rosario"),
                    ("America/Santa_Isabel", "America/Santa_Isabel"),
                    ("America/Santarem", "America/Santarem"),
                    ("America/Santiago", "America/Santiago"),
                    ("America/Santo_Domingo", "America/Santo_Domingo"),
                    ("America/Sao_Paulo", "America/Sao_Paulo"),
                    ("America/Scoresbysund", "America/Scoresbysund"),
                    ("America/Shiprock", "America/Shiprock"),
                    ("America/Sitka", "America/Sitka"),
                    ("America/St_Barthelemy", "America/St_Barthelemy"),
                    ("America/St_Johns", "America/St_Johns"),
                    ("America/St_Kitts", "America/St_Kitts"),
                    ("America/St_Lucia", "America/St_Lucia"),
                    ("America/St_Thomas", "America/St_Thomas"),
                    ("America/St_Vincent", "America/St_Vincent"),
                    ("America/Swift_Current", "America/Swift_Current"),
                    ("America/Tegucigalpa", "America/Tegucigalpa"),
                    ("America/Thule", "America/Thule"),
                    ("America/Thunder_Bay", "America/Thunder_Bay"),
                    ("America/Tijuana", "America/Tijuana"),
                    ("America/Toronto", "America/Toronto"),
                    ("America/Tortola", "America/Tortola"),
                    ("America/Vancouver", "America/Vancouver"),
                    ("America/Virgin", "America/Virgin"),
                    ("America/Whitehorse", "America/Whitehorse"),
                    ("America/Winnipeg", "America/Winnipeg"),
                    ("America/Yakutat", "America/Yakutat"),
                    ("America/Yellowknife", "America/Yellowknife"),
                    ("Antarctica/Casey", "Antarctica/Casey"),
                    ("Antarctica/Davis", "Antarctica/Davis"),
                    ("Antarctica/DumontDUrville", "Antarctica/DumontDUrville"),
                    ("Antarctica/Macquarie", "Antarctica/Macquarie"),
                    ("Antarctica/Mawson", "Antarctica/Mawson"),
                    ("Antarctica/McMurdo", "Antarctica/McMurdo"),
                    ("Antarctica/Palmer", "Antarctica/Palmer"),
                    ("Antarctica/Rothera", "Antarctica/Rothera"),
                    ("Antarctica/South_Pole", "Antarctica/South_Pole"),
                    ("Antarctica/Syowa", "Antarctica/Syowa"),
                    ("Antarctica/Troll", "Antarctica/Troll"),
                    ("Antarctica/Vostok", "Antarctica/Vostok"),
                    ("Arctic/Longyearbyen", "Arctic/Longyearbyen"),
                    ("Asia/Aden", "Asia/Aden"),
                    ("Asia/Almaty", "Asia/Almaty"),
                    ("Asia/Amman", "Asia/Amman"),
                    ("Asia/Anadyr", "Asia/Anadyr"),
                    ("Asia/Aqtau", "Asia/Aqtau"),
                    ("Asia/Aqtobe", "Asia/Aqtobe"),
                    ("Asia/Ashgabat", "Asia/Ashgabat"),
                    ("Asia/Ashkhabad", "Asia/Ashkhabad"),
                    ("Asia/Atyrau", "Asia/Atyrau"),
                    ("Asia/Baghdad", "Asia/Baghdad"),
                    ("Asia/Bahrain", "Asia/Bahrain"),
                    ("Asia/Baku", "Asia/Baku"),
                    ("Asia/Bangkok", "Asia/Bangkok"),
                    ("Asia/Barnaul", "Asia/Barnaul"),
                    ("Asia/Beirut", "Asia/Beirut"),
                    ("Asia/Bishkek", "Asia/Bishkek"),
                    ("Asia/Brunei", "Asia/Brunei"),
                    ("Asia/Calcutta", "Asia/Calcutta"),
                    ("Asia/Chita", "Asia/Chita"),
                    ("Asia/Choibalsan", "Asia/Choibalsan"),
                    ("Asia/Chongqing", "Asia/Chongqing"),
                    ("Asia/Chungking", "Asia/Chungking"),
                    ("Asia/Colombo", "Asia/Colombo"),
                    ("Asia/Dacca", "Asia/Dacca"),
                    ("Asia/Damascus", "Asia/Damascus"),
                    ("Asia/Dhaka", "Asia/Dhaka"),
                    ("Asia/Dili", "Asia/Dili"),
                    ("Asia/Dubai", "Asia/Dubai"),
                    ("Asia/Dushanbe", "Asia/Dushanbe"),
                    ("Asia/Famagusta", "Asia/Famagusta"),
                    ("Asia/Gaza", "Asia/Gaza"),
                    ("Asia/Harbin", "Asia/Harbin"),
                    ("Asia/Hebron", "Asia/Hebron"),
                    ("Asia/Ho_Chi_Minh", "Asia/Ho_Chi_Minh"),
                    ("Asia/Hong_Kong", "Asia/Hong_Kong"),
                    ("Asia/Hovd", "Asia/Hovd"),
                    ("Asia/Irkutsk", "Asia/Irkutsk"),
                    ("Asia/Istanbul", "Asia/Istanbul"),
                    ("Asia/Jakarta", "Asia/Jakarta"),
                    ("Asia/Jayapura", "Asia/Jayapura"),
                    ("Asia/Jerusalem", "Asia/Jerusalem"),
                    ("Asia/Kabul", "Asia/Kabul"),
                    ("Asia/Kamchatka", "Asia/Kamchatka"),
                    ("Asia/Karachi", "Asia/Karachi"),
                    ("Asia/Kashgar", "Asia/Kashgar"),
                    ("Asia/Kathmandu", "Asia/Kathmandu"),
                    ("Asia/Katmandu", "Asia/Katmandu"),
                    ("Asia/Khandyga", "Asia/Khandyga"),
                    ("Asia/Kolkata", "Asia/Kolkata"),
                    ("Asia/Krasnoyarsk", "Asia/Krasnoyarsk"),
                    ("Asia/Kuala_Lumpur", "Asia/Kuala_Lumpur"),
                    ("Asia/Kuching", "Asia/Kuching"),
                    ("Asia/Kuwait", "Asia/Kuwait"),
                    ("Asia/Macao", "Asia/Macao"),
                    ("Asia/Macau", "Asia/Macau"),
                    ("Asia/Magadan", "Asia/Magadan"),
                    ("Asia/Makassar", "Asia/Makassar"),
                    ("Asia/Manila", "Asia/Manila"),
                    ("Asia/Muscat", "Asia/Muscat"),
                    ("Asia/Nicosia", "Asia/Nicosia"),
                    ("Asia/Novokuznetsk", "Asia/Novokuznetsk"),
                    ("Asia/Novosibirsk", "Asia/Novosibirsk"),
                    ("Asia/Omsk", "Asia/Omsk"),
                    ("Asia/Oral", "Asia/Oral"),
                    ("Asia/Phnom_Penh", "Asia/Phnom_Penh"),
                    ("Asia/Pontianak", "Asia/Pontianak"),
                    ("Asia/Pyongyang", "Asia/Pyongyang"),
                    ("Asia/Qatar", "Asia/Qatar"),
                    ("Asia/Qostanay", "Asia/Qostanay"),
                    ("Asia/Qyzylorda", "Asia/Qyzylorda"),
                    ("Asia/Rangoon", "Asia/Rangoon"),
                    ("Asia/Riyadh", "Asia/Riyadh"),
                    ("Asia/Saigon", "Asia/Saigon"),
                    ("Asia/Sakhalin", "Asia/Sakhalin"),
                    ("Asia/Samarkand", "Asia/Samarkand"),
                    ("Asia/Seoul", "Asia/Seoul"),
                    ("Asia/Shanghai", "Asia/Shanghai"),
                    ("Asia/Singapore", "Asia/Singapore"),
                    ("Asia/Srednekolymsk", "Asia/Srednekolymsk"),
                    ("Asia/Taipei", "Asia/Taipei"),
                    ("Asia/Tashkent", "Asia/Tashkent"),
                    ("Asia/Tbilisi", "Asia/Tbilisi"),
                    ("Asia/Tehran", "Asia/Tehran"),
                    ("Asia/Tel_Aviv", "Asia/Tel_Aviv"),
                    ("Asia/Thimbu", "Asia/Thimbu"),
                    ("Asia/Thimphu", "Asia/Thimphu"),
                    ("Asia/Tokyo", "Asia/Tokyo"),
                    ("Asia/Tomsk", "Asia/Tomsk"),
                    ("Asia/Ujung_Pandang", "Asia/Ujung_Pandang"),
                    ("Asia/Ulaanbaatar", "Asia/Ulaanbaatar"),
                    ("Asia/Ulan_Bator", "Asia/Ulan_Bator"),
                    ("Asia/Urumqi", "Asia/Urumqi"),
                    ("Asia/Ust-Nera", "Asia/Ust-Nera"),
                    ("Asia/Vientiane", "Asia/Vientiane"),
                    ("Asia/Vladivostok", "Asia/Vladivostok"),
                    ("Asia/Yakutsk", "Asia/Yakutsk"),
                    ("Asia/Yangon", "Asia/Yangon"),
                    ("Asia/Yekaterinburg", "Asia/Yekaterinburg"),
                    ("Asia/Yerevan", "Asia/Yerevan"),
                    ("Atlantic/Azores", "Atlantic/Azores"),
                    ("Atlantic/Bermuda", "Atlantic/Bermuda"),
                    ("Atlantic/Canary", "Atlantic/Canary"),
                    ("Atlantic/Cape_Verde", "Atlantic/Cape_Verde"),
                    ("Atlantic/Faeroe", "Atlantic/Faeroe"),
                    ("Atlantic/Faroe", "Atlantic/Faroe"),
                    ("Atlantic/Jan_Mayen", "Atlantic/Jan_Mayen"),
                    ("Atlantic/Madeira", "Atlantic/Madeira"),
                    ("Atlantic/Reykjavik", "Atlantic/Reykjavik"),
                    ("Atlantic/South_Georgia", "Atlantic/South_Georgia"),
                    ("Atlantic/St_Helena", "Atlantic/St_Helena"),
                    ("Atlantic/Stanley", "Atlantic/Stanley"),
                    ("Australia/ACT", "Australia/ACT"),
                    ("Australia/Adelaide", "Australia/Adelaide"),
                    ("Australia/Brisbane", "Australia/Brisbane"),
                    ("Australia/Broken_Hill", "Australia/Broken_Hill"),
                    ("Australia/Canberra", "Australia/Canberra"),
                    ("Australia/Currie", "Australia/Currie"),
                    ("Australia/Darwin", "Australia/Darwin"),
                    ("Australia/Eucla", "Australia/Eucla"),
                    ("Australia/Hobart", "Australia/Hobart"),
                    ("Australia/LHI", "Australia/LHI"),
                    ("Australia/Lindeman", "Australia/Lindeman"),
                    ("Australia/Lord_Howe", "Australia/Lord_Howe"),
                    ("Australia/Melbourne", "Australia/Melbourne"),
                    ("Australia/NSW", "Australia/NSW"),
                    ("Australia/North", "Australia/North"),
                    ("Australia/Perth", "Australia/Perth"),
                    ("Australia/Queensland", "Australia/Queensland"),
                    ("Australia/South", "Australia/South"),
                    ("Australia/Sydney", "Australia/Sydney"),
                    ("Australia/Tasmania", "Australia/Tasmania"),
                    ("Australia/Victoria", "Australia/Victoria"),
                    ("Australia/West", "Australia/West"),
                    ("Australia/Yancowinna", "Australia/Yancowinna"),
                    ("Brazil/Acre", "Brazil/Acre"),
                    ("Brazil/DeNoronha", "Brazil/DeNoronha"),
                    ("Brazil/East", "Brazil/East"),
                    ("Brazil/West", "Brazil/West"),
                    ("CET", "CET"),
                    ("CST6CDT", "CST6CDT"),
                    ("Canada/Atlantic", "Canada/Atlantic"),
                    ("Canada/Central", "Canada/Central"),
                    ("Canada/Eastern", "Canada/Eastern"),
                    ("Canada/Mountain", "Canada/Mountain"),
                    ("Canada/Newfoundland", "Canada/Newfoundland"),
                    ("Canada/Pacific", "Canada/Pacific"),
                    ("Canada/Saskatchewan", "Canada/Saskatchewan"),
                    ("Canada/Yukon", "Canada/Yukon"),
                    ("Chile/Continental", "Chile/Continental"),
                    ("Chile/EasterIsland", "Chile/EasterIsland"),
                    ("Cuba", "Cuba"),
                    ("EET", "EET"),
                    ("EST", "EST"),
                    ("EST5EDT", "EST5EDT"),
                    ("Egypt", "Egypt"),
                    ("Eire", "Eire"),
                    ("Europe/Amsterdam", "Europe/Amsterdam"),
                    ("Europe/Andorra", "Europe/Andorra"),
                    ("Europe/Astrakhan", "Europe/Astrakhan"),
                    ("Europe/Athens", "Europe/Athens"),
                    ("Europe/Belfast", "Europe/Belfast"),
                    ("Europe/Belgrade", "Europe/Belgrade"),
                    ("Europe/Berlin", "Europe/Berlin"),
                    ("Europe/Bratislava", "Europe/Bratislava"),
                    ("Europe/Brussels", "Europe/Brussels"),
                    ("Europe/Bucharest", "Europe/Bucharest"),
                    ("Europe/Budapest", "Europe/Budapest"),
                    ("Europe/Busingen", "Europe/Busingen"),
                    ("Europe/Chisinau", "Europe/Chisinau"),
                    ("Europe/Copenhagen", "Europe/Copenhagen"),
                    ("Europe/Dublin", "Europe/Dublin"),
                    ("Europe/Gibraltar", "Europe/Gibraltar"),
                    ("Europe/Guernsey", "Europe/Guernsey"),
                    ("Europe/Helsinki", "Europe/Helsinki"),
                    ("Europe/Isle_of_Man", "Europe/Isle_of_Man"),
                    ("Europe/Istanbul", "Europe/Istanbul"),
                    ("Europe/Jersey", "Europe/Jersey"),
                    ("Europe/Kaliningrad", "Europe/Kaliningrad"),
                    ("Europe/Kiev", "Europe/Kiev"),
                    ("Europe/Kirov", "Europe/Kirov"),
                    ("Europe/Kyiv", "Europe/Kyiv"),
                    ("Europe/Lisbon", "Europe/Lisbon"),
                    ("Europe/Ljubljana", "Europe/Ljubljana"),
                    ("Europe/London", "Europe/London"),
                    ("Europe/Luxembourg", "Europe/Luxembourg"),
                    ("Europe/Madrid", "Europe/Madrid"),
                    ("Europe/Malta", "Europe/Malta"),
                    ("Europe/Mariehamn", "Europe/Mariehamn"),
                    ("Europe/Minsk", "Europe/Minsk"),
                    ("Europe/Monaco", "Europe/Monaco"),
                    ("Europe/Moscow", "Europe/Moscow"),
                    ("Europe/Nicosia", "Europe/Nicosia"),
                    ("Europe/Oslo", "Europe/Oslo"),
                    ("Europe/Paris", "Europe/Paris"),
                    ("Europe/Podgorica", "Europe/Podgorica"),
                    ("Europe/Prague", "Europe/Prague"),
                    ("Europe/Riga", "Europe/Riga"),
                    ("Europe/Rome", "Europe/Rome"),
                    ("Europe/Samara", "Europe/Samara"),
                    ("Europe/San_Marino", "Europe/San_Marino"),
                    ("Europe/Sarajevo", "Europe/Sarajevo"),
                    ("Europe/Saratov", "Europe/Saratov"),
                    ("Europe/Simferopol", "Europe/Simferopol"),
                    ("Europe/Skopje", "Europe/Skopje"),
                    ("Europe/Sofia", "Europe/Sofia"),
                    ("Europe/Stockholm", "Europe/Stockholm"),
                    ("Europe/Tallinn", "Europe/Tallinn"),
                    ("Europe/Tirane", "Europe/Tirane"),
                    ("Europe/Tiraspol", "Europe/Tiraspol"),
                    ("Europe/Ulyanovsk", "Europe/Ulyanovsk"),
                    ("Europe/Uzhgorod", "Europe/Uzhgorod"),
                    ("Europe/Vaduz", "Europe/Vaduz"),
                    ("Europe/Vatican", "Europe/Vatican"),
                    ("Europe/Vienna", "Europe/Vienna"),
                    ("Europe/Vilnius", "Europe/Vilnius"),
                    ("Europe/Volgograd", "Europe/Volgograd"),
                    ("Europe/Warsaw", "Europe/Warsaw"),
                    ("Europe/Zagreb", "Europe/Zagreb"),
                    ("Europe/Zaporozhye", "Europe/Zaporozhye"),
                    ("Europe/Zurich", "Europe/Zurich"),
                    ("Factory", "Factory"),
                    ("GB", "GB"),
                    ("GB-Eire", "GB-Eire"),
                    ("GMT", "GMT"),
                    ("GMT+0", "GMT+0"),
                    ("GMT-0", "GMT-0"),
                    ("GMT0", "GMT0"),
                    ("Greenwich", "Greenwich"),
                    ("HST", "HST"),
                    ("Hongkong", "Hongkong"),
                    ("Iceland", "Iceland"),
                    ("Indian/Antananarivo", "Indian/Antananarivo"),
                    ("Indian/Chagos", "Indian/Chagos"),
                    ("Indian/Christmas", "Indian/Christmas"),
                    ("Indian/Cocos", "Indian/Cocos"),
                    ("Indian/Comoro", "Indian/Comoro"),
                    ("Indian/Kerguelen", "Indian/Kerguelen"),
                    ("Indian/Mahe", "Indian/Mahe"),
                    ("Indian/Maldives", "Indian/Maldives"),
                    ("Indian/Mauritius", "Indian/Mauritius"),
                    ("Indian/Mayotte", "Indian/Mayotte"),
                    ("Indian/Reunion", "Indian/Reunion"),
                    ("Iran", "Iran"),
                    ("Israel", "Israel"),
                    ("Jamaica", "Jamaica"),
                    ("Japan", "Japan"),
                    ("Kwajalein", "Kwajalein"),
                    ("Libya", "Libya"),
                    ("MET", "MET"),
                    ("MST", "MST"),
                    ("MST7MDT", "MST7MDT"),
                    ("Mexico/BajaNorte", "Mexico/BajaNorte"),
                    ("Mexico/BajaSur", "Mexico/BajaSur"),
                    ("Mexico/General", "Mexico/General"),
                    ("NZ", "NZ"),
                    ("NZ-CHAT", "NZ-CHAT"),
                    ("Navajo", "Navajo"),
                    ("PRC", "PRC"),
                    ("PST8PDT", "PST8PDT"),
                    ("Pacific/Apia", "Pacific/Apia"),
                    ("Pacific/Auckland", "Pacific/Auckland"),
                    ("Pacific/Bougainville", "Pacific/Bougainville"),
                    ("Pacific/Chatham", "Pacific/Chatham"),
                    ("Pacific/Chuuk", "Pacific/Chuuk"),
                    ("Pacific/Easter", "Pacific/Easter"),
                    ("Pacific/Efate", "Pacific/Efate"),
                    ("Pacific/Enderbury", "Pacific/Enderbury"),
                    ("Pacific/Fakaofo", "Pacific/Fakaofo"),
                    ("Pacific/Fiji", "Pacific/Fiji"),
                    ("Pacific/Funafuti", "Pacific/Funafuti"),
                    ("Pacific/Galapagos", "Pacific/Galapagos"),
                    ("Pacific/Gambier", "Pacific/Gambier"),
                    ("Pacific/Guadalcanal", "Pacific/Guadalcanal"),
                    ("Pacific/Guam", "Pacific/Guam"),
                    ("Pacific/Honolulu", "Pacific/Honolulu"),
                    ("Pacific/Johnston", "Pacific/Johnston"),
                    ("Pacific/Kanton", "Pacific/Kanton"),
                    ("Pacific/Kiritimati", "Pacific/Kiritimati"),
                    ("Pacific/Kosrae", "Pacific/Kosrae"),
                    ("Pacific/Kwajalein", "Pacific/Kwajalein"),
                    ("Pacific/Majuro", "Pacific/Majuro"),
                    ("Pacific/Marquesas", "Pacific/Marquesas"),
                    ("Pacific/Midway", "Pacific/Midway"),
                    ("Pacific/Nauru", "Pacific/Nauru"),
                    ("Pacific/Niue", "Pacific/Niue"),
                    ("Pacific/Norfolk", "Pacific/Norfolk"),
                    ("Pacific/Noumea", "Pacific/Noumea"),
                    ("Pacific/Pago_Pago", "Pacific/Pago_Pago"),
                    ("Pacific/Palau", "Pacific/Palau"),
                    ("Pacific/Pitcairn", "Pacific/Pitcairn"),
                    ("Pacific/Pohnpei", "Pacific/Pohnpei"),
                    ("Pacific/Ponape", "Pacific/Ponape"),
                    ("Pacific/Port_Moresby", "Pacific/Port_Moresby"),
                    ("Pacific/Rarotonga", "Pacific/Rarotonga"),
                    ("Pacific/Saipan", "Pacific/Saipan"),
                    ("Pacific/Samoa", "Pacific/Samoa"),
                    ("Pacific/Tahiti", "Pacific/Tahiti"),
                    ("Pacific/Tarawa", "Pacific/Tarawa"),
                    ("Pacific/Tongatapu", "Pacific/Tongatapu"),
                    ("Pacific/Truk", "Pacific/Truk"),
                    ("Pacific/Wake", "Pacific/Wake"),
                    ("Pacific/Wallis", "Pacific/Wallis"),
                    ("Pacific/Yap", "Pacific/Yap"),
                    ("Poland", "Poland"),
                    ("Portugal", "Portugal"),
                    ("ROC", "ROC"),
                    ("ROK", "ROK"),
                    ("Singapore", "Singapore"),
                    ("Turkey", "Turkey"),
                    ("UCT", "UCT"),
                    ("US/Alaska", "US/Alaska"),
                    ("US/Aleutian", "US/Aleutian"),
                    ("US/Arizona", "US/Arizona"),
                    ("US/Central", "US/Central"),
                    ("US/East-Indiana", "US/East-Indiana"),
                    ("US/Eastern", "US/Eastern"),
                    ("US/Hawaii", "US/Hawaii"),
                    ("US/Indiana-Starke", "US/Indiana-Starke"),
                    ("US/Michigan", "US/Michigan"),
                    ("US/Mountain", "US/Mountain"),
                    ("US/Pacific", "US/Pacific"),
                    ("US/Samoa", "US/Samoa"),
                    ("UTC", "UTC"),
                    ("Universal", "Universal"),
                    ("W-SU", "W-SU"),
                    ("WET", "WET"),
                    ("Zulu", "Zulu"),
                    ("localtime", "localtime"),
                ],
                default="UTC",
                help_text="All event dates will be localised and interpreted to be in this timezone.",
                max_length=32,
            ),
        ),
        migrations.AlterField(
            model_name="room",
            name="description",
            field=models.TextField(blank=True, null=True, verbose_name="Description"),
        ),
        migrations.AlterField(
            model_name="room",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="room",
            name="name",
            field=i18nfield.fields.I18nCharField(max_length=300, verbose_name="Name"),
        ),
        migrations.AlterField(
            model_name="submission",
            name="content_locale",
            field=models.CharField(
                default="en", max_length=32, verbose_name="Language"
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="id",
            field=models.UUIDField(
                default=uuid.uuid4, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="last_login",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="locale",
            field=models.CharField(
                choices=[("en", "English"), ("de", "Deutsch")],
                default="en",
                max_length=50,
                verbose_name="Language",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="timezone",
            field=models.CharField(
                default="Europe/Berlin", max_length=100, verbose_name="Timezone"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="user",
            unique_together={("client_id", "event"), ("token_id", "event")},
        ),
        migrations.CreateModel(
            name="Announcement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("text", models.TextField()),
                ("show_until", models.DateTimeField(null=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=8,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="announcements",
                        to="eventyaybase.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AnonymousInvite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "short_token",
                    models.CharField(
                        db_index=True,
                        default=eventyay.base.models.room.generate_short_token,
                        max_length=150,
                        unique=True,
                    ),
                ),
                ("expires", models.DateTimeField()),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anonymous_invites",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anonymous_invites",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("type", models.CharField(max_length=255)),
                ("data", models.JSONField()),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audits",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BBBServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("url", models.URLField()),
                ("secret", models.CharField(max_length=300)),
                ("rooms_only", models.BooleanField(default=False)),
                ("cost", models.IntegerField(default=0)),
                (
                    "event_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BBBCall",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "meeting_id",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "attendee_pw",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "moderator_pw",
                    models.CharField(
                        default=eventyay.base.models.bbb.random_key, max_length=300
                    ),
                ),
                (
                    "guest_policy",
                    models.CharField(default="ALWAYS_ACCEPT", max_length=50),
                ),
                ("voice_bridge", models.CharField(blank=True, max_length=5, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbb_calls",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "invited_members",
                    models.ManyToManyField(
                        related_name="bbb_invites", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "room",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbb_call",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventyaybase.bbbserver",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=300, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channels",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "room",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatEvent",
            fields=[
                ("id", models.BigIntegerField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("edited", models.DateTimeField(null=True)),
                ("event_type", models.CharField(max_length=200)),
                ("content", models.JSONField()),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_events",
                        to="eventyaybase.channel",
                    ),
                ),
                (
                    "replaces",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replaced_by",
                        to="eventyaybase.chatevent",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="chat_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatEventNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chat_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="eventyaybase.chatevent",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Event Notification",
                "verbose_name_plural": "Chat Event Notifications",
            },
        ),
        migrations.CreateModel(
            name="ChatEventReaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reaction", models.TextField()),
                (
                    "chat_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="eventyaybase.chatevent",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventGrant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.CharField(max_length=200)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_grants",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_grants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventPlannedUsage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField()),
                ("end", models.DateField()),
                ("attendees", models.PositiveIntegerField()),
                ("notes", models.TextField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="planned_usages",
                        to="eventyaybase.event",
                    ),
                ),
            ],
            options={
                "ordering": ("start",),
            },
        ),
        migrations.CreateModel(
            name="Exhibitor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=80, null=True)),
                ("tagline", models.CharField(max_length=250, null=True)),
                ("short_text", models.TextField(max_length=500, null=True)),
                ("logo", models.URLField(blank=True, null=True)),
                ("banner_list", models.URLField(blank=True, null=True)),
                ("banner_detail", models.URLField(blank=True, null=True)),
                ("contact_enabled", models.BooleanField(default=True)),
                ("text_legacy", models.TextField(null=True)),
                (
                    "text_content",
                    models.JSONField(
                        default=eventyay.base.models.exhibitor.default_text
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        choices=[("1x1", "S"), ("3x1", "M"), ("3x3", "L")],
                        default="1x1",
                        max_length=3,
                    ),
                ),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitors",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "highlighted_room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="highlighted_by_exhibitors",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitors",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContactRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("missed", "Missed"),
                            ("answered", "Answered"),
                        ],
                        default="open",
                        max_length=8,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "answered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_answered_contact_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_contact_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_requests",
                        to="eventyaybase.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[("profile", "Profile"), ("download", "Download")],
                        default="profile",
                        max_length=32,
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="eventyaybase.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorSocialMediaLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_media_links",
                        to="eventyaybase.exhibitor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExhibitorView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="eventyaybase.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exhibitor_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JanusServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("url", models.CharField(max_length=200)),
                ("room_create_key", models.CharField(max_length=300)),
                (
                    "event_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Poll",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("open", "Open"),
                            ("closed", "Closed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=8,
                    ),
                ),
                (
                    "poll_type",
                    models.CharField(
                        choices=[("choice", "Choice"), ("multi", "Multi Choice")],
                        default="choice",
                        max_length=6,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_pinned", models.BooleanField(default=False)),
                ("cached_results", models.JSONField(blank=True, null=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polls",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PollOption",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("order", models.IntegerField(default=1)),
                ("content", models.TextField()),
                (
                    "poll",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="eventyaybase.poll",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Poster",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("import_id", models.TextField(blank=True, db_index=True, null=True)),
                ("title", models.TextField(null=True)),
                (
                    "abstract",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                (
                    "authors",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                (
                    "tags",
                    models.JSONField(default=eventyay.base.models.poster.default_text),
                ),
                ("category", models.TextField(blank=True, null=True)),
                ("poster_url", models.URLField(blank=True, null=True)),
                ("poster_preview", models.URLField(blank=True, null=True)),
                ("schedule_session", models.TextField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posters",
                        to="eventyaybase.channel",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posters",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "parent_room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_posters",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "presentation_room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="presentation_posters",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PosterLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_text", models.CharField(max_length=300)),
                ("url", models.URLField()),
                ("sorting_priority", models.IntegerField(default=0)),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="eventyaybase.poster",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("reaction", models.CharField(max_length=100)),
                ("amount", models.IntegerField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="eventyaybase.room",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoomGrant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.CharField(max_length=200)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_grants",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_grants",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_grants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoomQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("content", models.TextField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("visible", "Visible"),
                            ("mod_queue", "Mod Queue"),
                            ("archived", "Archived"),
                        ],
                        default="mod_queue",
                        max_length=10,
                    ),
                ),
                ("answered", models.BooleanField(default=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_pinned", models.BooleanField(default=False)),
                (
                    "moderator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="moderated_questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="questions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="eventyaybase.roomquestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoulettePairing",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roulette_pairing_left",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roulette_pairing_right",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ShortToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("expires", models.DateTimeField()),
                (
                    "short_token",
                    models.CharField(
                        db_index=True,
                        default=eventyay.base.models.auth.generate_short_token,
                        max_length=150,
                        unique=True,
                    ),
                ),
                ("long_token", models.TextField()),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="short_tokens",
                        to="eventyaybase.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StoredFile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("filename", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255)),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        max_length=999,
                        null=True,
                        upload_to=eventyay.base.models.storage_model.storedfile_name,
                    ),
                ),
                ("public", models.BooleanField(default=False)),
                ("source_url", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("module", models.CharField(max_length=200)),
                ("message", models.TextField(blank=True, null=True)),
                ("trace", models.TextField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="system_logs",
                        to="eventyaybase.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TurnServer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("hostname", models.CharField(max_length=300)),
                ("auth_secret", models.CharField(max_length=300)),
                (
                    "event_exclusive",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="eventyaybase.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField(auto_now_add=True)),
                ("end", models.DateTimeField(db_index=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="eventyaybase.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["start"], name="eventyaybas_start_203433_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="ExhibitorStaff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "exhibitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff",
                        to="eventyaybase.exhibitor",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exhibitor_staff",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "exhibitor")},
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("volatile", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(default=False)),
                (
                    "channel",
                    models.ForeignKey(
                        max_length=300,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="eventyaybase.channel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_channels",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "channel")},
            },
        ),
        migrations.CreateModel(
            name="PollVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="eventyaybase.polloption",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poll_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("option", "sender")},
            },
        ),
        migrations.CreateModel(
            name="PosterPresenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="presenters",
                        to="eventyaybase.poster",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="poster_presenter",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "poster")},
            },
        ),
        migrations.CreateModel(
            name="PosterVote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "poster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="eventyaybase.poster",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="poster_votes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "poster")},
            },
        ),
        migrations.CreateModel(
            name="RoomView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField(auto_now_add=True)),
                ("end", models.DateTimeField(db_index=True, null=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["start"], name="eventyaybas_start_3cf324_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="RouletteRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("socket_id", models.UUIDField()),
                ("expiry", models.DateTimeField()),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="eventyaybase.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("socket_id", "room")},
            },
        ),
    ]
