# Generated by Django 5.2.5 on 2025-09-06 11:42

import django.db.models.deletion
import eventyay.base.models.auth_token
import eventyay.base.models.information
import eventyay.base.models.mixins
import i18nfield.fields
import rules.contrib.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0002_event_created_event_updated_organizer_created_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SpeakerInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('target_group', models.CharField(choices=[('submitters', 'all'), ('accepted', 'All accepted speakers'), ('confirmed', 'Only confirmed speakers')], default='accepted', max_length=11)),
                ('title', i18nfield.fields.I18nCharField(max_length=200, verbose_name='Subject')),
                ('text', i18nfield.fields.I18nTextField(help_text='You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.', verbose_name='Text')),
                ('resource', models.FileField(blank=True, help_text='Please try to keep your upload small, preferably below 16 MB.', null=True, upload_to=eventyay.base.models.information.resource_path, verbose_name='File')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='information', to='base.event')),
                ('limit_tracks', models.ManyToManyField(blank=True, help_text='Leave empty to show this information to all tracks.', to='base.track', verbose_name='Limit to tracks')),
                ('limit_types', models.ManyToManyField(blank=True, help_text='Leave empty to show this information for all proposal types.', to='base.submissiontype', verbose_name='Limit to proposal types')),
            ],
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserApiToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=190, verbose_name='Name')),
                ('token', models.CharField(default=eventyay.base.models.auth_token.generate_api_token, max_length=64, unique=True)),
                ('expires', models.DateTimeField(blank=True, null=True, verbose_name='Expiry date')),
                ('endpoints', models.JSONField(blank=True, default=dict)),
                ('version', models.CharField(blank=True, max_length=12, null=True, verbose_name='API version')),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('events', models.ManyToManyField(related_name='+', to='base.event', verbose_name='Events')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(eventyay.base.models.mixins.LogMixin, eventyay.base.models.mixins.FileCleanupMixin, rules.contrib.models.RulesModelMixin, models.Model),
        ),
    ]
