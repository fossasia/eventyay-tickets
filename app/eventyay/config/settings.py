"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import configparser
import importlib.util
import os
import sys
from pathlib import Path
from urllib.parse import urlparse
from django.utils.translation import gettext_lazy as _
from django.utils.crypto import get_random_string
from kombu import Queue
from redis.asyncio.retry import Retry
from redis.backoff import ExponentialBackoff
from eventyay.helpers.config import EnvOrParserConfig
from .settings_helpers import build_db_tls_config, build_redis_tls_config
from pycountry import currencies



DATA_DIR = os.environ.get("EVENTYAY_DATA_DIR", os.path.join(BASE_DIR, "data"))
LOG_DIR = os.path.join(DATA_DIR, "logs")
MEDIA_ROOT = os.path.join(DATA_DIR, "media")
STATIC_ROOT = BASE_DIR / 'static'
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o775
FILE_UPLOAD_PERMISSIONS = 0o644

# Create necessary directories
if not os.path.exists(DATA_DIR):
    os.mkdir(DATA_DIR)
if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)
if not os.path.exists(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)

# Configuration file handling
_config = configparser.RawConfigParser()

if 'EVENTYAY_CONFIG_FILE' in os.environ:
    _config.read_file(open(os.environ.get('EVENTYAY_CONFIG_FILE'), encoding='utf-8'))
else:
    _config.read(
        ['/etc/eventyay/eventyay.cfg', os.path.expanduser('~/.eventyay.cfg'), 'eventyay.cfg'],
        encoding='utf-8',
    )

config = EnvOrParserConfig(_config)

def instance_name(request):
    from django.conf import settings
    return {'INSTANCE_NAME': getattr(settings, 'INSTANCE_NAME', 'eventyay')}

debug_fallback = 'runserver' in sys.argv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Secret key configuration (Eventyay style)
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get('SECRET_KEY', 'WhatAWonderfulWorldWeLiveIn196274623')

# Path configurations
BASE_PATH = config.get('eventyay', 'base_path', fallback='/tickets')

# Site URL configuration
SITE_URL = config.get('eventyay', 'url', fallback='http://localhost')

# Debug configuration
DEBUG = bool(int(os.environ.get('DEBUG', default=1)))

ALLOWED_HOSTS = [ "*", "127.0.0.1" ]
# Security settings
X_FRAME_OPTIONS = 'DENY'

# URL settings
ROOT_URLCONF = 'eventyay.multidomain.maindomain_urlconf'


HAS_CELERY = config.has_option('celery', 'broker')
if HAS_CELERY:
    CELERY_BROKER_URL = config.get('celery', 'broker')
    CELERY_RESULT_BACKEND = config.get('celery', 'backend')
else:
    CELERY_TASK_ALWAYS_EAGER = True


AUTH_USER_MODEL = 'base.User'
_LIBRARY_APPS = (
    'bootstrap3',
    'corsheaders',
    'channels',
    'compressor',
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'djangoformsetjs',
    'oauth2_provider',
    'rest_framework',
    'statici18n',
)

if DEBUG and importlib.util.find_spec('django_extensions'):
    _LIBRARY_APPS += ('django_extensions',)

if DEBUG and importlib.util.find_spec('debug_toolbar'):
    _LIBRARY_APPS += ('debug_toolbar',)

_OURS_APPS = (
    'eventyay.api',
    'eventyay.base',
    'eventyay.common',
    'eventyay.control.ControlConfig',
    'eventyay.eventyay_common',
    'eventyay.features.live.LiveConfig',
    'eventyay.features.analytics.graphs.GraphsConfig',
    'eventyay.features.importers.ImportersConfig',
    'eventyay.storage.StorageConfig',
    'eventyay.features.social.SocialConfig',
    'eventyay.features.integrations.zoom.ZoomConfig',
    'eventyay.control.ControlConfig',
    'eventyay.helpers',
    'eventyay.multidomain',
    'eventyay.presale',
)
INSTALLED_APPS = _LIBRARY_APPS + _OURS_APPS

_LIBRARY_MIDDLEWARES = (
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

if DEBUG and importlib.util.find_spec('debug_toolbar'):
    _LIBRARY_MIDDLEWARES += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

_OURS_MIDDLEWARES = (
    'eventyay.base.middleware.CustomCommonMiddleware',
    'eventyay.base.middleware.LocaleMiddleware',
    'eventyay.base.middleware.SecurityMiddleware',
    'eventyay.multidomain.middlewares.MultiDomainMiddleware',
    'eventyay.multidomain.middlewares.SessionMiddleware',
    'eventyay.multidomain.middlewares.CsrfViewMiddleware',
    'eventyay.control.middleware.PermissionMiddleware',
    'eventyay.control.middleware.AuditLogMiddleware',
    'eventyay.control.video.middleware.SessionMiddleware',
    'eventyay.control.video.middleware.AuthenticationMiddleware',
    'eventyay.control.video.middleware.MessageMiddleware',
)


MIDDLEWARE = _LIBRARY_MIDDLEWARES + _OURS_MIDDLEWARES



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.request',
                'django.template.context_processors.tz',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'eventyay.config.settings.instance_name',
            ],
        },
    },
]


WSGI_APPLICATION = 'eventyay.config.wsgi.application'
ASGI_APPLICATION = "eventyay.config.routing.application"
# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'eventyay-db'),
        # When these values are `None`, "peer" connection method will be used.
        # We just need to have a PostgreSQL user with the same name as Linux user.
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST'),
        'PORT': os.getenv('POSTGRES_PORT'),
        'CONN_MAX_AGE': 120,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


ENTROPY = {
    'order_code': config.getint('entropy', 'order_code', fallback=5),
    'ticket_secret': config.getint('entropy', 'ticket_secret', fallback=32),
    'voucher_code': config.getint('entropy', 'voucher_code', fallback=16),
    'giftcard_secret': config.getint('entropy', 'giftcard_secret', fallback=12),
}
EVENTYAY_PRIMARY_COLOR = '#2185d0'
# Redis configuration
redis_connection_kwargs = {
    "retry": Retry(ExponentialBackoff(), 3),
    "health_check_interval": 120,
}

if os.getenv("EVENTYAY_REDIS_URLS", _config.get("redis", "urls", fallback="")):
    REDIS_HOSTS = [
        {"address": u, **redis_connection_kwargs}
        for u in os.getenv(
            "EVENTYAY_REDIS_URLS", _config.get("redis", "urls", fallback="")
        ).split(",")
    ]
else:
    redis_auth = os.getenv(
        "EVENTYAY_REDIS_AUTH",
        _config.get("redis", "auth", fallback=""),
    )
    redis_url = (
        "redis://"
        + ((":" + redis_auth + "@") if redis_auth else "")
        + os.getenv(
            "EVENTYAY_REDIS_HOST",
            _config.get("redis", "host", fallback="127.0.0.1"),
        )
        + ":"
        + os.getenv(
            "EVENTYAY_REDIS_PORT",
            _config.get("redis", "port", fallback="6379"),
        )
        + "/"
        + os.getenv(
            "EVENTYAY_REDIS_DB",
            _config.get("redis", "db", fallback="0"),
        )
    )
    REDIS_HOSTS = [{"address": redis_url, **redis_connection_kwargs}]

REDIS_USE_PUBSUB = os.getenv(
    "EVENTYAY_REDIS_USE_PUBSUB",
    _config.get("redis", "use_pubsub", fallback="false"),
) in (True, "yes", "on", "true", "True", "1")

# Channel layers configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": (
            "channels_redis.pubsub.RedisPubSubChannelLayer"
            if REDIS_USE_PUBSUB
            else "channels_redis.core.RedisChannelLayer"
        ),
        "CONFIG": {
            "hosts": REDIS_HOSTS,
            "prefix": "eventyay:{}:asgi:".format(
                _config.get("redis", "db", fallback="0")
            ),
            "capacity": 10000,
        },
    },
}

# URL configurations
SHORT_URL = os.getenv(
    "EVENTYAY_SHORT_URL",
    _config.get("eventyay", "short_url", fallback=SITE_URL),
)

if os.getenv("EVENTYAY_COOKIE_DOMAIN", ""):
    CSRF_COOKIE_DOMAIN = os.getenv("EVENTYAY_COOKIE_DOMAIN", "")

STATIC_URL = config.get('urls', 'static', fallback=BASE_PATH + '/static/')
MEDIA_URL = os.getenv(
    "EVENTYAY_MEDIA_URL", _config.get("urls", "media", fallback="/media/")
)
TALK_BASE_PATH = config.get('eventyay', 'talk_base_path', fallback='/talks')

WEBSOCKET_PROTOCOL = os.getenv(
    "EVENTYAY_WEBSOCKET_PROTOCOL",
    _config.get("websocket", "protocol", fallback="wss"),
)

# Storage configuration
STORAGES = {
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    },
}

nanocdn = os.getenv("EVENTYAY_NANOCDN", _config.get("urls", "nanocdn", fallback=""))
if nanocdn:
    NANOCDN_URL = nanocdn
    STORAGES["default"][
        "BACKEND"
    ] = "eventyay.base.integrations.platforms.storage.nanocdn.NanoCDNStorage"

# Third-party service configurations
ZOOM_KEY = os.getenv("EVENTYAY_ZOOM_KEY", _config.get("zoom", "key", fallback=""))
ZOOM_SECRET = os.getenv(
    "EVENTYAY_ZOOM_SECRET", _config.get("zoom", "secret", fallback="")
)

CONTROL_SECRET = os.getenv(
    "EVENTYAY_CONTROL_SECRET", _config.get("control", "secret", fallback="")
)

STATSD_HOST = os.getenv(
    "EVENTYAY_STATSD_HOST", _config.get("statsd", "host", fallback="")
)
STATSD_PORT = os.getenv(
    "EVENTYAY_STATSD_PORT", _config.get("statsd", "port", fallback="9125")
)
STATSD_PREFIX = "eventyay"

TWITTER_CLIENT_ID = os.getenv(
    "EVENTYAY_TWITTER_CLIENT_ID",
    _config.get("twitter", "client_id", fallback=""),
)
TWITTER_CLIENT_SECRET = os.getenv(
    "EVENTYAY_TWITTER_CLIENT_SECRET",
    _config.get("twitter", "client_secret", fallback=""),
)
LINKEDIN_CLIENT_ID = os.getenv(
    "EVENTYAY_LINKEDIN_CLIENT_ID",
    _config.get("linkedin", "client_id", fallback=""),
)
LINKEDIN_CLIENT_SECRET = os.getenv(
    "EVENTYAY_LINKEDIN_CLIENT_SECRET",
    _config.get("linkedin", "client_secret", fallback=""),
)

# Cache configuration (merged from both projects)
CACHES = {
    'default': {
        'BACKEND': 'eventyay.helpers.cache.CustomDummyCache',
    },
    "process": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    },
}
REAL_CACHE_USED = False
SESSION_ENGINE = None

HAS_MEMCACHED = config.has_option('memcached', 'location')
if HAS_MEMCACHED:
    REAL_CACHE_USED = True
    CACHES['default'] = {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': config.get('memcached', 'location'),
    }

HAS_REDIS = config.has_option('redis', 'location')
if HAS_REDIS:
    redis_options = {
        'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        'REDIS_CLIENT_KWARGS': {'health_check_interval': 30},
    }
    redis_tls_config = build_redis_tls_config(config)
    if redis_tls_config is not None:
        redis_options['CONNECTION_POOL_KWARGS'] = redis_tls_config
        redis_options['REDIS_CLIENT_KWARGS'].update(redis_tls_config)

    if config.has_option('redis', 'password'):
        redis_options['PASSWORD'] = config.get('redis', 'password')

    CACHES['redis'] = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('redis', 'location'),
        'OPTIONS': redis_options,
    }
    CACHES['redis_sessions'] = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('redis', 'location'),
        'TIMEOUT': 3600 * 24 * 30,
        'OPTIONS': redis_options,
    }
    if not HAS_MEMCACHED:
        CACHES['default'] = CACHES['redis']
        REAL_CACHE_USED = True
    if config.getboolean('redis', 'sessions', fallback=False):
        SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
        SESSION_CACHE_ALIAS = 'redis_sessions'

if not SESSION_ENGINE:
    if REAL_CACHE_USED:
        SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
    else:
        SESSION_ENGINE = 'django.contrib.sessions.backends.db'


try:
    import django_extensions  # noqa
    INSTALLED_APPS.append("django_extensions")
except ImportError:
    pass




# CORS configuration
CORS_ORIGIN_REGEX_WHITELIST = [
    r"^https?://([\w\-]+\.)?eventyay\.com$",
    r"^https?://app-test\.eventyay\.com(:\d+)?$",
    r"^https?://app\.eventyay\.com(:\d+)?$",
]
if DEBUG:
    CORS_ORIGIN_REGEX_WHITELIST = [
        r"^http://localhost$",
        r"^http://localhost:\d+$",
    ]

# Security settings
X_FRAME_OPTIONS = "DENY"
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
CSP_DEFAULT_SRC = ("'self'", "'unsafe-eval'")
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

# Template configuration
template_loaders = (
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
)
if not DEBUG:
    template_loaders = (("django.template.loaders.cached.Loader", template_loaders),)




# Internationalization
LANGUAGE_CODE = "en"
TIME_ZONE = "Europe/Berlin"
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ("en", "English"),
    ("de", "Deutsch"),
]

LOCALE_PATHS = (os.path.join(os.path.dirname(__file__), "locale"),)





# Debug toolbar configuration
DEBUG_TOOLBAR_PATCH_SETTINGS = False
DEBUG_TOOLBAR_CONFIG = {
    "JQUERY_URL": "",
}
INTERNAL_IPS = ("127.0.0.1", "::1")

# Logging configuration
loglevel = "DEBUG" if DEBUG else "INFO"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "%(asctime)s %(levelname)s %(thread)d %(name)s %(module)s %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": loglevel,
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
        "file": {
            "level": loglevel,
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, "eventyay.log"),
            "formatter": "default",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file", "console"],
            "level": loglevel,
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file", "console"],
            "level": loglevel,
            "propagate": False,
        },
        "django.security": {
            "handlers": ["file", "console"],
            "level": loglevel,
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["file", "console"],
            "level": loglevel,
            "propagate": False,
        },
    },
}

if DEBUG:
    import logging
    logging.getLogger("matplotlib").setLevel(logging.WARNING)

# REST Framework configuration
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "eventyay.base.api.auth.NoPermission",
    ],
    "UNAUTHENTICATED_USER": "eventyay.base.api.auth.AnonymousUser",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "PAGE_SIZE": 50,
    "DEFAULT_AUTHENTICATION_CLASSES": ("eventyay.api.auth.api_auth.EventTokenAuthentication",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "UNICODE_JSON": False,
}

# Static files configuration
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    'compressor.finders.CompressorFinder',
)
STATICFILES_DIRS = []
STATICI18N_ROOT = os.path.join(BASE_DIR, 'static')

# Login/Logout URLs

LOGIN_REDIRECT_URL = "/control/"

# Version and environment
EVENTYAY_COMMIT = os.environ.get("EVENTYAY_COMMIT_SHA", "unknown")
EVENTYAY_ENVIRONMENT = os.environ.get("EVENTYAY_ENVIRONMENT", "unknown")

# Celery configuration
CELERY_BROKER_URL = REDIS_HOSTS[0]["address"]
CELERY_RESULT_BACKEND = REDIS_HOSTS[0]["address"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_QUEUES = (
    Queue('default', routing_key='default.#'),
    Queue('longrunning', routing_key='longrunning.#'),
    Queue('background', routing_key='background.#'),
    Queue('notifications', routing_key='notifications.#'),
)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TASK_ALWAYS_EAGER = os.environ.get("EVENTYAY_CELERY_EAGER", "") == "true"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_ROUTES = (
    [
        ('eventyay.base.services.notifications.*', {'queue': 'notifications'}),
        ('eventyay.api.webhooks.*', {'queue': 'notifications'}),
    ],
)

# Sentry configuration
SENTRY_DSN = os.environ.get(
    "EVENTYAY_SENTRY_DSN", _config.get("sentry", "dsn", fallback="")
)
if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[CeleryIntegration(), DjangoIntegration()],
        send_default_pii=False,
        debug=DEBUG,
        release=EVENTYAY_COMMIT,
        environment=EVENTYAY_ENVIRONMENT,
    )


# Eventyay specific configurations
ENTROPY = {
    'order_code': config.getint('entropy', 'order_code', fallback=5),
    'ticket_secret': config.getint('entropy', 'ticket_secret', fallback=32),
    'voucher_code': config.getint('entropy', 'voucher_code', fallback=16),
    'giftcard_secret': config.getint('entropy', 'giftcard_secret', fallback=12),
}


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
DEFAULT_CURRENCY = config.get('eventyay', 'currency', fallback='EUR')
CURRENCY_PLACES = {
    # default is 2
    'BIF': 0,
    'CLP': 0,
    'DJF': 0,
    'GNF': 0,
    'JPY': 0,
    'KMF': 0,
    'KRW': 0,
    'MGA': 0,
    'PYG': 0,
    'RWF': 0,
    'VND': 0,
    'VUV': 0,
    'XAF': 0,
    'XOF': 0,
    'XPF': 0,
}
CURRENCIES = list(currencies)
EVENTYAY_EMAIL_NONE_VALUE = 'info@eventyay.com'
MAIL_FROM = SERVER_EMAIL = DEFAULT_FROM_EMAIL = config.get('mail', 'from', fallback='eventyay@localhost')
TALK_HOSTNAME = config.get('eventyay', 'talk_hostname', fallback='https://wikimania-dev.eventyay.com/')

# Internal settings
SESSION_COOKIE_NAME = 'eventyay_session'
LANGUAGE_COOKIE_NAME = 'eventyay_language'
CSRF_COOKIE_NAME = 'eventyay_csrftoken'
# TODO that probably needs adjustment for the actual deployment
CSRF_TRUSTED_ORIGINS = ['http://localhost:1337', 'http://next.eventyay.com:1337', 'https://next.eventyay.com']
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_DOMAIN = config.get('eventyay', 'cookie_domain', fallback=None)

# Metrics configuration
METRICS_ENABLED = config.getboolean('metrics', 'enabled', fallback=False)
METRICS_USER = config.get('metrics', 'user', fallback='metrics')
METRICS_PASSPHRASE = config.get('metrics', 'passphrase', fallback='')

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Multifactor authentication configuration
MULTIFACTOR = {
    "LOGIN_CALLBACK": False,
    "RECHECK": True,
    "RECHECK_MIN": 3600 * 24,
    "RECHECK_MAX": 3600 * 24 * 7,
    "FIDO_SERVER_ID": urlparse(SITE_URL).hostname,
    "FIDO_SERVER_NAME": "Eventyay",
    "TOKEN_ISSUER_NAME": "Eventyay",
    "U2F_APPID": SITE_URL,
    "FACTORS": ["FIDO2"],
    "FALLBACKS": {},
}

# Adjustable settings
INSTANCE_NAME = config.get('eventyay', 'instance_name', fallback='eventyay')
EVENTYAY_REGISTRATION = config.getboolean('eventyay', 'registration', fallback=True)
EVENTYAY_PASSWORD_RESET = config.getboolean('eventyay', 'password_reset', fallback=True)
EVENTYAY_LONG_SESSIONS = config.getboolean('eventyay', 'long_sessions', fallback=True)
EVENTYAY_AUTH_BACKENDS = config.get('eventyay', 'auth_backends', fallback='eventyay.base.auth.NativeAuthBackend').split(
    ','
)
EVENTYAY_ADMIN_AUDIT_COMMENTS = config.getboolean('eventyay', 'audit_comments', fallback=False)
EVENTYAY_OBLIGATORY_2FA = config.getboolean('eventyay', 'obligatory_2fa', fallback=False)
EVENTYAY_SESSION_TIMEOUT_RELATIVE = 3600 * 3
EVENTYAY_SESSION_TIMEOUT_ABSOLUTE = 3600 * 12

LOG_CSP = config.getboolean('eventyay', 'csp_log', fallback=True)
CSP_ADDITIONAL_HEADER = config.get('eventyay', 'csp_additional_header', fallback='')

# Django allauth settings for social login
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True

SOCIALACCOUNT_ADAPTER = 'eventyay.plugins.socialauth.adapter.CustomSocialAccountAdapter'
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_LOGIN_ON_GET = True

OAUTH2_PROVIDER_APPLICATION_MODEL = 'api.OAuthApplication'
OAUTH2_PROVIDER_GRANT_MODEL = 'api.OAuthGrant'
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = 'api.OAuthAccessToken'
OAUTH2_PROVIDER_ID_TOKEN_MODEL = 'api.OAuthIDToken'
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = 'api.OAuthRefreshToken'
OAUTH2_PROVIDER = {
    'SCOPES': {
        'profile': _('User profile only'),
        'read': _('Read access'),
        'write': _('Write access'),
    },
    'OAUTH2_VALIDATOR_CLASS': 'eventyay.api.oauth.Validator',
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'] if not DEBUG else ['http', 'https'],
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600 * 24,
    'ROTATE_REFRESH_TOKEN': False,
    'PKCE_REQUIRED': False,
    'OIDC_RESPONSE_TYPES_SUPPORTED': ['code'],  # We don't support proper OIDC for now
}


LOGIN_URL = 'eventyay_common:auth.login'
LOGIN_URL_CONTROL = 'eventyay_common:auth.login'
# CSRF_FAILURE_VIEW = 'eventyay.base.views.errors.csrf_failure'


COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
    ('text/vue', 'eventyay.helpers.compressor.VueCompiler'),
)

COMPRESS_ENABLED = COMPRESS_OFFLINE = not debug_fallback
COMPRESS_CSS_FILTERS = (
    # CssAbsoluteFilter is incredibly slow, especially when dealing with our _flags.scss
    # However, we don't need it if we consequently use the static() function in Sass
    # 'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSCompressorFilter',
)

_LOGGING_HANDLERS = {
    'console': {
        'level': 'DEBUG',
        'class': 'logging.StreamHandler',
        'formatter': 'verbose',
    },
    'rich': {
        'level': 'DEBUG',
        'class': 'rich.logging.RichHandler' if os.getenv('TERM') else 'logging.StreamHandler',
        'formatter': 'tiny' if os.getenv('TERM') else 'verbose',
    },
}
_LOGGING_FORMATTERS = {
    'verbose': {'format': '%(levelname)s %(asctime)s %(module)s: %(message)s'},
    'tiny': {
        'format': '%(message)s',
        'datefmt': '[%X]',
    },
}
CONSOLE_HANDLER = 'rich' if DEBUG else 'console'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': 'WARNING',
        'handlers': [CONSOLE_HANDLER],
    },
    'formatters': _LOGGING_FORMATTERS,
    'handlers': _LOGGING_HANDLERS,
    'loggers': {
        'django.db.backends': {
            'handlers': [CONSOLE_HANDLER],
            'level': 'WARNING',
            'propagate': False,
        },
        'eventyay': {
            'handlers': [CONSOLE_HANDLER],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        }
    },
}