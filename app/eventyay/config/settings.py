"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import configparser
import importlib.util
import os
import sys
from pathlib import Path

import django.conf.locale
from django.utils.translation import gettext_lazy as _
from kombu import Queue
from pycountry import currencies

from eventyay.helpers.config import EnvOrParserConfig

from .settings_helpers import build_redis_tls_config

_config = configparser.RawConfigParser()
if 'EVENTYAY_CONFIG_FILE' in os.environ:
    _config.read_file(open(os.environ.get('EVENTYAY_CONFIG_FILE'), encoding='utf-8'))
else:
    _config.read(
        ['/etc/eventyay/eventyay.cfg', os.path.expanduser('~/.eventyay.cfg'), 'eventyay.cfg'],
        encoding='utf-8',
    )
config = EnvOrParserConfig(_config)


def instance_name(request):
    from django.conf import settings

    return {'INSTANCE_NAME': getattr(settings, 'INSTANCE_NAME', 'eventyay')}


debug_fallback = 'runserver' in sys.argv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = os.environ.get(
    'DATA_DIR',
    config.get('eventyay', 'datadir', fallback='data')
)
LOG_DIR = os.path.join(DATA_DIR, 'logs')
MEDIA_ROOT = os.path.join(DATA_DIR, 'media')
PROFILE_DIR = os.path.join(DATA_DIR, 'profiles')
BASE_PATH = ''
STATIC_URL = BASE_PATH + '/static/'
MEDIA_URL = BASE_PATH + '/media/'
if not os.path.exists(DATA_DIR):
    os.mkdir(DATA_DIR)
if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)
if not os.path.exists(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)

DATABASE_REPLICA = 'default'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'WhatAWonderfulWorldWeLiveIn196274623')
SITE_URL = config.get('eventyay', 'url', fallback='http://localhost')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DEBUG', default=1)))

ALLOWED_HOSTS = ['*', '127.0.0.1']

# Security settings
X_FRAME_OPTIONS = 'DENY'

# URL settings
ROOT_URLCONF = 'eventyay.multidomain.maindomain_urlconf'

HAS_CELERY = config.has_option('celery', 'broker')
if HAS_CELERY:
    CELERY_BROKER_URL = config.get('celery', 'broker')
    CELERY_RESULT_BACKEND = config.get('celery', 'backend')
else:
    CELERY_TASK_ALWAYS_EAGER = True

# Application definition

AUTH_USER_MODEL = 'base.User'

_LIBRARY_APPS = (
    'bootstrap3',
    'compressor',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_filters',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'django_celery_beat',
    'djangoformsetjs',
    'oauth2_provider',
    'statici18n',
    'rest_framework',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.mediawiki',
)

if DEBUG and importlib.util.find_spec('django_extensions'):
    _LIBRARY_APPS += ('django_extensions',)

if DEBUG and importlib.util.find_spec('debug_toolbar'):
    _LIBRARY_APPS += ('debug_toolbar',)

_OURS_APPS = (
    'eventyay.api',
    'eventyay.base',
    'eventyay.common',
    'eventyay.control',
    'eventyay.eventyay_common',
    'eventyay.helpers',
    'eventyay.multidomain',
    'eventyay.presale',
    'eventyay.plugins.socialauth',
    'eventyay.plugins.banktransfer',
    'eventyay.plugins.sendmail',
    'eventyay.plugins.statistics',
    'eventyay.plugins.reports',
    'eventyay.plugins.checkinlists',
    'eventyay.plugins.manualpayment',
    'eventyay.plugins.returnurl',
    'eventyay.plugins.scheduledtasks',
    'eventyay.plugins.webcheckin',
)

INSTALLED_APPS = _LIBRARY_APPS + _OURS_APPS

_LIBRARY_MIDDLEWARES = (
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
)

if DEBUG and importlib.util.find_spec('debug_toolbar'):
    _LIBRARY_MIDDLEWARES += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

_OURS_MIDDLEWARES = (
    'eventyay.base.middleware.CustomCommonMiddleware',
    'eventyay.multidomain.middlewares.MultiDomainMiddleware',
    'eventyay.multidomain.middlewares.SessionMiddleware',
    'eventyay.multidomain.middlewares.CsrfViewMiddleware',
    'eventyay.control.middleware.PermissionMiddleware',
    'eventyay.control.middleware.AuditLogMiddleware',
    'eventyay.base.middleware.LocaleMiddleware',
    'eventyay.base.middleware.SecurityMiddleware',
    'eventyay.presale.middleware.EventMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'eventyay.api.middleware.ApiScopeMiddleware',
)

MIDDLEWARE = _LIBRARY_MIDDLEWARES + _OURS_MIDDLEWARES

CORE_MODULES = {
    'eventyay.base',
    'eventyay.presale',
    'eventyay.control',
    'eventyay.plugins.checkinlists',
    'eventyay.plugins.reports',
}

template_loaders = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)
if not DEBUG:
    template_loaders = (('django.template.loaders.cached.Loader', template_loaders),)

TEMPLATES = (
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(DATA_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates'),
        ],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'eventyay.base.context.contextprocessor',
                'eventyay.control.context.contextprocessor',
                'eventyay.presale.context.contextprocessor',
                'eventyay.eventyay_common.context.contextprocessor',
                'django.template.context_processors.request',
            ],
            'loaders': template_loaders,
        },
    },
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            BASE_DIR / 'jinja-templates',
        ],
        'OPTIONS': {
            'environment': 'eventyay.jinja.environment',
            'extensions': (
                'jinja2.ext.i18n',
                'jinja2.ext.do',
                'jinja2.ext.debug',
                'jinja2.ext.loopcontrols',
            ),
        },
    },
)

WSGI_APPLICATION = 'eventyay.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'eventyay-db'),
        # When these values are `None`, "peer" connection method will be used.
        # We just need to have a PostgreSQL user with the same name as Linux user.
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST'),
        'PORT': os.getenv('POSTGRES_PORT'),
        'CONN_MAX_AGE': 120,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


ENTROPY = {
    'order_code': config.getint('entropy', 'order_code', fallback=5),
    'ticket_secret': config.getint('entropy', 'ticket_secret', fallback=32),
    'voucher_code': config.getint('entropy', 'voucher_code', fallback=16),
    'giftcard_secret': config.getint('entropy', 'giftcard_secret', fallback=12),
}
EVENTYAY_PRIMARY_COLOR = '#2185d0'


DEFAULT_CURRENCY = config.get('eventyay', 'currency', fallback='EUR')
CURRENCY_PLACES = {
    # default is 2
    'BIF': 0,
    'CLP': 0,
    'DJF': 0,
    'GNF': 0,
    'JPY': 0,
    'KMF': 0,
    'KRW': 0,
    'MGA': 0,
    'PYG': 0,
    'RWF': 0,
    'VND': 0,
    'VUV': 0,
    'XAF': 0,
    'XOF': 0,
    'XPF': 0,
}

CURRENCIES = list(currencies)

# For development, we just store emails as files.
# TODO: Define production, development, testing environments then
# make email backend vary accordingly.
EMAIL_BACKEND = 'eventyay.base.email.FileSavedEmailBackend'
EMAIL_FILE_PATH = BASE_DIR / 'dev-sent-emails'
ALL_LANGUAGES = [
    ('en', _('English')),
    ('de', _('German')),
    ('de-formal', _('German (informal)')),
    ('ar', _('Arabic')),
    ('zh-hans', _('Chinese (simplified)')),
    ('da', _('Danish')),
    ('nl', _('Dutch')),
    ('nl-informal', _('Dutch (informal)')),
    ('fr', _('French')),
    ('fi', _('Finnish')),
    ('el', _('Greek')),
    ('it', _('Italian')),
    ('lv', _('Latvian')),
    ('pl', _('Polish')),
    ('pt-pt', _('Portuguese (Portugal)')),
    ('pt-br', _('Portuguese (Brazil)')),
    ('ru', _('Russian')),
    ('es', _('Spanish')),
    ('sw', _('Swahili')),
    ('tr', _('Turkish')),
    ('uk', _('Ukrainian')),
]
LANGUAGES_OFFICIAL = {'en', 'de', 'de-formal'}
LANGUAGES_INCUBATING = {'pl', 'fi', 'pt-br'} - set(config.get('languages', 'allow_incubating', fallback='').split(','))
LANGUAGES_RTL = {'ar', 'hw'}
LANGUAGE_CODE = config.get('locale', 'default', fallback='en')


LOCALE_PATHS = [
    os.path.join(os.path.dirname(__file__), 'locale'),
]
if config.has_option('languages', 'path'):
    LOCALE_PATHS.insert(0, config.get('languages', 'path'))

if DEBUG:
    LANGUAGES = ALL_LANGUAGES
else:
    LANGUAGES = [(k, v) for k, v in ALL_LANGUAGES if k not in LANGUAGES_INCUBATING]


EXTRA_LANG_INFO = {
    'de-formal': {
        'bidi': False,
        'code': 'de-formal',
        'name': 'German (informal)',
        'name_local': 'Deutsch',
        'public_code': 'de',
    },
    'nl-informal': {
        'bidi': False,
        'code': 'nl-informal',
        'name': 'Dutch (informal)',
        'name_local': 'Nederlands',
        'public_code': 'nl',
    },
    'fr': {'bidi': False, 'code': 'fr', 'name': 'French', 'name_local': 'Français'},
    'lv': {'bidi': False, 'code': 'lv', 'name': 'Latvian', 'name_local': 'Latviešu'},
    'pt-pt': {
        'bidi': False,
        'code': 'pt-pt',
        'name': 'Portuguese',
        'name_local': 'Português',
    },
    'sw': {
        'bid': False,
        'code': 'sw',
        'name': _('Swahili'),
        'name_local': 'Kiswahili',
    },
}

django.conf.locale.LANG_INFO.update(EXTRA_LANG_INFO)

EVENTYAY_EMAIL_NONE_VALUE = 'info@eventyay.com'
MAIL_FROM = SERVER_EMAIL = DEFAULT_FROM_EMAIL = config.get('mail', 'from', fallback='eventyay@localhost')

# Internal settings
SESSION_COOKIE_NAME = 'eventyay_session'
LANGUAGE_COOKIE_NAME = 'eventyay_language'
CSRF_COOKIE_NAME = 'eventyay_csrftoken'
# TODO that probably needs adjustment for the actual deployment
CSRF_TRUSTED_ORIGINS = ['http://localhost:1337', 'http://next.eventyay.com:1337', 'https://next.eventyay.com']
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_DOMAIN = config.get('eventyay', 'cookie_domain', fallback=None)


TALK_HOSTNAME = config.get('eventyay', 'talk_hostname', fallback='https://wikimania-dev.eventyay.com/')
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/


TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


LANGUAGES_RTL = {'ar', 'he'}


METRICS_ENABLED = config.getboolean('metrics', 'enabled', fallback=False)
METRICS_USER = config.get('metrics', 'user', fallback='metrics')
METRICS_PASSPHRASE = config.get('metrics', 'passphrase', fallback='')

CACHES = {
    'default': {
        'BACKEND': 'eventyay.helpers.cache.CustomDummyCache',
    }
}
REAL_CACHE_USED = False
SESSION_ENGINE = None

HAS_MEMCACHED = config.has_option('memcached', 'location')
if HAS_MEMCACHED:
    REAL_CACHE_USED = True
    CACHES['default'] = {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': config.get('memcached', 'location'),
    }

HAS_REDIS = config.has_option('redis', 'location')
if HAS_REDIS:
    redis_options = {
        'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        'REDIS_CLIENT_KWARGS': {'health_check_interval': 30},
    }
    redis_tls_config = build_redis_tls_config(config)
    if redis_tls_config is not None:
        redis_options['CONNECTION_POOL_KWARGS'] = redis_tls_config
        redis_options['REDIS_CLIENT_KWARGS'].update(redis_tls_config)

    if config.has_option('redis', 'password'):
        redis_options['PASSWORD'] = config.get('redis', 'password')

    CACHES['redis'] = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('redis', 'location'),
        'OPTIONS': redis_options,
    }
    CACHES['redis_sessions'] = {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('redis', 'location'),
        'TIMEOUT': 3600 * 24 * 30,
        'OPTIONS': redis_options,
    }
    if not HAS_MEMCACHED:
        CACHES['default'] = CACHES['redis']
        REAL_CACHE_USED = True
    if config.getboolean('redis', 'sessions', fallback=False):
        SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
        SESSION_CACHE_ALIAS = 'redis_sessions'

if not SESSION_ENGINE:
    if REAL_CACHE_USED:
        SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
    else:
        SESSION_ENGINE = 'django.contrib.sessions.backends.db'

CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TASK_QUEUES = (
    Queue('default', routing_key='default.#'),
    Queue('background', routing_key='background.#'),
    Queue('notifications', routing_key='notifications.#'),
)
CELERY_TASK_ROUTES = (
    [
        ('eventyay.base.services.notifications.*', {'queue': 'notifications'}),
        ('eventyay.api.webhooks.*', {'queue': 'notifications'}),
    ],
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = config.get('urls', 'static', fallback=BASE_PATH + '/static/')

STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static') ]



STATIC_ROOT = BASE_DIR / 'static.dist'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)
STATICI18N_ROOT = os.path.join(BASE_DIR, 'static')

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
    ('text/vue', 'eventyay.helpers.compressor.VueCompiler'),
)

COMPRESS_ENABLED = COMPRESS_OFFLINE = not debug_fallback
COMPRESS_CSS_FILTERS = (
    # CssAbsoluteFilter is incredibly slow, especially when dealing with our _flags.scss
    # However, we don't need it if we consequently use the static() function in Sass
    # 'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSCompressorFilter',
)

TALK_BASE_PATH = config.get('eventyay', 'talk_base_path', fallback='/talks')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Adjustable settings
INSTANCE_NAME = config.get('eventyay', 'instance_name', fallback='eventyay')
EVENTYAY_REGISTRATION = config.getboolean('eventyay', 'registration', fallback=True)
EVENTYAY_PASSWORD_RESET = config.getboolean('eventyay', 'password_reset', fallback=True)
EVENTYAY_LONG_SESSIONS = config.getboolean('eventyay', 'long_sessions', fallback=True)
EVENTYAY_AUTH_BACKENDS = config.get('eventyay', 'auth_backends', fallback='eventyay.base.auth.NativeAuthBackend').split(
    ','
)
EVENTYAY_ADMIN_AUDIT_COMMENTS = config.getboolean('eventyay', 'audit_comments', fallback=False)
EVENTYAY_OBLIGATORY_2FA = config.getboolean('eventyay', 'obligatory_2fa', fallback=False)
EVENTYAY_SESSION_TIMEOUT_RELATIVE = 3600 * 3
EVENTYAY_SESSION_TIMEOUT_ABSOLUTE = 3600 * 12


PRETIX_SESSION_TIMEOUT_RELATIVE = 3600 * 3
PRETIX_SESSION_TIMEOUT_ABSOLUTE = 3600 * 12

PRETIX_PLUGINS_DEFAULT = config.get(
    'eventyay',
    'plugins_default',
    fallback='eventyay.plugins.sendmail,eventyay.plugins.statistics,eventyay.plugins.checkinlists,eventyay.plugins.autocheckin',
)
PRETIX_PLUGINS_EXCLUDE = config.get('eventyay', 'plugins_exclude', fallback='').split(',')

PRETIX_ADMIN_AUDIT_COMMENTS = config.getboolean('eventyay', 'audit_comments', fallback=False)

LOG_CSP = config.getboolean('eventyay', 'csp_log', fallback=True)
CSP_ADDITIONAL_HEADER = config.get('eventyay', 'csp_additional_header', fallback='')

# Django allauth settings for social login
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True

SOCIALACCOUNT_ADAPTER = 'eventyay.plugins.socialauth.adapter.CustomSocialAccountAdapter'
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_LOGIN_ON_GET = True

OAUTH2_PROVIDER_APPLICATION_MODEL = 'api.OAuthApplication'
OAUTH2_PROVIDER_GRANT_MODEL = 'api.OAuthGrant'
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = 'api.OAuthAccessToken'
OAUTH2_PROVIDER_ID_TOKEN_MODEL = 'api.OAuthIDToken'
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = 'api.OAuthRefreshToken'
OAUTH2_PROVIDER = {
    'SCOPES': {
        'profile': _('User profile only'),
        'read': _('Read access'),
        'write': _('Write access'),
    },
    'OAUTH2_VALIDATOR_CLASS': 'eventyay.api.oauth.Validator',
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'] if not DEBUG else ['http', 'https'],
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600 * 24,
    'ROTATE_REFRESH_TOKEN': False,
    'PKCE_REQUIRED': False,
    'OIDC_RESPONSE_TYPES_SUPPORTED': ['code'],  # We don't support proper OIDC for now
}

LOGIN_URL = 'eventyay_common:auth.login'
LOGIN_URL_CONTROL = 'eventyay_common:auth.login'
# CSRF_FAILURE_VIEW = 'eventyay.base.views.errors.csrf_failure'

PROFILING_RATE = config.getfloat('django', 'profile', fallback=0)  # Percentage of requests to profile

_LOGGING_HANDLERS = {
    'console': {
        'level': 'DEBUG',
        'class': 'logging.StreamHandler',
        'formatter': 'verbose',
    },
    'rich': {
        'level': 'DEBUG',
        'class': 'rich.logging.RichHandler' if os.getenv('TERM') else 'logging.StreamHandler',
        'formatter': 'tiny' if os.getenv('TERM') else 'verbose',
    },
}
_LOGGING_FORMATTERS = {
    'verbose': {'format': '%(levelname)s %(asctime)s %(module)s: %(message)s'},
    'tiny': {
        'format': '%(message)s',
        'datefmt': '[%X]',
    },
}
CONSOLE_HANDLER = 'rich' if DEBUG else 'console'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': 'WARNING',
        'handlers': [CONSOLE_HANDLER],
    },
    'formatters': _LOGGING_FORMATTERS,
    'handlers': _LOGGING_HANDLERS,
    'loggers': {
        'django.db.backends': {
            'handlers': [CONSOLE_HANDLER],
            'level': 'WARNING',
            'propagate': False,
        },
        'eventyay': {
            'handlers': [CONSOLE_HANDLER],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        }
    },
}
